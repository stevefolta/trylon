New Dispatch Timings
	[2005.4.18]

FPS in Perisphere.

slow: 32-33 fps
fast: 30.303/31.25 fps

-O2
slow: 32.2581
fast: 32.2581


later:
slow: 30.303/31.25
fast: 31.25

-O3
slow: 33.3333
fast: 33.3333

=====

Optimizing Field Accesses
	[2005.4.20]

FPS in Perisphere.

Before: 32.2581
After:  32.2581

Better FPS:
before: 31.5
after:  31.5
and while I'm at it, slow dispatch: 31.5

=====

Unsafe Dispatch
	[2005.4.21]

Before: 34.1
After: 34.0 (after a *long* time)

=====

Constant Selectors
	[2005.4.28]

Linux on SS40G:
Before: ~440ms
After:  ~440ms

Mac OSX on PowerBook 12" 1GHz:
Before: ~670ms
After:  ~690ms
Before, -O3: ~690ms
After, -O3:  ~345ms
After, -O1:  ~345ms

Perisphere:
Before, -O1: 42fps
After, -O1:  42fps


=====

Semi-Primitive Strings
	[2005.4.30]

With just start, stopper, length, is-empty.
('constant-selectors' was on, -O1.)
Before: 40.0 fps
After:  40.7 fps

Same, XML doc:
Before: 26 fps
After:  26 fps (from the low side)


=====

Test_() As A Macro
	[2005.4.30]

SS40G:
Before: 440 ms
After:  410 ms


=====

classes-by-num
	[2005.5.6]

SS40G, constant-selectors:
Before: 415 ms
After:  410 ms

SS40G, no constant-selectors:
Before: 410 ms
After:  410 ms

SS40G, no constant-selectors, -O1:
Before: 365 ms
After:  365 ms

=====

Self-Compiler Timing
	[2006.2.9]

On the SS40G.

Orig:  13.5
Semi-primitive-strings: 14.5

Odd...

=====

CLexer

On the SS40G.

Lexer: 14s.
CLexer: 13.6s


=====

Lambda Implementation
	[2006.6.10]

Lambda object:

	<Lambda0 class>
	context
	code

Need different classes for different numbers of args (Lambda0, ... Lambda9).

Or would it be okay to have one class, and take a tuple?  But there'd still need to be nullary vs. argumented versions.


=====

Package Macros
	[2006.6.15]

Add macros to Trylon.h to make declarations (hopefully) easier, or at least more portable.

	#define LambdaPkg_	Subpkg_(Lambda, Subpkg_(Implementation, StandardPkg_))

	obj_ Pkgfn_(do_with_co_, Subpkg_(Lambda0, LambdaPkg_))(obj_ this_, obj_ value)
	{
		/***/
	}


=====

C Compiling Bug Log

[2006.3.18]
After a "There is no \"$(name)\" function" error, got a link error for an undefined reference to a package field in "Main".  Seems like "Main.c" didn't get recompiled.
[2006.3.19]
TrylonCompiler__Expression.c changed, not recompiled, probably after an error in DictLiteral.


=====


