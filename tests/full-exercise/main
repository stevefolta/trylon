trylon-package Main

fields true-test


fn main: args
	try
		tests
	catch Exception
		print-line
		print-line: exception message

fn tests
	print-line: "-- Statement tests --"

	# if
	if-test: 2
	if-test: 3
	if-test: 4
	print-line: "--"

	# loop
	i [Int] := 0
	loop
		i += 1
		if i == 4
			continue
		print-line: i string
		if i == 10
			break
	print-line: "--"

	# while
	i = 1
	while i <= 10
		print-line: i string
		i += 1
	print-line: "--"

	# for
	for i in Interval new: 7 to: 9
		print-line: i string
	print-line: "--"

	# throw/catch
	try
		throw-test
	# pre-catch comment
	catch Exception
		print-line: exception message
	# post-catch comment
	iff test-uncaught-exception
		try
			throw-uncaught-test
		catch Exception
			print-line: exception message
	print-line: "--"
	
	# iff
	succeeded := false
	iff true-test
		succeeded = true
	test: succeeded title: "iff statement (uninverted)"
	iff !true-test
		succeeded = false
	test: succeeded title: "iff statement (inverted)"
	print-line: "--"


	print-line
	print-line: "-- Expression Tests --"

	print-line: (3 + 4) string + " == 7"
	print-line: (3 + 4 * 5) string + " == 23"
	print-line: (3 == 3) string + " == true"
	print-line: (3 == 4) string + " == false"
	x := 3
	print-line: (9 / x) string + " == 3"
	print-line: (10 % x) string + " == 1"
	print-line: "--"
	print-line: (true || 3) string + " == true"
	print-line: (false || 3) string + " == 3"
	print-line: (true && 3) string + " == 3"
	print-line: (false && 3) string + " == false"
	print-line: (!false) string + " == true"
	print-line: "--"
	check: 3 & 7 against: 3 title: "&"
	check: 3 | 7 against: 7 title: "|"
	check: 3 ^ 7 against: 4 title: "^"
	check: (~-2) against: 1 title: "~-2"
	foo = 7
	print-line: foo string + " == 7"
	print-line: "3" float string + " == 3"

	print-line
	print-line: "-- Float Tests --"

	x := 3.2
	print-line: (x + 2.1) string + " == 5.3"
	print-line: (x - 2.1) string + " == 1.1"
	print-line: (x * 2.0) string + " == 6.4"
	print-line: (x / 2.0) string + " == 1.6"
	print-line: (x < 3.0) string + " == false"
	print-line: (x > 3.0) string + " == true"
	print-line: (x == 3.2) string + " == true"
	print-line: (x != 3.2) string + " == true"
	print-line: (3 float + 0.2) string + " == 3.2"
	print-line: 3.2 int string + " == 3"
	print-line: "3.2" float string + " == 3.2"

	print-line
	print-line: "-- Other Tests --"

	test-obj := PrivateClass new
	test-obj go
	PrivatePackage go
	print-line

	list := List new
	list append: "List item 1"
	list append: "List item 2"
	list append: "List item 3"
	for item in list
		print-line: item
	print-line

	tuple := "Tuple item 1", "Tuple item 2", "Tuple item 3"
	for item in tuple
		print-line: item
	print-line

	for item in MessageException new: "Single item"
		print-line: item message
	print-line

	if 'foo' == 'foo'
		print-line: "Symbol equality worked."
	if 'foo' != 'bar'
		print-line: "Symbol inequality worked."
	print-line

	abcde := "abcde"
	print-line: (abcde substr: 3) + " == de"
	print-line: (abcde substr: 2 length: 2) + " == cd"
	print-line
	
	subclass-instance := SubClass new
	print-line: "Overriding a fn with a field " + subclass-instance message + "."
	print-line: "Super call " + subclass-instance overridden-message + "."
	print-line

	#
	return 0


fn if-test: arg
	if arg == 2
		print-line: "It's two."
	else if arg == 3
		print-line: "It's three."
	else
		print-line: "It's not two or three."

fn throw-test
	throw MessageException new: "Boo!"

fn throw-uncaught-test
	throw 35

fn test: succeeded title: title
	if succeeded
		print-line: title + " test succeeded."
	else
		throw MessageException new: "*** " + title + " test failed. ***"

fn check: value against: expected-value title: title
	if value == expected-value
		print-line: title + " test succeeded."
	else
		throw MessageException new: "*** " + title + " test failed. ***"


fields bogue value
fn foo
	return value
fn foo: new-value
	value = new-value


class PrivateClass
	fn create
		#...
	fn go
		print-line: "Private class worked."

package PrivatePackage
	fn go
		print-line: "Private package worked."

class SuperClass
	fn message
		return "didn't work"
	fn overridden-message
		return "did work"

class SubClass
	superclass SuperClass
	field message
	fn create
		message = "did work"
	fn overridden-message
		return super overridden-message


