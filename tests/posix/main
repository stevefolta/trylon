trylon posix-test

main: args
	try
		fd = Posix open: "main" flags: 'O_RDONLY'
		print-line: "fd = " + fd string
		if fd == -1
			errno = Posix errno
			err-string = Posix strerror: errno
			print-line: "errno = " + errno string + " (" + err-string + ")"
			return 1
		
		fds = Posix FDSet new
		fds set: fd
		result = 	--
			Posix select: fd + 1 reads: fds writes: nil exceptions: nil timeout: nil
		print-line: "select result = " + result string
		if fds at: fd
			print-line: "The fd can read without blocking."

		Posix close-fd: fd
		print-line

		print-flag: 'O_RDONLY'
		print-flag: 'O_WRONLY'
		print-flag: 'O_RDWR'
		print-flag: 'O_APPEND'
		print-flag: 'O_ASYNC'
		print-flag: 'O_CREAT'
		print-flag: 'O_DIRECT'
		print-flag: 'O_DIRECTORY'
		print-flag: 'O_EXCL'
		print-flag: 'O_LARGEFILE'
		print-flag: 'O_NOATIME'
		print-flag: 'O_NOCTTY'
		print-flag: 'O_NOFOLLOW'
		print-flag: 'O_NONBLOCK'
		print-flag: 'O_NDELAY'
		print-flag: 'O_SYNC'
		print-flag: 'O_TRUNC'
		send: ""

		# Regex.
		Test name: "Regex" check: regex-test
	
	else
		send: exception message


print-flag: symbol
	print: symbol
	print: " = "
	print: (Posix value-for-flag: symbol)
	print-line


regex-test
	# Simple matching.
	regex = Posix Regex new: "foo"
	if !regex matches: "boo foo hoo"
		return false
	if regex matches: "bar baz"
		return false
	
	# Getting results.
	regex = Posix Regex new: "(f[a-z]*) (f[a-z]*) (f[[:alnum:]]*)" flags: 'extended'
	haystack = "foo flarf finagle bar baz xoof"
	expected-results = List from: "foo flarf finagle", "foo", "flarf", "finagle"
	for match in regex matches: haystack
		if (match in: haystack) != expected-results pop-front
			return false
	if !expected-results is-empty
		return false

	return true


