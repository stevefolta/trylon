trylon posix-test

main: args
	try
		fd = Posix open: "main" flags: 'O_RDONLY'
		print-line: "fd = " + fd string
		if fd == -1
			errno = Posix errno
			err-string = Posix strerror: errno
			print-line: "errno = " + errno string + " (" + err-string + ")"
			return 1
		
		fds = Posix FDSet new
		fds set: fd
		result = 	--
			Posix select: fd + 1 reads: fds writes: nil exceptions: nil timeout: nil
		print-line: "select result = " + result string
		if fds at: fd
			print-line: "The fd can read without blocking."

		Posix close-fd: fd
		print-line

		print-flag: 'O_RDONLY'
		print-flag: 'O_WRONLY'
		print-flag: 'O_RDWR'
		print-flag: 'O_APPEND'
		print-flag: 'O_ASYNC'
		print-flag: 'O_CREAT'
		print-flag: 'O_DIRECT'
		print-flag: 'O_DIRECTORY'
		print-flag: 'O_EXCL'
		print-flag: 'O_LARGEFILE'
		print-flag: 'O_NOATIME'
		print-flag: 'O_NOCTTY'
		print-flag: 'O_NOFOLLOW'
		print-flag: 'O_NONBLOCK'
		print-flag: 'O_NDELAY'
		print-flag: 'O_SYNC'
		print-flag: 'O_TRUNC'
		send: ""

		# Processes: fork, pipe.
		Test name: "fork/wait" check: test-fork
		Test name: "pipe" check: test-pipe
		Test name: "exec" check: test-exec

		# Regex.
		Test name: "Regex" check: regex-test

		# Directories.
		Test name: "directories" check: directory-test
	
	else
		send: exception message


print-flag: symbol
	print: symbol
	print: " = "
	print: (Posix value-for-flag: symbol)
	print-line


test-fork
	exit-status = 33
	child = Posix fork
	if child == 0
		# We *are* the child.
		System sleep-ms: 250
		send: "From the child."

		# Exit directly, skipping the test result.
		Posix exit: exit-status
	else
		# We're the parent.
		send: "From the parent (child = ", child, ")."
		wait-result = Posix wait-pid: child
		# OR: wait-result = Posix wait
		if !wait-result is-valid || !wait-result exited
			return false
		if wait-result exit-status != exit-status
			return false

	return true


test-pipe
	values = "foo", "bar", "baz"
	pipe-fds = Posix pipe
	child = Posix fork
	if child == 0
		# This is the child.
		Posix close-fd: pipe-fds read
		out-stream = Posix FDOutputStream new: pipe-fds write
		for value in values
			out-stream send: value
		out-stream close
		Posix exit: 0
	else
		# This is the parent.
		Posix close-fd: pipe-fds write
		in-stream = Posix FDInputStream new: pipe-fds read
		lines = StreamLinesReader new: in-stream
		ok = true
		for value in values
			received-value = lines next
			if received-value != value
				ok = false
				break
		if lines next != nil
			ok = false
		in-stream close
		return ok


test-exec
	pipe-fds = Posix pipe
	child = Posix fork
	if child == 0
		# This is the child.
		try
			Posix close-fd: pipe-fds read
			Posix dup-from: pipe-fds write to: Posix stdout-fd
			Posix execp: "echo" arguments: "echo", "foo"
		Posix exit: 1
	else
		# This is the parent.
		Posix close-fd: pipe-fds write
		in-stream = Posix FDInputStream new: pipe-fds read
		lines = StreamLinesReader new: in-stream
		line = lines next
		ok = (line && line == "foo")
		in-stream close
		return ok


regex-test
	# Simple matching.
	regex = Posix Regex new: "foo"
	if !regex matches: "boo foo hoo"
		return false
	if regex matches: "bar baz"
		return false
	
	# Getting results.
	regex = Posix Regex new: "(f[a-z]*) (f[a-z]*) (f[[:alnum:]]*)" flags: 'extended'
	haystack = "foo flarf finagle bar baz xoof"
	expected-results = List from: "foo flarf finagle", "foo", "flarf", "finagle"
	for match in regex matches: haystack
		if (match in: haystack) != expected-results pop-front
			return false
	if !expected-results is-empty
		return false

	return true


directory-test
	ok = true
	dir-name = "test-mkdir"
	try
		start-wd = Posix getcwd
		Posix mkdir: dir-name mode: 511
		try
			Posix chdir: dir-name
			Posix chdir: start-wd
			Posix rmdir: dir-name
		else
			ok = false
			Posix chdir: start-wd
			Posix rmdir: dir-name
			throw exception
	else
		ok = false
	return ok


