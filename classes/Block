Class: Block
Superclass: Context

parent: Context;
locals: Dictionary of CompiledField;
statements: List of Statement;


create(parent: Context)
{
	this.parent = parent;
	locals = nil;	// Will be added if needed.
	statements = new List of Statement;
}


add-local(local: CompiledField)
{
	if (locals == nil)
		locals = new Dictionary of CompiledField;

	locals[local.name] = local;
}


append(statement: Statement)
{
	statements.append(statement);
}


lookup-function(name: String): TrylonFunction
{
	// See if there's a local for it.
	if (locals) {
		local-name: String = name;
		is-setter: Bool = false;
		if (name.ends-with(":")) {
			local-name = name.substr(0, name.length - 1);
			is-setter = true;
			}
		local: CompiledField = locals[local-name];
		if (local) {
			if (is-setter)
				return new LocalSetter(local);
			else
				return new LocalGetter(local);
			}
		}

	// Otherwise, go up the chain.
	function: TrylonFunction = parent.lookup-function(name);
	if (function && is-lambda)
		function.used-by-lambda();
	return function;
}


lookup-function-autodeclaring(name: String): TrylonFunction
{
	function: TrylonFunction = lookup-function(name);
	if (function)
		return function;

	// If it wasn't found, and it's a setter, autodeclare a local.
	if (name.find-index-of(':') == name.length - 1) {
		local: CompiledField(name.substr(0, name.length - 1), nil);
		add-local(local);
		return new LocalSetter(local);
		}
	
	return nil;
}


enclosing-method-context: MethodContext
{
	return parent.enclosing-method-context;
}


is-lambda(): Bool
{
	return false;
}


prepare-to-emit()
{
	for (statement: Statement in statements)
		statement.prepare-to-emit();
}


emit-code(builder: MethodBuilder)
{
	saved-temp-num: Int = builder.next-temporary-num;

	builder.indent();
	builder.add-line("{");

	// Locals
	if (locals) {
		line: StringBuilder;
		line += "obj_ ";
		have-local: Bool = false;
		for (local-name: String in locals.keys) {
			if (have-local)
				line += ", ";
			else
				have-local = true;
			line += builder.mangle-name(local-name);
			}
		line += ";";
		builder.add-line(line.string);
		}

	// Contents
	for (statement: Statement in statements)
		statement.emit-code(builder);

	builder.add-line("}");
	builder.unindent();

	builder.next-temporary-num = saved-temp-num;
}


