Class: BuildSettings

program-name: String;
c-flags: List of String;
link-flags: List of String;
c-compiler: String;
linker: String;
dictionary: Dictionary of String;
is-verbose: Bool;
slow-dispatch: Bool;
unsafe-dispatch: Bool;
optimize-field-accesses: Bool;


create()
{
	program-name = "program-binary";
	c-flags = new List of String;
	link-flags = new List of String;
	c-compiler = "gcc";
	linker = "gcc";
	dictionary = new Dictionary of String;
	is-verbose = false;
	slow-dispatch = false;
	unsafe-dispatch = false;
	optimize-field-accesses = true;

	sysname: String = System.system.sysname;
	if (!sysname.is-empty)
		dictionary[sysname] = sysname;
}


load()
{
	load-from("build-settings.local");
	load-from("build-settings");
}


load-from(file-name: String)
{
	file: File(file-name);
	if (!file.exists)
		return;

	try {
		lexer: Lexer(file.contents);
		parse-block(lexer);
		}
	catch (e: Exception) {
		throw MessageException("Error in \"" + file-name + "\": " + e.message);
		}
}


parse-block(lexer: Lexer)
{
	loop {
		token: Token = lexer.next-token;
		type: Symbol = token.type;

		if (type == 'eol')
			continue;

		else if (type == 'comment') {
			token = lexer.next-token; 	// It *will* be an 'eol'.
			continue;
			}

		else if (type == 'name' || type == 'keyword') {
			name: String = token.text;
			if (type == 'keyword')
				name = name.substr(0, name.length - 1);
			if (name == "program")
				program-name = parse-name(lexer, name);
			else if (name == "c-flags")
				parse-flags(lexer, c-flags, name);
			else if (name == "link-flags")
				parse-flags(lexer, link-flags, name);
			else if (name == "c-compiler")
				c-compiler = parse-name(lexer, name);
			else if (name == "linker")
				linker = parse-name(lexer, name);
			else if (name == "slow-dispatch")
				slow-dispatch = parse-boolean(lexer, name);
			else if (name == "unsafe-dispatch")
				unsafe-dispatch = parse-boolean(lexer, name);
			else if (name == "optimize-field-accesses")
				optimize-field-accesses = parse-boolean(lexer, name);

			else if (name == "if" || name == "iff")
				parse-if(lexer);
			}

		else if (type == 'indent') {
			parse-block(lexer);
			}
		
		else if (type == 'eof' || type == 'unindent')
			break;
		}
}


parse-name(lexer: Lexer, declaration: String): String
{
	token: Token = lexer.next-token;
	if (token.type == 'eol' || token.type == 'comment')
		throw MessageException("Empty \"" + declaration + "\" declaration.");
	name: String = token.text;
	token = lexer.next-token;
	if (token.type == 'comment')
		lexer.next-token; 	// It *will* be an 'eol'.
	else if (token.type != 'eol') {
		throw MessageException("Extra tokens in \"" + declaration +
		                       "\" declaration.");
		}

	return name;
}


parse-flags(lexer: Lexer, flags: (List of String), declaration: String)
{
	flag: String = "";
	loop {
		token: Token = lexer.next-token;

		if (token.type == 'eol') {
			if (!flag.is-empty)
				flags.append(flag);
			break;
			}

		else if (token.type == 'comment') {
			// Just go round again; 'eol' will be next.
			}

		else if (token.type == '-') {
			// We want to allow flags starting with hyphens without quoting.
			flag += "-";
			}

		else {
			flag += token.text;
			flags.append(flag);
			flag = "";
			}
		}
}


parse-boolean(lexer: Lexer, declaration: String): Bool
{
	token: Token = lexer.next-token;
	if (token.type == 'eol' || token.type == 'comment')
		throw MessageException("Empty \"" + declaration + "\" declaration.");
	name: String = token.text;
	token = lexer.next-token;
	if (token.type == 'comment')
		lexer.next-token; 	// It *will* be an 'eol'.
	else if (token.type != 'eol') {
		throw MessageException("Extra tokens in \"" + declaration +
		                       "\" declaration.");
		}

	return (name == "true" || name == "on");
}


parse-if(lexer: Lexer)
{
	// Get the value.
	token: Token = lexer.next-token;
	if (token.type == 'comment' || token.type == 'eol')
		throw MessageException("Invalid \"if\" statement.");
	value: String = dictionary[token.text];
	if (value == nil)
		value = "";

	// Get the end of line.
	token = lexer.next-token;
	if (token.type == 'comment')
		token = lexer.next-token;
	if (token.type != 'eol')
		throw MessageException("Extra tokens in \"if\" statement.");

	// Handle the block.
	token = lexer.next-token;
	if (token.type != 'indent')
		throw MessageException("Missing block in \"if\" statement.");
	if (!value.is-empty) {
		// "true".  Parse the block.
		parse-block(lexer);
		}
	else {
		// "false".  Skip the block.
		indent-count: Int = 1;
		loop {
			token = lexer.next-token;
			if (token.type == 'indent')
				indent-count += 1;
			else if (token.type == 'unindent') {
				indent-count -= 1;
				if (indent-count <= 0)
					break;
				}
			}
		}
}


