Class: ForStatement
Superclass: Statement


local: CompiledField;
collection: Expression;
body: Block;


create(local: CompiledField, collection: Expression, body: Block,
       comment: String)
{
	this.local = local;
	this.collection = collection;
	this.body = body;
	this.comment = comment;
}


prepare-to-emit()
{
	collection.prepare-to-emit();
	body.prepare-to-emit();
}


emit-code(builder: MethodBuilder)
{
	builder.using-object-function("iterator");
	builder.using-object-function("is-done");
	builder.using-object-function("current-item");
	builder.using-object-function("go-forward");

	// Get the iterator
	saved-temp-num: Int = builder.next-temporary-num;
	collection-result: ExpressionResult = collection.emit-code(builder);
	builder.add-line("{");
	line: String =
		"obj_ iterator_ = Call_(iterator, " + collection-result.access + ");";
	builder.add-line(line);
	builder.next-temporary-num = saved-temp-num;

	// Start the loop
	builder.add-line(add-comment("while (1) {"));
	builder.add-line("_StartContinueCatcher_");

	// Do the test
	builder.add-line("obj_ is_done_ = Call_(is_done, iterator_);");
	builder.add-line("if (Test_(is_done_))");
	builder.add-line("\t_Break_");

	// Emit the local
	builder.add-line("{");
	local-name: String = MethodBuilder.mangle-name(local.name);
	builder.add-line("\tobj_ " + local-name +
	                 " = Call_(current_item, iterator_);");

	// Body
	body.emit-code(builder);

	// Go to the next item
	builder.add-line("}");
	builder.add-line("_EndContinueCatcher_");
	builder.add-line("Call_(go_forward, iterator_);");

	// Finish the loop
	builder.add-line("}");
	builder.add-line("}");
}





