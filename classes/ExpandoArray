Class: ExpandoArray
Stand-In-Types: Type

blocks: BytePtr;
num-blocks: Int;
num-items: Int;
block-size: Int;


create(block-size: Int)
{
	this.block-size = block-size;
	num-items = 0;
	num-blocks = 1;
	blocks = new BytePtr(4 * num-blocks);
	blocks.ptr-at(0) = new BytePtr(4 * block-size);
}


create()
{
	create(128);
}


[](index: Int): Type
{
	which-block: Int = index / block-size;
	if (which-block >= num-blocks)
		return nil;
	return
		blocks.ptr-at(which-block).object-ptr-at(index % block-size).as-a(Type);
}


"[]-set"(index: Int, object: Type)
{
	which-block: Int = index / block-size;
	if (which-block >= num-blocks)
		expand(which-block + 1);

	blocks.ptr-at(which-block).object-ptr-at(index % block-size) = object;

	if (index >= num-items)
		num-items = index + 1;
}


iterator: ExpandoArrayIterator of Type
{
	return new ExpandoArrayIterator of Type(this);
}


expand(new-num-blocks: Int)
{
	// Copy the existing "blocks".
	new-blocks: BytePtr = new BytePtr(4 * new-num-blocks);
	new-blocks.copy-from(blocks, 4 * num-blocks);

	// Add new blocks.
	which-block: Int = num-blocks;
	while (which-block < new-num-blocks)
		new-blocks.ptr-at(which-block) = new BytePtr(4 * block-size);

	// Install the new "blocks".
	blocks = new-blocks;
	num-blocks = new-num-blocks;
}


