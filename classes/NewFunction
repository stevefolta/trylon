Class: NewFunction
Superclass: TrylonFunction


name: String;
creator: CompiledFunction;
on-class: CompiledClass;


create(creator: CompiledFunction, on-class: CompiledClass)
{
	this.creator = creator;
	this.on-class = on-class;

	name = "new" + creator.name.substr(6);
}


emit-call(arguments: (List of ExpressionResult), builder: MethodBuilder)
	: ExpressionResult
{
	// Declare the allocator
	allocator-c-name: String =
		MethodBuilder.mangle-name("allocate-object:") +
		"__Standard__Implementation";
	builder.add-extern-declaration("extern obj_ " + allocator-c-name + "(obj_);");

	// Declare the creator
	creator-c-name: String =
		builder.mangle-name(creator.name) + "__" + on-class.c-name;
	line: String = "extern obj_ " + creator-c-name + "(obj_";
	for (arg: ExpressionResult in arguments)
		line += ", obj_";
	line += ");";
	builder.add-extern-declaration(line);

	// Allocate the object
	temporary: Temporary = builder.get-temporary();
	line = temporary.name + " = ";
	line +=
		allocator-c-name + "((obj_) &" + on-class.c-name + ");";
	builder.add-line(line);

	// Call the creator
	line = creator-c-name;
	line += "(" + temporary.name;
	for (arg: ExpressionResult in arguments)
		line += ", " + arg.access;
	line += ");";
	builder.add-line(line);

	return temporary;
}


emit-code(stream: OutputStream)
{
	// Write the header (building up the args at the same time)
	args: List of ExpressionResult;
	stream.write("obj_ " + c-name + "(");
	have-arg: Bool = false;
	for (arg: CompiledField in creator.arguments) {
		if (have-arg)
			stream.write(", ");
		else
			have-arg = true;
		stream.write("obj_ ");
		arg-name: String = MethodBuilder.mangle-name(arg.name);
		stream.write(arg-name);
		args.append(new NameResult(arg.name));
		}
	stream.write-line(")");
	stream.write-line("{");

	// Write the body
	builder: MethodBuilder();
	builder.indent();
	result: ExpressionResult = emit-call(args, builder);
	builder.add-line("return " + result.access + ";");
	builder.unindent();
	builder.emit(stream);

	// Finish up
	stream.write-line("}");
	stream.write-line();
	stream.write-line();
}


c-name: String
{
	return MethodBuilder.mangle-name(name) + "__" + on-class.c-name;
}


