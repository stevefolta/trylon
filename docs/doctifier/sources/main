trylon doctifier

field given-title

main: all-args
	try
		args = all-args tail
		template = nil
		while !args is-empty
			arg = args pop-front
			
			if arg == "-t" || arg == "--template" || arg == "template:"
				arg = args pop-front
				if arg == nil
					throw MessageException new: "Missing the template argument."
				template = arg
			
			else if arg == "title:"
				arg = args pop-front
				given-title = arg
			
			else
				process-file: arg template: template

	catch Exception
		print-line: exception message
		return 1
	return 0


process-file: file-name template: template-name
	# If there's no template specified, try "template" in the current 
	# directory.
	if template-name == nil || template-name is-empty
		template-name = "template"
	
	# Read the file.
	contents = File contents-of: file-name
	page = parse-source: contents
	
	# Override the title, if it's given on the command line.
	if given-title
		page title = given-title
	
	# Read the template.
	template-contents = File contents-of: template-name
	
	# Copy the template out, substituting the page.
	for line in template-contents lines
		trimmed-line = line trimmed
		if (trimmed-line starts-with: "<?") && (trimmed-line ends-with: "?>")
			section = trimmed-line substr: 2 length: (trimmed-line length - 4)
			section = section trimmed
			if section == "contents"
				for section in page entries
					section emit
			else if section == "title"
				print-line: page title
		else
			print-line: line


parse-source: source
	page = Page new
	lines = source lines
	
	# Read the header.
	have-header = false
	for raw-line in lines
		line = raw-line trimmed
		if line is-empty
			break
		colon-index = line index-of: `:`
		if colon-index > 0
			header-name = line substr: 0 length: colon-index
			header-value = (line substr: colon-index + 1) trimmed
			if header-name == "title" || header-name == "Title"
				page title = header-value
		else
			# The first line without a "field name" is taken to be the title.
			if page title == nil || page title is-empty
				page title = line
	
	# Read the entries.
	section = nil
	paragraph = nil
	in-code = false
	for line in lines
		if line starts-with: "===="
			# Finish the current section
			if section
				if paragraph
					section add-paragraph: paragraph
				page add-section: section
				section = nil
				paragraph = nil
				in-code = false
			continue
		
		trimmed-line = line trimmed
		if trimmed-line is-empty && paragraph == nil
			continue
		
		# From here on, we'll be adding to the section; make sure there is one.
		if section == nil
			section = Section new
		
		# In the section's header.
		if section title == nil
			if trimmed-line is-empty
				continue
			
			# Otherwise, it's the title.
			section title = line
			continue
		
		# In the section's body.
		
		# Handle blank lines.
		if trimmed-line is-empty
			if in-code && paragraph
				paragraph add-blank-line
			else if paragraph
				# Finish it off.
				section add-paragraph: paragraph
				paragraph = nil
			continue
		
		# Did the "is-code" status change?
		line-is-code = line starts-with: "\t"
		status-changed = (line-is-code && !in-code) || (!line-is-code && in-code)
		if status-changed && paragraph
			section add-paragraph: paragraph
			paragraph = nil
		if paragraph == nil
			if line-is-code
				paragraph = Code new
			else
				paragraph = Paragraph new
			in-code = line-is-code

		paragraph add-line: line

	# Finish up.
	if paragraph
		section add-paragraph: paragraph
	if section
		page add-section: section
	return page


# Copyright 2005-2007 Steve Folta
# See the License file.

