Title: Expressions

=====

Literals

The usual string and numeric literals are supported.

	"Some kinda something"
	"The whole line.\n"
	3
	2.75
	0xDEADBEEF

Symbols are like strings, except that only one instance of a given symbol exists throughout the entire program.  This means they can be compared for equality without looking at all the characters, and thus can take the place of enumerations.

	'primary'
	if alignment == 'justified'
		#...

Character literals are specified using backquotes:

	if cur-char == `\n`
		#...

Finally, although not technically literals (they're actually variables in the "Standard" package), the following are used like literals:

	true
	false
	nil


=====

Names

The value of a variable is accessed simply by giving its name:

	args
	current-line
	point-1

It could be the name of a local variable, a function argument, a field, or a class or package variable.

Note that names can contain hyphens (although they can't start or end with a hyphen).  Underscores can also be used, but are heavily frowned upon.  Hyphens are much less ugly and easier to type.


=====

Operators

Most of the binary operators from C are available: +, -, *, /, %, |, &, ^.  The usual rules of precedence apply.  The || and && short-circuit operators are also available.

There is a comma operator, but it's not used as it is in C.  Instead, it is used to create "Tuples", which are essentially a form of array:

	( "one", "two", "three" )

These unary operators are available: -, +, ~, !.


=====

Function Calls

The following are examples of function calls:

	print-line
	print-line: "Hello"
	foo: 2 bar: 3 baz: 4

These would call functions named "print-line", "print-line:", and "foo:bar:baz:".

Sending a message to an object is also called a "function call" (or sometimes an "object call"):

	"Hello" length
	point x
	"Hello" substr: 3 length: 2   # "ll"


=====


