trylon TupleExpression
superclass Expression

fields members
fields index count-literal	# Only used by package literals.


create
	members = List new


add-member: member
	members append: member


prepare-to-emit
	for member in members
		member prepare-to-emit


emit-code: builder
	builder add-extern-declaration: "extern obj_ new_co___Standard__Tuple(obj_);"

	# Make the tuple object.
	tuple = builder get-temporary
	size-result = (IntLiteral new: members count string) emit-code: builder
	builder add-line: 	--
		tuple access + " = new_co___Standard__Tuple(" + size-result access + ");"
	
	# Set its fields.
	index = 1 	# Starts after the size.
	for member in members
		member-result = member emit-code: builder
		builder add-line: 	--
			tuple access + "->fields[" + index string + "] = " + 	--
			member-result access + ";"
		index += 1
	
	return tuple


assign-package-literal-indices: package
	for member in members
		member assign-package-literal-indices: package
	count-literal = IntLiteral new: members count string
	count-literal assign-package-literal-indices: package
	index = package new-literal-index


emit-package-literal: stream
	member-results = List new
	for member in members
		member-result = member emit-package-literal: stream
		member-results append: member-result
	count-result = count-literal emit-package-literal: stream
	stream write-all: ( "obj_ tu", index string, "_[] = { " )
	stream write-all: ( "(obj_) StdClassRef_(Tuple), ", count-result access )
	for member-result in member-results
		stream write-all: ( ", ", member-result access )
	stream write: " };\n"
	return Result new: index


class Result
	fields index

	create: index
		this index = index
	
	access
		return "((obj_) tu" + index string + "_)"


