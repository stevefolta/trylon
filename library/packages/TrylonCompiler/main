trylon TrylonCompiler

fields status-reporter the-compiler


mangle-name: name
	# Certain names are reserved in C and/or C++ but not in Trylon.
	if name == "class"
		return "class_"
	else if name == "char"
		return "char_"
	else if name == "int"
		return "int_"
	else if name == "short"
		return "short_"
	else if name == "long"
		return "long_"
	else if name == "float"
		return "float_"
	else if name == "double"
		return "double_"
	else if name == "inline"
		return "inline_"
	else if name == "static"
		return "static_"
	else if name == "namespace"
		return "namespace_"
	
	# Mangle the name.
	result = ""
	run-start = name start
	p = run-start
	stopper = name stopper
	while p < stopper
		c = p deref-char
		if !((c >= `A` && c <= `Z`) || (c >= `a` && c <= `z`) || 	--
				(c >= `0` && c <= `9`))
			# Finish off the current run.
			result += String new: run-start to: p
			p += 1
			run-start = p

			# Mangle the character.
			mangled-char = nil
			if c == `-`
				mangled-char = "_"
			else if c == `:`
				mangled-char = "_co_"
			else if c == ` `
				mangled-char = "__"
			else if c == `<`
				mangled-char = "_lt_"
			else if c == `>`
				mangled-char = "_gt_"
			else if c == `=`
				mangled-char = "_eq_"
			else if c == `+`
				mangled-char = "_pl_"
			else if c == `*`
				mangled-char = "_st_"
			else if c == `/`
				mangled-char = "_dv_"
			else if c == `%`
				mangled-char = "_pc_"
			else if c == `[`
				mangled-char = "_in_"
			else if c == `]`
				mangled-char = "_dx_"
			else if c == `!`
				mangled-char = "_nt_"
			else if c == `~`
				mangled-char = "_tw_"
			else if c == `&`
				mangled-char = "_an_"
			else if c == `|`
				mangled-char = "_or_"
			else if c == `^`
				mangled-char = "_xr_"
			else if c == `#`
				mangled-char = "_lb_"
			else if c == `_`
				mangled-char = "_ul_"
			else
				mangled-char = "_" + c int string + "_"

			result += mangled-char

		else
			p += 1

	result += String new: run-start to: p
	return result


string-literal-length: string
	# Count the characters.
	p = string start
	stopper = string stopper
	length = 0
	while p < stopper
		c = p deref-char
		p += 1

		if c == `\\`
			c = p deref-char
			if c >= `0` && c <= `3`
				# Octal: 3 characters after the `\`.
				p += 3
			else if c == `x`
				# Hex: `x` and 2 more characters after the `\`.
				p += 3
			else
				# Only the single character after the `\` is quoted.
				p += 1

		length += 1
	
	return length


report: message
	status-reporter report: message


