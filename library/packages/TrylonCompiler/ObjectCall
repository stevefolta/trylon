trylon ObjectCall
superclass Expression

fields name (String) object arguments

# Very special for prepare-to-emit handling of class and package functions.
fields package-result-function


create: name object: object arguments: arguments
	this name = name
	this object = object
	this arguments = arguments


prepare-to-emit
	object prepare-to-emit

	for arg in arguments
		arg prepare-to-emit
	
	# Handle class functions and package functions.
	function = nil
	if object is-a: FunctionCall
		function = object function
	else if object is-a: ObjectCall
		function = object package-result-function
	if function
		if (function is-a: PackageFunction) || (function is-a: ClassFunction)
			package = nil
			if function is-a: PackageFunction
				package = function package
			else
				package = function the-class
			package-result-function = package lookup-function: name


emit-code: builder
	# Emit the object.
	object-result = object emit-code: builder

	# Emit the arguments.
	arg-results = List new
	for arg in arguments
		arg-results append: (arg emit-code: builder)
	
	# Handle class functions and package functions.
	if (object-result is-a: PackageResult) || (object-result is-a: ClassResult)
		package = nil
		if object-result is-a: PackageResult
			package = object-result package
		else
			package = object-result the-class
		function = package lookup-function: name
		if function
			return function emit-call: arg-results builder: builder
	
	# Eventually do some optimization based on type.
	iff optimize-object-calls
		if object-result type
			function = object-result type lookup-instance-function: name
			if function && !function is-overridden
				iff debug-optimized-object-calls
					print-line: "*** Optimizing call to " + name + "."
				builder add-extern-declaration: "extern " + function c-signature + ";"
				return 	--
					function emit-object-call: object-result arguments: arg-results 	--
						builder: builder
				# Will default to the same code as below, unless optimizable.
	
	# Emit the call.
	builder using-object-function: name
	temporary = builder get-temporary
	line = temporary name + " = "
	line += "Call_(" + (mangle-name: name) + ", " + object-result access
	for arg-result in arg-results
		line += ", " + arg-result access
	line += ");"
	builder add-line: line
	return temporary


convert-to-setter-call: value
	if name ends-with: ":"
		name += "set-to:"
	else
		name += ":"
	arguments append: value


copy
	copied-args = List new
	for arg in arguments
		copied-args append: arg
	return ObjectCall new: name object: object arguments: copied-args




# Copyright 2005-2007 Steve Folta
# See the License file.

