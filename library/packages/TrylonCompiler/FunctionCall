trylon FunctionCall
superclass Expression

fields name arguments context
fields function 	# Only valid after prepare-to-emit.


create: name arguments: arguments context: context
	this name = name
	this arguments = arguments
	this context = context


prepare-to-emit
	function = context lookup-function-autodeclaring: name

	for arg in arguments
		arg prepare-to-emit


emit-code: builder
	# We already got the function in prepare-to-emit.
	if function == nil
		throw MessageException new: "There is no \"" + name + "\" function."
	
	# Generate the arguments.
	arg-results = List new
	for arg in arguments
		result = arg emit-code: builder
		arg-results append: result
	
	return function emit-call: arg-results builder: builder


convert-to-setter-call: value
	if name ends-with: ":"
		name += "set-to:"
	else
		name += ":"
	arguments append: value


copy
	copied-args = List new
	for arg in arguments
		copied-args append: arg
	return FunctionCall new: name arguments: copied-args context: context


### What was this for?  It conflicts with the field.
### Looks like a hacky fix, since it took a few fixes to the compiler to make
### it work without it.
iff not-anymore
	fn function
		return context lookup-function: name



