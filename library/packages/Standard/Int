trylon-class Int

class-fn new
	return Implementation allocate-object: Int with-extra-slots: 1

primitive-fn == arg [Int] -> Bool
primitive-fn != arg [Int] -> Bool
primitive-fn < arg [Int] -> Bool
primitive-fn > arg [Int] -> Bool
primitive-fn <= arg [Int] -> Bool
primitive-fn >= arg [Int] -> Bool

primitive-fn + arg [Int] -> Int
primitive-fn - arg [Int] -> Int
primitive-fn * arg [Int] -> Int
primitive-fn / arg [Int] -> Int
primitive-fn % arg [Int] -> Int
primitive-fn unary-minus -> Int

primitive-fn | arg [Int] -> Int
primitive-fn & arg [Int] -> Int
primitive-fn ^ arg [Int] -> Int
primitive-fn ~ -> Int
primitive-fn << arg [Int] -> Int
primitive-fn >> arg [Int] -> Int

primitive-fn string -> String
primitive-fn float -> Float
primitive-fn char -> Char


iff debugger
	fn debug-write
		print-line: "Int: " + this string


# Copyright 2005-2007 Steve Folta
# See the License file.

