trylon-class List

field head
field tail


fn create
	head = nil
	tail = nil

fn append: object
	cell := Cell new: object
	if tail != nil
		tail next = cell
	tail = cell
	if head == nil
		head = cell

fn prepend: object
	cell := Cell new: object
	cell next = head
	head = cell

fn iterator -> Standard Iterator
	return Iterator new: head


class Cell
	fields object next
	fn create: object
		this object = object
		next = nil


class Iterator
	superclass Standard Iterator
	field cell
	fn create: cell
		this cell = cell
	fn is-done -> Bool
		return cell != nil
	fn current-item
		return cell object
	fn go-forward
		cell = cell next
