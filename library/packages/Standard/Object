trylon-class Object

primitive-fn class -> Class
primitive-fn object-ptr -> BytePtr
primitive-fn is-a: class -> Bool

fn string -> String
	return "a " + class name

fn same-as: object [Object] -> Bool
	return this object-ptr == object object-ptr

fn == other -> Bool
	return this same-as: other

fn != other -> Bool
	return !(this == other)

fn iterator -> Iterator
	# Default: use a SingleObjectIterator.  Collections will 
	# override this.
	return SingleObjectIterator new: this

primitive-fn message-not-understood


# Pseudo-declarations

fn must-be-a: class
	if this class != class
		throw MessageException new: 	--
			"Something is supposed to be a " + class name + ", but isn't."


# Debugging

iff debugger
	fn debug-write: level
		indent := debug-spaces substr: 0 length: level
		print-line: indent + class name
		num-fields := class num-fields
		which-field := 0
		indent := debug-spaces substr: 0 length: level + 1
		while which-field < num-fields
			field := object-ptr object-at: (which-field + 1)
			if field == nil
				print-line: indent + "nil"
			else
				field debug-write: level + 1
			which-field += 1
	
	class-fn debug-spaces
		return "                    "

