trylon-class Char

class-fn new
	return Implementation allocate-object: Char with-extra-slots: 1

primitive-fn == arg [Char] -> Bool
primitive-fn != arg [Char] -> Bool
primitive-fn < arg [Char] -> Bool
primitive-fn > arg [Char] -> Bool
primitive-fn <= arg [Char] -> Bool
primitive-fn >= arg [Char] -> Bool

primitive-fn + arg [Char] -> Char
primitive-fn - arg [Char] -> Char
primitive-fn & arg (Char) -> Char
primitive-fn | arg (Char) -> Char

primitive-fn string -> String
primitive-fn int -> Int

is-whitespace
	return this == ` ` || this == `\t` || this == `\n` || this == `\r`

is-digit
	return this >= `0` && this <= `9`


iff debugger
	fn debug-write
		print-line: debug-string
	
	fn debug-string
		return "`" + this string + "`"



# Copyright 2005-2007 Steve Folta
# See the License file.

