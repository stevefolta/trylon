trylon-class Tuple

field num-items

class-fn new: num-items
	tuple (Tuple) := --
		Implementation allocate-object: Tuple with-extra-slots: num-items
	tuple num-items = num-items
	return tuple

fn at: index
	if index < 0 || index >= num-items
		throw MessageException new: "Bad tuple index."
	return this object-ptr object-at: index + 2

fn at: index set-to: value
	if index < 0 || index >= num-items
		throw MessageException new: "Bad tuple index."
	this object-ptr object-at: index + 2 set-to: value

fn at: index put: value
	at: index set-to: value

fn count
	return num-items

fn iterator
	return Iterator new: this

fn string
	result := "("
	have-item := false
	for item in this
		if have-item
			result += ", "
		else
			have-item = true
		result += item string
	result += ")"
	return result

class Iterator
	superclass Standard Iterator
	field tuple
	field index
	fn create: tuple
		this tuple = tuple
		index = 0
	fn is-done -> Bool
		return index >= tuple num-items
	fn current-item -> Object
		return tuple at: index
	fn go-forward
		index += 1



# Copyright 2005-2007 Steve Folta
# See the License file.

