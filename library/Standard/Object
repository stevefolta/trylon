trylid Object

raw-new
	# Use Pepsi's "Object new".
	# We want this, once super calls are implemented:
	# return super new
	coke
		(let ((vtable nil) (size nil))
			(set vtable (send (quote _vtable) self))
			(set size (send (quote _sizeof) self))
			(return (send (quote _alloc:) vtable size)))

object-ptr
	coke
		(byte-ptr self)

is-a: proto
	cur-proto = .proto
	while cur-proto
		# Test carefully!  Use same-as: rt ==, and order matters.
		if proto same-as: cur-proto
			return true
		cur-proto = cur-proto .parent-proto
	return false

string
	return this .proto-name

same-as: object
	coke
		(== self object)

fn == other
	return this same-as: other

fn != other
	return !(this == other)

iterator
	# Default: use a SingleObjectIterator.  Collections will 
	# override this.
	return SingleObjectIterator new: this

.proto-name
	return String new_: this _debugName



# Debugging

iff debugger
	fn debug-write
		print-line: .proto-name
		num-fields := 0 	#...
		which-field := 0
		while which-field < num-fields
			field := object-ptr object-at: (which-field + 1)
			if field == nil
				print-line: "  nil"
			else
				print-line: "  (" + field object-ptr string + ") " + field debug-string
			which-field += 1
	
	fn debug-string
		return this string



# Copyright 2007 Steve Folta.  See the License file.

