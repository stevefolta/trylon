trylid Object

primitive-fn object-ptr -> BytePtr

is-a: proto -> Bool
	cur-proto = .proto
	while cur-proto
		if cur-proto == proto
			return true
		cur-proto = cur-proto .parent-context

string
	return "a " + this .proto-name

same-as: object
	return object != nil && this object-ptr == object object-ptr

fn == other
	return this same-as: other

fn != other -> Bool
	return !(this == other)

iterator -> Iterator
	# Default: use a SingleObjectIterator.  Collections will 
	# override this.
	return SingleObjectIterator new: this



# Debugging

iff debugger
	fn debug-write
		print-line: name
		num-fields := class num-fields
		which-field := 0
		while which-field < num-fields
			field := object-ptr object-at: (which-field + 1)
			if field == nil
				print-line: "  nil"
			else
				print-line: "  (" + field object-ptr string + ") " + field debug-string
			which-field += 1
	
	fn debug-string
		return this string

