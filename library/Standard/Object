trylon Object

# Primitive functions.

raw-new
object-ptr
same-as: object
.proto-name
.object-size


is-a: proto
	cur-proto = .proto
	while cur-proto
		# Test carefully!  Use same-as: rt ==, and order matters.
		if proto same-as: cur-proto
			return true
		cur-proto = cur-proto .parent-proto
	return false

string
	return this .proto-name

fn == other
	return this same-as: other

fn != other
	return !(this == other)

iterator
	# Default: use a SingleObjectIterator.  Collections will 
	# override this.
	return SingleObjectIterator new: this



# Debugging

debug-write
	print-line: .proto-name
	num-fields = .object-size / 4
	which-field = 0
	iff targeting-c
		# Skip the classref.
		which-field = 1
	while which-field < num-fields
		field = object-ptr object-at: which-field
		if field == nil
			print-line: "  nil"
		else
			print-line: "  (" + field object-ptr string + ") " + field debug-string
		which-field += 1

debug-string
	return this string



# Copyright 2007 Steve Folta.  See the License file.

