trylon Object

# Primitive functions.

raw-new
object-ptr
same-as: object
.proto-name
.object-size


is-a: proto
	cur-proto = .proto
	while cur-proto
		# Test carefully!  Use same-as: rt ==, and order matters.
		if proto same-as: cur-proto
			return true
		cur-proto = cur-proto .parent-proto
	return false

string
	return this .proto-name

fn == other
	return this same-as: other

fn != other
	return !(this == other)

iterator
	# Default: use a SingleObjectIterator.  Collections will 
	# override this.
	return SingleObjectIterator new: this



# Debugging

debug-write
	print-line: .proto-name
	num-fields = .object-size / 4
	ptr = this object-ptr
	field-names = nil
	max-field-name-length = 0
	iff targeting-c
		# Skip the classref.
		ptr += 4
		num-fields -= 1
		# Gather the field names.
		iff debugger
			field-names = Tuple new: num-fields
			.gather-field-names-into: field-names
			for field-name in field-names
				length = field-name length
				if length > max-field-name-length
					max-field-name-length = length
	which-field = 0
	while which-field < num-fields
		# Field name.
		iff targeting-c
			iff debugger
				if field-names
					print: "  "
					field-name = field-names at: which-field
					padding = max-field-name-length - field-name length
					print: ("                    " substr: 0 length: padding)
					print: field-name
					print: ":"
		# Value.
		field = ptr object-at: which-field
		if field == nil
			print-line: "  nil"
		else
			print-line: "  (" + field object-ptr string + ") " + field debug-string
		which-field += 1

debug-string
	return this string



# Copyright 2007 Steve Folta.  See the License file.

