trylon Class


c-preamble
	#define classInfo ((struct ClassInfo*) this_)

c-fn num-slots
	return BuildInt_(classInfo->numSlots);
c-fn class-num
	return BuildInt_(classInfo->classNum);

c-fn proto
	return classInfo->proto;
c-fn parent-context
	return classInfo->parentContext;
c-fn superclass
	return classInfo->superclass;
c-fn used-contexts
	return classInfo->usedContexts;
c-fn name
	return classInfo->name;
c-fn added-fields
	return classInfo->addedFields;
c-fn subprotos
	return classInfo->subprotos;


iff support-new-methods
	c-fn new-methods
		return classInfo->newMethods;
	c-fn new-methods: dict
		return classInfo->newMethods = dict;

	install-method: name machine-code: code
		selector = name intern

		# If it's in the dispatch table, patch that.
		table-entry-ptr = dispatch-table-entry-for: selector
		if table-entry-ptr
			table-entry-ptr deref-ptr = code
			return

		# Otherwise, add it to the "new-methods" dictionary.
		if new-methods == nil
			new-methods = Dictionary new
		new-methods[selector] = code
	

	c-fn dispatch-table-entry-for: selector
		fn_ptr_* entry_ptr = MethodLocation_(classInfo->proto, selector);
		if (entry_ptr == nil)
			return nil;
		return BuildBytePtr_(entry_ptr);


