trylon Int

extend Standard Int
	c-preamble
		#include <stdio.h>
		#define Val	(IntValue_(this_))

	c-fn new
		return CloneObjExtra_(Proto_(Standard__Int), 1);
	

	c-fn + other
		return BuildInt_(Val + IntValue_(other));

	c-fn - other
		return BuildInt_(Val - IntValue_(other));

	c-fn * other
		return BuildInt_(Val * IntValue_(other));

	c-fn / other
		return BuildInt_(Val / IntValue_(other));

	c-fn % other
		return BuildInt_(Val % IntValue_(other));

	c-fn unary-minus
		return BuildInt_(-Val);
	

	c-fn == other
		return Bool_(Val == IntValue_(other));

	c-fn != other
		return Bool_(Val == IntValue_(other));

	c-fn < other
		return Bool_(Val < IntValue_(other));

	c-fn <= other
		return Bool_(Val <= IntValue_(other));

	c-fn > other
		return Bool_(Val > IntValue_(other));

	c-fn >= other
		return Bool_(Val >= IntValue_(other));


	c-fn | other
		return BuildInt_(Val | IntValue_(other));

	c-fn & other
		return BuildInt_(Val & IntValue_(other));

	c-fn ^ other
		return BuildInt_(Val ^ IntValue_(other));
	
	c-fn ~
		return BuildInt_(~Val);
	
	c-fn << other
		return BuildInt_(Val << IntValue_(other));

	c-fn >> other
		return BuildInt_(Val >> IntValue_(other));


	c-fn string
		char* buf = AllocNonPtr_(64);
		sprintf(buf, "%d", Val);
		return BuildString_(buf);
	
	c-fn float
		return BuildFloat_(Val);


