trylon Object

extend Standard Object
	c-preamble
		#include <stdio.h>
		#include <stdlib.h>

	c-fn raw-new
		return CloneObj_(this_);
	
	c-fn object-ptr
		return BuildBytePtr_((byte_ptr_) this_);
	
	c-fn same-as: other
		return Bool_(this_ == other);
	
	c-fn .proto
		return this_->class_->proto;
	
	c-fn .superclass
		return this_->class_->superclass;
	
	c-fn .proto-name
		return this_->class_->name;

	c-fn .object-size
		return BuildInt_(sizeof(classref_) + this_->class_->size);
	
	c-fn .added-fields
		return this_->class_->addedFields;

	c-fn message-not-understood
		fprintf(stderr, "Message not understood.\n");
		exit(1);

	
	iff support-perform
		c-fn responds-to: selector
			struct Standard__Symbol__internal* symbol =
				(struct Standard__Symbol__internal*) selector;
			return RespondsTo_(this_, symbol->selector);

		c-fn perform: selector
			struct Standard__Symbol__internal* symbol =
				(struct Standard__Symbol__internal*) selector;
			return (*Dispatch_(symbol->selector, this_))(this_);
	
		c-fn perform: selector with: arg-1
			struct Standard__Symbol__internal* symbol =
				(struct Standard__Symbol__internal*) selector;
			return (*Dispatch_(symbol->selector, this_))(this_, arg_1);
	
		c-fn perform: selector with: arg-1 with: arg-2
			struct Standard__Symbol__internal* symbol =
				(struct Standard__Symbol__internal*) selector;
			return (*Dispatch_(symbol->selector, this_))(this_, arg_1, arg_2);
	
		c-fn perform: selector with: arg-1 with: arg-2 with: arg-3
			struct Standard__Symbol__internal* symbol =
				(struct Standard__Symbol__internal*) selector;
			return (*Dispatch_(symbol->selector, this_))(this_, arg_1, arg_2, arg_3);
	
		c-fn perform: selector with: arg-1 with: arg-2 with: arg-3 with: arg-4
			struct Standard__Symbol__internal* symbol =
				(struct Standard__Symbol__internal*) selector;
			return
				(*Dispatch_(symbol->selector, this_))(this_, arg_1, arg_2, arg_3, arg_4);
	

	iff debugger
		.gather-field-names-into: tuple
			index = 0
			if .superclass
				index = .superclass .gather-field-names-into: tuple
			for field-name in .added-fields
				tuple at: index put: field-name
				index += 1
			return index


