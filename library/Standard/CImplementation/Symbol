trylon Symbol

extend Standard Symbol
	iff support-perform
		field ._selector

		c-fn create: start to: stopper
			extern obj_ create_co_to_co___String__Standard(obj_, obj_, obj_);
			create_co_to_co___String__Standard(this_, start, stopper);
			Field_(_dt__ul_selector) = (obj_) -1;

	# Dynamic lookup.

	built-in-table = nil
	dynamic-table = nil

	intern: name
		# First check the symbols that were present in the source.
		if built-in-table == nil
			built-in-table = CImplementation Symbol BuiltInSymbols new
		result = built-in-table at: name
		if result
			return result

		# Next see if it's already in the dynamic symbol table.
		if dynamic-table == nil
			dynamic-table = Dictionary new
		result = dynamic-table at: name
		if result
			return result

		# Need to add it.
		result = Symbol new: name start to: name stopper
		dynamic-table at: name put: result
		return result
	
	intern
		# Intern this Symbol.  It's a Symbol, therefore already interned.
		return this


class BuiltInSymbols
	c-preamble
		extern struct Standard__Symbol__internal* firstSymbol_;
		extern struct Standard__Symbol__internal* lastSymbol_;

	create

	c-fn at: name
		UsingMethod_(string) UsingMethod_(_eq__eq_) UsingMethod_(_lt_)
		struct Standard__Symbol__internal* start = firstSymbol_;
		struct Standard__Symbol__internal* end = lastSymbol_ + 1;
		struct Standard__Symbol__internal* symbol;

		name = Call_(string, name); 	/* In case we get a symbol. */
		while (start < end) {
			int index = (end - start) / 2;
			struct Standard__Symbol__internal* symbol = &start[index];
			if (Call_(_eq__eq_, name, symbol))
				return (obj_) symbol;
			else if (Call_(_lt_, name, symbol))
				end = symbol;
			else
				start = symbol + 1;
			}
		return nil;

	


