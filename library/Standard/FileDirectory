trylid FileDirectory
superclass FileDirectoryEntry

field path


create: path
	this path = path


count
	coke
		(define directory (opendir [[self path] _stringValue]))
		(define num-entries 0)
		(while true
			(if (not (readdir directory)) (break))
			(set num-entries (+ num-entries 1)))
		(closedir directory)
		(trylid-int num-entries)


iterator
	# Currently returns the names, not the entries themselves.  This may be 
	# changed in the future, so use "names" instead.
	return Iterator new: path


names
	return Iterator new: path


contains: name
	iff !Darwin
		return (Posix Stat stat: (path + "/" + name)) != nil
	iff Darwin
		# The stupid Mac OSX filesystem is case-insensitive, so simply doing a
		# stat() won't tell us if a file with that (case-sensitive) name really
		# exists.  stat() doesn't give us the filename, so we need to look through
		# the whole directory.
		coke
			(define directory (opendir [[self path] _stringValue]))
			(if (not directory) (return false))
			(define name-str [name _stringValue])
			(define found false)
			(define Dirent (trylid-proto Standard Dirent))
			(while true
				(define entry (readdir directory))
				(if (not entry) (break))
				(if (== (strcmp name-str [[Dirent new_: entry] _name]) 0)
					(begin
						(set found true)
						(break))))
			found


entry-is-directory: name
	stat-buf = Posix Stat stat: path + "/" + name
	if stat-buf
		return stat-buf isDir
	return false


create-subdirectory: name
	entry-path = path + "/" + name
	coke
		(mkdir [entry-path _stringValue] 511)


at: name
	entry-path = ""
	if path == "/"
		entry-path = path + name
	else
		entry-path = path + "/" + name
	if entry-is-directory: name
		return FileDirectory new: entry-path
	else
		return File new: entry-path


proto Iterator
	superclass Standard Iterator
	fields directory-handle current-name

	primitive-fn create: path
	primitive-fn is-done
	primitive-fn current-item
	primitive-fn go-forward

	iterator
		return this

