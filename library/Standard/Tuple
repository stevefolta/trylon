trylid Tuple

field num-items

new: num-items
	tuple (Tuple) := --
		Implementation allocate-object: Tuple with-extra-slots: num-items
	tuple num-items = num-items
	return tuple

at: index
	if index < 0 || index >= num-items
		throw MessageException new: "Bad tuple index."
	iff targeting-jolt
		return this object-ptr object-at: index + 1
	iff targeting-c
		return this object-ptr object-at: index + 2

at: index put: value
	if index < 0 || index >= num-items
		throw MessageException new: "Bad tuple index."
	iff targeting-jolt
		this object-ptr object-at: index + 1 put: value
	iff targeting-c
		this object-ptr object-at: index + 2 put: value

at: index set-to: value
	at: index put: value

count
	return num-items

iterator
	return Iterator new: this

first
	return this at: 0
second
	return this at: 1
third
	return this at: 2

string
	result := "("
	have-item := false
	for item in this
		if have-item
			result += ", "
		else
			have-item = true
		result += item print-string
	result += ")"
	return result

proto Iterator
	superclass Standard Iterator
	fields tuple index
	create: tuple
		this tuple = tuple
		index = 0
	is-done
		return index >= tuple num-items
	current-item
		return tuple at: index
	go-forward
		index += 1



# Copyright 2007 Steve Folta.  See the License file.

