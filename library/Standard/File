trylid File
superclass FileDirectoryEntry


field path


fn create: path
	this path = path

fn contents
	size := this size
	storage := BytePtr new: size
	stream := this stream
	stream read-buffer: storage length: size
	return String new: storage to: storage + size

fn stream
	return InStream new: path
fn output-stream
	return OutStream new: path


size
	stat = Posix Stat stat: path
	if stat == nil
		return 0
	return stat st_size

exists
	stat = Posix Stat stat: path
	return stat != nil

remove
	coke
		(unlink [[self path] _stringValue])
	#...


contents-of: path
	return (new: path) contents


proto InStream
	superclass InputStream
	field _file
	
	create: path
		coke
			(let ((result (fopen [path _stringValue] "r")))
				(if (== result nil)
					(throw [(trylid-proto Standard File FileMissingException) new: path]))
				[self _file: result]
				self
				)

	close
		coke
			(let ((file [self _file]))
				(if file (fclose file))
				[self _file: nil]
				)

	read-buffer: buffer [BytePtr] length: length [Int]
		coke
			(trylid-int (fread [buffer _ptr] 1 [length _integerValue] [self _file]))
	
	destroy
		close


proto OutStream
	superclass OutputStream
	field _file
	
	create: path
		coke
			(let ((result (fopen [path _stringValue] "w+")))
				(if (== result nil)
					(throw [FileOpenException new: path]))
				[self _file: result]
				self
				)

	close
		coke
			(let ((file [self _file]))
				(if file (fclose file))
				[self _file: nil]
				)

	write-buffer: buffer [BytePtr] length: length [Int]
		coke
			(trylid-int (fwrite [buffer _ptr] 1 [length _integerValue] [self _file]))
	
	destroy
		close


proto FileMissingException
	superclass Exception
	field path
	
	create: path
		this path = path
	
	message
		return "File doesn't exist: \"" + path + "\""


proto FileOpenException
	superclass Exception
	fields path
	
	create: path
		this path = path
	
	message
		return "Couldn't open file: \"" + path + "\")"

