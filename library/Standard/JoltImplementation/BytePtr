trylid BytePtr

extend Standard BytePtr
	new
		# Written in Coke for maximum speed.
		# return Implementation allocate-object: this with-extra-slots: 1
		coke
			[[self _vtable] _alloc: 4]

	new_: _value
		coke
			(let ((byte-ptr [self new]))
				(set (long@ byte-ptr) _value)
				byte-ptr)

	fn == arg
		coke
			(if (== (int@ self) (int@ arg)) true false)
	fn != arg
		coke
			(if (!= (int@ self) (int@ arg)) true false)
	fn < arg
		coke
			(if (< (int@ self) (int@ arg)) true false)
	fn > arg
		coke
			(if (> (int@ self) (int@ arg)) true false)
	fn <= arg
		coke
			(if (<= (int@ self) (int@ arg)) true false)
	fn >= arg
		coke
			(if (>= (int@ self) (int@ arg)) true false)

	fn + arg
		coke
			(byte-ptr (+ (int@ self) [arg _integerValue]))
	fn - arg
		coke
			(if [arg is-a: StandardBytePtr]
				(trylid-int (- (int@ self) (int@ arg)))
				(byte-ptr (- (int@ self) [arg _integerValue])))

	fn deref-ptr
		coke
			(byte-ptr (int@ (int@ self)))
	fn deref-int
		coke
			(trylid-int (int@ (int@ self)))
	fn deref-char
		coke
			(trylid-char (char@ (int@ self)))
	fn ptr-at: index
		coke
			(byte-ptr (int@ (int@ self) [index _integerValue]))
	fn object-at: index
		coke
			(int@ (int@ self) [index _integerValue])
	fn char-at: index
		coke
			(trylid-char (char@ (int@ self) [index _integerValue]))
	fn int-at: index
		coke
			(trylid-int (int@ (int@ self) [index _integerValue]))
	fn byte-at: index
		coke
			(trylid-int (char@ (+ (int@ self) [index _integerValue])))

	fn as-object
		coke
			(int@ (int@ self))

	fn ptr-at: index put: value
		coke
			(set-int@ (int@ self) [index _integerValue] [value _integerValue])
	fn object-at: index put: value
		coke
			(set-int@ (int@ self) [index _integerValue] value)
	fn char-at: index put: value
		coke
			(set-char@ (+ (int@ self) [index _integerValue]) [value _integerValue])
	fn int-at: index put: value
		coke
			(set-int@ (int@ self) [index _integerValue] [value _integerValue])
	fn byte-at: index put: value
		coke
			(set-char@ (+ (int@ self) [index _integerValue]) [value _integerValue])

	fn copy-from: source length: length
		coke
			(memcpy (int@ self) (int@ source) [length _integerValue])

	_ptr
		coke
			(int@ self)


	fn string
		coke
			(let ((buf (malloc 64)))
				(sprintf buf "0x%08X" (int@ self))
				(trylid-string buf))



# Copyright 2007 Steve Folta.  See the License file.


