trylid Char

# No longer used.  Characters are represented as SmallIntegers now.


new
	# Written in Coke for maximum speed.
	# return Implementation allocate-object: this with-extra-slots: 1
	coke
		[StandardImplementation allocate-object: self with-extra-slots: (quote 1)]

fn == arg (Char) -> Bool
	coke
		(if (== (int@ self) [arg _integerValue]) true false)
fn != arg (Char) -> Bool
	coke
		(if (!= (int@ self) [arg _integerValue]) true false)
fn < arg (Char) -> Bool
	coke
		(if (< (int@ self) [arg _integerValue]) true false)
fn > arg (Char) -> Bool
	coke
		(if (> (int@ self) [arg _integerValue]) true false)
fn <= arg (Char) -> Bool
	coke
		(if (<= (int@ self) [arg _integerValue]) true false)
fn >= arg (Char) -> Bool
	coke
		(if (>= (int@ self) [arg _integerValue]) true false)

fn + arg (Char) -> Char
	coke
		(trylid-char (+ (int@ self) [arg _integerValue]))
fn - arg (Char) -> Char
	coke
		(trylid-char (- (int@ self) [arg _integerValue]))
fn & arg (Char) -> Char
	coke
		(trylid-char (& (int@ self) [arg _integerValue]))
fn | arg (Char) -> Char
	coke
		(trylid-char (| (int@ self) [arg _integerValue]))

fn string
	coke
		(let ((buf (malloc 8)))
			(set-char@ buf (int@ self))
			(set-char@ (+ buf 1) 0)
			(trylid-string buf))
fn int
	coke
		(trylid-int (int@ self))
fn _integerValue
	coke
		(int@ self)

is-whitespace
	return this == ` ` || this == `\t` || this == `\n` || this == `\r`

is-digit
	return this >= `0` && this <= `9`


iff debugger
	fn debug-write
		print-line: debug-string
	
	fn debug-string
		return "`" + this string + "`"



# Copyright 2007 Steve Folta.  See the License file.

