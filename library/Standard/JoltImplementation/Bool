trylid Bool

# Not used.  Instead, we Pepsi Object for true and nil for false, just like
# Pepsi.


new
	return Implementation allocate-object: Bool with-extra-slots: 1

fn == arg (Bool) -> Bool
	coke
		(if (== (int@ _self) (int@ arg)) true false)
fn != arg (Bool) -> Bool
	coke
		(if (!= (int@ _self) (int@ arg)) true false)

fn | arg (Bool) -> Bool
	coke
		(if (or (int@ _self) (int@ arg)) true false)
fn & arg (Bool) -> Bool
	coke
		(if (and (int@ _self) (int@ arg)) true false)
fn ^ arg (Bool) -> Bool
	return this != arg

fn int
	coke
		(return (int@ _self))

fn string
	if this
		return "true"
	else
		return "false"


iff debugger
	fn debug-write
		print-line: debug-string


# Copyright 2007 Steve Folta.  See the License file.

