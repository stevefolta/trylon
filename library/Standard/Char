trylid Char

new
	return Implementation allocate-object: Char with-extra-slots: 1

fn == arg (Char) -> Bool
	coke
		(if (== (int@ self_) (int@ arg)) true false)
fn != arg (Char) -> Bool
	coke
		(if (!= (int@ self_) (int@ arg)) true false)
fn < arg (Char) -> Bool
	coke
		(if (< (int@ self_) (int@ arg)) true false)
fn > arg (Char) -> Bool
	coke
		(if (> (int@ self_) (int@ arg)) true false)
fn <= arg (Char) -> Bool
	coke
		(if (<= (int@ self_) (int@ arg)) true false)
fn >= arg (Char) -> Bool
	coke
		(if (>= (int@ self_) (int@ arg)) true false)

fn + arg (Char) -> Char
	coke
		(char-obj (+ (int@ self_) (int@ arg)))
fn - arg (Char) -> Char
	coke
		(char-obj (- (int@ self_) (int@ arg)))
fn & arg (Char) -> Char
	coke
		(char-obj (& (int@ self_) (int@ arg)))
fn | arg (Char) -> Char
	coke
		(char-obj (| (int@ self_) (int@ arg)))

fn string
	coke
		(let ((buf (malloc 8)))
			(set-char@ buf (int@ self_))
			(set-char@ buf 1 0)
			(string-obj buf))
fn int
	coke
		(int-obj (int@ self_))


iff debugger
	fn debug-write
		print-line: debug-string
	
	fn debug-string
		return "`" + this string + "`"

