trylid BytePtr

new
	return Implementation allocate-object: BytePtr with-extra-slots: 1

new: size
	return Implementation allocate-bytes: size

new-non-pointer: size
	return Implementation allocate-bytes-non-pointer: size

fn == arg (BytePtr) -> Bool
	coke
		(if (== (int@ self_) (int@ arg)) true false)
fn != arg (BytePtr) -> Bool
	coke
		(if (!= (int@ self_) (int@ arg)) true false)
fn < arg (BytePtr) -> Bool
	coke
		(if (< (int@ self_) (int@ arg)) true false)
fn > arg (BytePtr) -> Bool
	coke
		(if (> (int@ self_) (int@ arg)) true false)
fn <= arg (BytePtr) -> Bool
	coke
		(if (<= (int@ self_) (int@ arg)) true false)
fn >= arg (BytePtr) -> Bool
	coke
		(if (>= (int@ self_) (int@ arg)) true false)

fn + arg (BytePtr) -> BytePtr
	coke
		(byte-ptr-obj (+ (int@ self_) (int@ arg)))
fn - arg (BytePtr) -> BytePtr
	coke
		(byte-ptr-obj (- (int@ self_) (int@ arg)))

fn deref-ptr -> BytePtr
	coke
		(byte-ptr-obj (int@ self_))
fn deref-int -> Int
	coke
		(int-obj (int@ self_))
fn deref-char -> Char
	coke
		(char-obj (int@ self_))
fn ptr-at: index (Int) -> BytePtr
	coke
		(byte-ptr-obj (int@ self_ (int@ index)))
fn object-at: index (Int) -> Object
	coke
		(int@ self_ (int@ index))
fn char-at: index (Int) -> Char
	coke
		(char-obj (int@ self_ (int@ index)))
fn int-at: index (Int) -> Int
	coke
		(int-obj (int@ self_ (int@ index)))
fn byte-at: index (Int) -> Int
	coke
		(int-obj (char@ (+ self_ (int@ index))))

fn as-object -> Object
	coke
		(int@ self_)

fn ptr-at: index (Int) set-to: value (BytePtr)
	coke
		(set-int@ (int@ self_) (int@ index) (int@ value))
fn object-at: index (Int) set-to: value (Object)
	coke
		(set-int@ (int@ self_) (int@ index) value)
fn char-at: index (Int) set-to: value (Char)
	coke
		(set-char@ (int@ self_) (int@ index) (int@ value))
fn int-at: index (Int) set-to: value (Int)
	coke
		(set-int@ (int@ self_) (int@ index) (int@ value))
fn byte-at: index (Int) set-to: value (Int)
	coke
		(set-char@ (int@ self_) (int@ index) (int@ value))

fn copy-from: source (BytePtr) length: length (Int)
	coke
		(memcpy (int@ self_) (int@ source) (int@ length))

fn string
	coke
		(let ((buf (malloc 64)))
			(sprintf buf "0x%08X" (int@ self_))
			(string-obj buf))


iff debugger
	fn debug-write
		print-line: "BytePtr: " + this string

