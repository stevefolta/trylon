trylid BytePtr

new
	# Written in Coke for maximum speed.
	# return Implementation allocate-object: this with-extra-slots: 1
	coke
		[StandardImplementation allocate-object: self with-extra-slots: (quote 1)]

new: size
	return Implementation allocate-bytes: size

new-non-pointer: size
	return Implementation allocate-bytes-non-ptr: size

new_: _value
	coke
		(let ((byte-ptr [self new]))
			(set (long@ byte-ptr) _value)
			byte-ptr)

fn == arg (BytePtr) -> Bool
	coke
		(if (== (int@ self) (int@ arg)) true false)
fn != arg (BytePtr) -> Bool
	coke
		(if (!= (int@ self) (int@ arg)) true false)
fn < arg (BytePtr) -> Bool
	coke
		(if (< (int@ self) (int@ arg)) true false)
fn > arg (BytePtr) -> Bool
	coke
		(if (> (int@ self) (int@ arg)) true false)
fn <= arg (BytePtr) -> Bool
	coke
		(if (<= (int@ self) (int@ arg)) true false)
fn >= arg (BytePtr) -> Bool
	coke
		(if (>= (int@ self) (int@ arg)) true false)

fn + arg (BytePtr) -> BytePtr
	coke
		(byte-ptr (+ (int@ self) [arg _integerValue]))
fn - arg
	coke
		(if [arg is-a: StandardBytePtr]
			(trylid-int (- (int@ self) (int@ arg)))
			(byte-ptr (- (int@ self) [arg _integerValue])))

fn deref-ptr -> BytePtr
	coke
		(byte-ptr (int@ (int@ self)))
fn deref-int -> Int
	coke
		(trylid-int (int@ (int@ self)))
fn deref-char -> Char
	coke
		(trylid-char (char@ (int@ self)))
fn ptr-at: index (Int) -> BytePtr
	coke
		(byte-ptr (int@ (int@ self) [index _integerValue]))
fn object-at: index (Int) -> Object
	coke
		(printf "BytePtr object-at: %d.\n" index)
		(int@ (int@ self) [index _integerValue])
fn char-at: index (Int) -> Char
	coke
		(trylid-char (char@ (int@ self) [index _integerValue]))
fn int-at: index (Int) -> Int
	coke
		(trylid-int (int@ (int@ self) [index _integerValue]))
fn byte-at: index (Int) -> Int
	coke
		(trylid-int (char@ (+ (int@ self) [index _integerValue])))

fn as-object -> Object
	coke
		(int@ (int@ self))

fn ptr-at: index (Int) put: value (BytePtr)
	coke
		(set-int@ (int@ self) [index _integerValue] [value _integerValue])
fn object-at: index (Int) put: value (Object)
	coke
		(set-int@ (int@ self) [index _integerValue] value)
fn char-at: index (Int) put: value (Char)
	coke
		(set-char@ (+ (int@ self) [index _integerValue]) [value _integerValue])
fn int-at: index (Int) put: value (Int)
	coke
		(set-int@ (int@ self) [index _integerValue] [value _integerValue])
fn byte-at: index (Int) put: value (Int)
	coke
		(set-char@ (+ (int@ self) [index _integerValue]) [value _integerValue])

fn copy-from: source (BytePtr) length: length (Int)
	coke
		(memcpy (int@ self) (int@ source) (int@ length))

_ptr
	coke
		(int@ self)


fn string
	coke
		(let ((buf (malloc 64)))
			(sprintf buf "0x%08X" (int@ self))
			(trylid-string buf))


iff debugger
	fn debug-write
		print-line: "BytePtr: " + this string



# Copyright 2007 Steve Folta.  See the License file.

