trylon Interpreter

interpret: code
	compiler = this

	# Get the Main context to interpret it in.
	main-context = nil
	iff !targeting-jolt
		main-context = Main
	iff targeting-jolt
		main-context = Trylon
	context = Compiler ExistingClass new: main-context
	lines = (Trylon LinesLexer new: code) lex

	# Interpret.
	parser = Compiler MethodParser new: lines in: context
	parse-tree = parser parse
	parse-tree resolve
	result = parse-tree interpreted

	compiler = nil
	return result


# As a type of compiler.

calling-selector: selector
	# Nothing to do.

build-settings
	if .build-settings == nil
		.build-settings = Compiler BuildSettings new
	return .build-settings
field .build-settings


# Helper.

interpret-send-of: name to: object with: arguments
	name = name intern
	num-args = arguments num-items
	obj = object interpreted
	args = Tuple new: num-args
	index = 0
	for arg in arguments
		args at: index put: arg interpreted
		index += 1
	result = nil
	switch num-args
		0
			result = obj perform: name
		1
			result = obj perform: name with: (args at: 0)
		2
			result = obj perform: name with: (args at: 0) with: (args at: 1)
		3
			result = 	--
				obj 	--
					perform: name --
					with: (args at: 0) with: (args at: 1) with: (args at: 2)
		4
			result = 	--
				obj 	--
					perform: name --
					with: (args at: 0) with: (args at: 1) 	--
					with: (args at: 2) with: (args at: 3)
		5
			result = 	--
				obj 	--
					perform: name --
					with: args[0] with: args[1] with: args[2] with: args[3] with: args[4]
		6
			result = 	--
				obj 	--
					perform: name --
					with: args[0] with: args[1] with: args[2] with: args[3] 	--
					with: args[4] with: args[5]
		7
			result = 	--
				obj 	--
					perform: name --
					with: args[0] with: args[1] with: args[2] with: args[3] 	--
					with: args[4] with: args[5] with: args[6]
		8
			result = 	--
				obj 	--
					perform: name --
					with: args[0] with: args[1] with: args[2] with: args[3] 	--
					with: args[4] with: args[5] with: args[6] with: args[7]
		9
			result = 	--
				obj 	--
					perform: name --
					with: args[0] with: args[1] with: args[2] with: args[3] 	--
					with: args[4] with: args[5] with: args[6] with: args[7] 	--
					with: args[8]
		10
			result = 	--
				obj 	--
					perform: name --
					with: args[0] with: args[1] with: args[2] with: args[3] 	--
					with: args[4] with: args[5] with: args[6] with: args[7] 	--
					with: args[8] with: args[9]
		else
			error: "Interpreter can't handle that many arguments ('" + name + "')."
	return result



references
	Expressions
	Functions
	Statements

