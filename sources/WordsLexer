trylon WordsLexer


create: string
	p = string start
	stopper = string stopper

next
	if cached-word
		result = cached-word
		cached-word = nil
		return result
	else
		return parse-next-word

current
	if cached-word == nil
		cached-word = parse-next-word
	return cached-word

peek
	current


# ===== As a Trylon Iterator

current-item
	return current

is-done
	return (current == nil)

go-forward
	next


# ===== Private

field cached-word
fields p stopper

parse-next-word
	# Skip initial whitespace.
	c = nil
	loop
		if p >= stopper
			return nil
		c = p deref-char
		if !c is-whitespace
			break
		p += 1
	
	word-start = p

	# Is it a paren/bracket/brace?
	if c == `(` || c == `)` || c == `[` || c == `]` || c == `{` || c == `}`
		p += 1
		return String from: word-start to: p
	
	# A string/symbol?
	else if c == `"` || c == `'`
		delimiter = c
		builder = nil
		loop
			p += 1
			if p >= stopper
				throw MessageException new: "Unterminated quote."
			c = p deref-char
			if c == delimiter
				p += 1
				if builder
					builder add-from: word-start to: p
					return builder string
				else
					return String from: word-start to: p
			else if c == `\\`
				if builder == nil
					builder = SmallStringBuilder from: word-start to: p
				else
					builder add-from: word-start to: p
				p += 1
				escaped-char = nil
				switch p deref-char
					`a`
						escaped-char = `\a`
					`e`
						escaped-char = `\e`
					`f`
						escaped-char = `\f`
					`n`
						escaped-char = `\n`
					`r`
						escaped-char = `\r`
					`t`
						escaped-char = `\t`
					`v`
						escaped-char = `\v`
					`0` `1` `2`
						value = p deref-char - `0`
						p += 1
						if p < stopper && p deref-char is-digit
							value <<= 3
							value += digit - `0`
							p += 1
							if p < stopper && p deref-char is-digit
								value <<= 3
								value += digit - `0`
								p += 1
						escaped-char = value-char
					`x` `X`
						p += 1
						if p >= stopper
							throw MessageException: "Unterminated quote."
						value = 0
						num-digits = 0
						while num-digits < 2
							c = p deref-char
							if c is-digit
								value <<= 4
								value += c - `0`
								num-digits += 1
							else if c >= `a` && c <= `f`
								value <<= 4
								value += c - `a` + 0x0A
								num-digits += 1
							else if c >= `A` && c <= `F`
								value <<= 4
								value += c - `A` + 0x0A
								num-digits += 1
							else
								break
						escaped-char = value char
					else
						escaped-char = p deref-char
				if escaped-char
					builder add-char: escaped-char

	# Gather the word.
	loop
		p += 1
		if p >= stopper
			return String from: word-start to: stopper
		c = p deref-char
		if c is-whitespace || 	--
		   c == `(` || c == `)` || c == `[` || c == `]` || c == `{` || c == `}`
			break
	return String from: word-start to: p




