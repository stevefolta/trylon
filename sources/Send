trylon Send
superclass TrylidExpression

fields name object arguments

# Very special for prepare-to-emit handling of class and package functions.
fields package-result-function


create: name object: object arguments: arguments
	this name = name
	this object = object
	this arguments = arguments


prepare-to-emit
	object prepare-to-emit

	for arg in arguments
		arg prepare-to-emit
	
	# Handle class functions and package functions.
	# ***  What am I doing here?
	function = nil
	if object is-a: FunctionCall
		function = object function
	else if object is-a: Send
		function = object proto-result-function
	if function
		if function is-a: ProtoFunction
			proto = function the-proto
			proto-result-function = proto lookup-function: name


jolt-expression
	# Emit the object.
	object-result = object emit-code

	# Emit the arguments.
	arg-results = List new
	for arg in arguments
		arg-results append: (arg emit-code)
	
	# Handle class functions and package functions.
	if object-result is-a: ProtoResult
		proto = object-result the-proto
		function = proto lookup-function: name
		if function
			return function emit-call: arg-results
	
	# Emit the call.
	expr = Expression new: arg-results count + 3
	expr at: 0 put: 'send'
	expr at: 1 put: name intern
	expr at: 2 put: object-result access
	index = 3
	for arg-result in arg-results
		expr at: index put: arg-result access
		index += 1
	return expr


convert-to-setter-call: value
	if name ends-with: ":"
		name += "set-to:"
	else
		name += ":"
	arguments append: value


copy
	copied-args = List new
	for arg in arguments
		copied-args append: arg
	return Send new: name object: object arguments: copied-args



