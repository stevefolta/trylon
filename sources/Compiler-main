trylon Compiler

fields successful build-settings
fields proto-queue main-proto
fields status-reporter


class-fn compile: compile-symbols
	start-ms = nil
	iff time-compilation
		start-ms = System milliseconds
	the-compiler = Compiler new
	the-compiler compile-program: compile-symbols
	iff time-compilation
		elapsed-time = System milliseconds - start-ms
		print-line: "Compilation took " + elapsed-time string + "ms."
	return the-compiler return-value


create
	this successful = true
	this build-settings = BuildSettings new
	proto-queue = List new


return-value
	if !successful
		return 1
	return 0



# Top-level compilation.

compile-program: compile-symbols
	# Read the settings.
	build-settings load
	for setting in compile-symbols
		if setting == "verbose"
			build-settings is-verbose = true

	# Create the status reporter.
	if status-reporter == nil
		if build-settings is-verbose
			status-reporter = StdoutStatusReporter new
		else
			status-reporter = VT100StatusReporter new

	# Create the .jolt-sources directory.
	directory = FileDirectory new: "."
	if !(directory entry-is-directory: build-settings jolt-sources-dir)
		directory create-subdirectory: build-settings jolt-sources-dir
	
	# Load.
	main-directory = FileDirectory new: "."
	if main-directory entry-is-directory: "sources"
		main-directory = main-directory at: "sources"
	library-path = find-library-path
	if library-path == nil
		throw MessageException new: 	--
			"Couldn't find the Trylid library.  You may need to set $TRYLID_LIBRARY."
	library-directory = FileDirectory new: library-path
	status-reporter report: "Loading Trylid..."
	status-reporter indent
	main-proto = CompiledProto new: "Trylid" parent: nil
	main-proto 	--
		setup-main: main-directory library-directory: library-directory
	proto-queue append: main-proto
	status-reporter unindent

	# Get ready to emit (mainly this makes sure all used classes are loaded).
	status-reporter report: "Preparing to emit..."
	status-reporter indent
	for proto in proto-queue
		proto prepare-to-emit
	status-reporter unindent

	# Set up Standard Object.
	object-class = root-proto: main-proto
	object-class is-root-object = true

	# Emit the classes and packages.
	### Emission is broken at the moment when running under Coke.
	status-reporter report: "Emitting code..."
	status-reporter indent
	for proto in proto-queue
		is-changed = proto emit-code
	status-reporter unindent

	# Emit load.k.
	status-reporter report: "Emitting load.k..."
	status-reporter indent
	path = the-compiler build-settings jolt-sources-dir + "/load.k"
	file = File new: path
	stream = ExistingFileStream new: file
	for proto in proto-queue
		stream write-all: "(load-trylid-proto " + proto full-name + ")"
		stream write-line
	stream close
	status-reporter unindent

	status-reporter report: "Done."


root-proto: main-proto
	# Find "Standard Object".
	standard-package = main-proto get-subproto: "Standard"
	if standard-package == nil
		throw MessageException new: "Standard package is missing!"
	object-function = standard-package lookup-function: "Object"
	if object-function == nil
		throw MessageException new: "Standard Object is missing!"
	if !(object-function is-a: ProtoFunction)
		throw MessageException new: "Standard Object is not a prototype!"
	return object-function proto


report-run-program: program arguments: args
	if build-settings is-verbose
		status-reporter indent

		command = StringBuilder new
		command += program
		command += " "
		for arg in args
			command += arg
			command += " "
		status-reporter report: command string

		status-reporter unindent


get-standard-class: name
	return (main-proto get-subproto: "Standard") get-proto: name


find-library-path
	library-path = System environment-variable-named: "TRYLID_LIBRARY"
	if library-path && !library-path is-empty
		return library-path
	for prefix-path in ("/usr/lib", "/usr/local/lib", "/opt/lib")
		prefix-dir = FileDirectory new: prefix-path
		if prefix-dir entry-is-directory: "trylon"
			return prefix-path + "/trylon"
	return nil



# Copyright 2007 Steve Folta.  See the License file.

