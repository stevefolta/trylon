trylon ExistingClassBuilder

fields existing-class shared-fields

# List of NewSharedFields, to keep them from getting GC'd.
new-shared-fields = nil


build: existing-class
	builder = ExistingClassBuilder new: existing-class
	builder build

create: existing-class
	init
	this existing-class = existing-class
	shared-fields = Dictionary new

init
	if new-shared-fields
		return
	new-shared-fields = List new

build
	for function in existing-class newly-defined-functions
		machine-code = function value build: this
		if machine-code
			symbol = function key intern
			existing-class proto .class 	--
				install-method: symbol machine-code: machine-code
	# Clear new-functions, just in case the existing-class gets used again.
	existing-class new-functions clear


build-compiled-function: function
	return X86Compiler compile: function

build-new-function: function
	# ...

build-proto-function: function
	# ...

build-field-getter: function
	# ...

build-field-setter: function
	# ...

build-shared-field-getter: function
	shared-field = new-shared-field-for: function field
	return MethodBuilder build-location-getter: shared-field value-ptr

build-shared-field-setter: function
	shared-field = new-shared-field-for: function field
	return MethodBuilder build-location-setter: shared-field value-ptr

new-shared-field-for: field
	name = field name
	shared-field = shared-fields[name]
	if shared-field == nil
		shared-field = NewSharedField new: name
		if field initial-value
			shared-field value = field initial-value interpreted
		shared-fields[name] = shared-field
		new-shared-fields append: shared-field
	return shared-field

build-primitive-function: function
	# ...

