trylon ClassBuilder

fields class-context shared-fields

# List of NewSharedFields, to keep them from getting GC'd.
new-shared-fields = nil


build: class-context
	return (builder-for: class-context) build

live-proto-for: class-context
	return (builder-for: class-context) live-proto

builder-for: class-context
	builder = nil
	if class-context is-a: Compiler ExistingProto
		builder = ExistingClassBuilder new: class-context
	else if class-context is-a: Compiler CompiledProto
		builder = CompiledClassBuilder new: class-context
	else
		error: "Internal error: unknown type of ClassContext."
	return builder


create: class-context
	init
	this class-context = class-context
	shared-fields = Dictionary new

init
	if new-shared-fields
		return
	new-shared-fields = List new

build
	virtual

live-proto
	virtual


build-functions-into: object
	for function in class-context newly-defined-functions
		machine-code = function value build: this
		if machine-code
			symbol = function key intern
			object .class install-method: symbol machine-code: machine-code


build-compiled-function: function
	return X86Compiler compile: function

build-new-function: function
	return MethodBuilder build-new-function: function


build-proto-function: function
	# Build the subproto first.
	subproto = ClassBuilder build: function proto

	# Make a method that returns it.
	return MethodBuilder build-object-returner: subproto


build-field-getter: function
	# ...

build-field-setter: function
	# ...

build-shared-field-getter: function
	shared-field = new-shared-field-for: function field
	return MethodBuilder build-location-getter: shared-field value-ptr

build-shared-field-setter: function
	shared-field = new-shared-field-for: function field
	return MethodBuilder build-location-setter: shared-field value-ptr

new-shared-field-for: field
	name = field name
	shared-field = shared-fields[name]
	if shared-field == nil
		shared-field = NewSharedField new: name
		if field initial-value
			shared-field value = field initial-value interpreted
		shared-fields[name] = shared-field
		new-shared-fields append: shared-field
	return shared-field

build-primitive-function: function
	# ...


