trylon MethodBuilder

fields refs out-ptr buffer-limit buffers
fields dispatch-fn

buffer-size = 512
buffer-slop-space = 32	# Enough space for the longest instruction.


create
	refs = List new
	buffers = List new
	grow

	dispatch-fn = dispatch-fn-addr


# Low-level emission.

# Code will be emitted into buffers, kept in a list.  At the end, the final
# code block is allocated (with the exact size) and the buffers are copied into
# it.  Only then are label-refs patched.

emit: opcode
	out-ptr put-byte: opcode
	out-ptr += 1
	offset += 1 	# Separate from out-ptr.
	if out-ptr >= buffer-limit
		grow

class Buffer
	fields ptr used-size
	
	create
		ptr = BytePtr new: buffer-size

grow
	# Finish the current buffer.
	buffer = buffers last-item
	if buffer
		buffer used-size = out-ptr - buffer ptr

	# Start a new buffer.
	buffer = Buffer new
	buffers append: buffer
	out-ptr = buffer ptr
	buffer-limit = out-ptr + buffer-size - buffer-slop-space


class Label
	fields offset

	define: offset
		this offset = offset

class LabelRef
	fields label offset

emit-label-ref: label
	ref = LabelRef new
	ref label = label
	ref offset = offset
	refs append: ref


stash: result
	# If the result is already safely on the stack, simply return it.  If not,
	# stash it in a temporary.
	# ...
	return result


class Loop
	fields continue-label break-label

start-loop-continue: continue-label break: break-label
	loop = Loop new
	loop continue-label = continue-label
	loop break-label = break-label
	loop-stack push: loop

end-loop
	loop-stack pop


push-args: args
	reversed-args = List new
	for arg in args
		reversed-args push-back: arg
	for arg in reversed-args
		result = arg compile: this
		emit-push: result


emit-send-of: symbol to: object-result with: args
	object-result = stash: object-result
	push-args: args
	emit-push: object-result
	emit-push: object-result
	emit-push-int: symbol selector
	dispatch-result = emit-call: dispatch-fn
	emit-pop-args: 2
	emit-indirect-call: dispatch-result
	emit-pop-args: args num-items + 1
	return CallResult


c-fn dispatch-fn-addr
	return BuildBytePtr_(&Dispatch_);


# Statement compilation.

compile-block: block
	# TODO: Handle locals.
	for stmt in block statments
		stmt compile: this

compile-block-statement: stmt
	return compile-block: stmt block


compile-comment: stmt
	# Nothing to do.

compile-blank-line: stmt
	# Nothing to do.


compile-if: stmt
	stmt condition compile: this
	emit: jne
	end = Label new
	emit-label-ref: end
	stmt body compile: this
	if stmt else-block
		# End the body by jumping past the else-branch
		final-end = Label new
		emit: jmp
		emit-label-ref: final-end

		# "end" currently means the end of the "if" branch; the conditional needs
		# to jump there.
		end define

		# Repurpose "end", so "final-end" is defined correctly.
		end = final-end
	end define: offset


compile-loop: stmt
	start = Label new
	start define: offset
	end = Label new
	start-loop-continue: start break: end
	stmt body compile: this
	emit: jmp
	emit-label-ref start
	end define: offset
	end-loop


compile-while: stmt
	start = Label new
	start define: offset
	end = Label new
	condition-result = stmt condition compile: this
	emit-test: condition-result
		# Could do nothing if the condition registers are already set.
	emit: je
	emit-label-ref: end
	start-loop-continue: start break: end
	stmt body compile: this
	emit: jmp
	emit-label-ref: start
	end define: offset
	end-loop


compile-for: stmt
	# Emit the creation of the iterator.
	# ...

	# Start the loop.
	again = Label new
	end = Label new
	start-loop-continue: again break: end

	# The test.
	test = Label new
	test define: offset
	done-result = emit-send-of: 'is-done' to: iterator-result with: empty
	emit-test: done-result
	emit: jne
	emit-label-ref: end

	# The body.
	value-result = emit-send-of: 'current-item' to: iterator-result with: empty
	emit-move-to: local from: value-result
	stmt body compile: this

	# Go around again.
	again define: offset
	emit-send-of: 'go-forward' to: iterator-result with: empty
	emit: jmp
	emit-label-ref: test

	# End the loop.
	end define: offset
	end-loop


compile-return: stmt
	# ...


compile-try: stmt
	# ...


compile-throw: stmt
	# ...


compile-switch: stmt
	# ...


# Expression compilation.

compile-send: send
	object-result = send object compile: this
	return emit-send-of: send name intern to: object-result with: send arguments


compile-super-call: super-call
	# ...


compile-function-call: call
	# ...


compile-literal: value
	literals append: value
	return LiteralResult new: value

compile-int-literal: literal
	return compile-literal: literal value

compile-char-literal: literal
	return compile-literal: literal value

compile-bool-literal: literal
	# ...

compile-float-literal: literal
	return compile-literal: literal value

compile-string-literal: literal
	return compile-literal: literal value

compile-symbol-literal: literal
	return compile-literal: literal name intern

compile-literal-nil: literal
	# ...

compile-dict-literal: literal
	# ...


compile-tuple-expression: expr
	# ...


compile-short-circuit-and: expr
	# ...

compile-short-circuit-or: expr
	# ...

compile-short-circuit-not: expr
	# ...

compile-nil-test: expr
	# ...



# Copyright 2009 Steve Folta.  See the License file.

