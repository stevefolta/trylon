trylon Statements

extend Compiler Statement
	jolt-expression
		virtual

	translate: compiler
		# Default: use jolt-expression.
		return jolt-expression translate: compiler


## Basics.

extend Compiler ExpressionStatement
	jolt-expression
		if comment
			comment-expression = Expression with: 'comment' with: comment
			return 	--
				Expression 	--
					with: 'begin' with: expression jolt-expression with: comment-expression
		else
			return expression jolt-expression

	translate: compiler
		return expression translate: compiler


extend Compiler BlockStatement
	prepare-to-emit
		block prepare-to-emit

	jolt-expression
		return block jolt-expression


extend Compiler Block
	jolt-expression
		expr = nil
		num-statements = statements count
		if num-statements == 1
			expr = statements first-item jolt-expression
		else if num-statements == 0
			return Expression with: 'begin' with: 'nil'
		else
			expr = Expression new: statements count + 1
			expr at: 0 put: 'begin'
			index = 1
			for statement in statements
				expr at: index put: statement jolt-expression
				index += 1
		if locals
			locals-expr = Expression new: locals count
			index = 0
			for local in locals values
				locals-expr at: index put: local name intern
				index += 1
			expr = Expression with: 'trylon-block' with: locals-expr with: expr
		return expr

	translate: compiler
		expr = nil
		num-statements = statements count
		if num-statements == 0
			return 'nil' translate: compiler
		else if num-statements == 1
			expr = statements first-item
		else
			expr = Expression new: statements count + 1
			expr at: 0 put: 'begin'
			index = 1
			for statement in statements
				expr at: index put: statement
				index += 1
		if locals
			locals-expr = Expression new: locals count
			index = 0
			for local in locals values
				locals-expr at: index put: local name intern
				index += 1
			expr = Expression with: 'trylon-block' with: locals-expr with: expr
		return expr translate: compiler


extend Compiler BlankLine
	jolt-expression
		return Expression with: 'blank-line'


extend Compiler Comment
	jolt-expression
		return Expression with: 'comment' with: text


extend Compiler EmptyStatement
	jolt-expression
		return 'nil'


## Simple flow-of-control.

extend Compiler IfStatement
	jolt-expression
		else-expression = nil
		if else-block
			size = 2
			if pre-else-comments
				size += pre-else-comments count
			if else-comment
				size += 1
			if size == 2
				# No comments.
				else-expression = else-block jolt-expression
			else
				else-expression = Expression new: size
				else-expression at: 0 put: 'begin'
				index = 1
				if pre-else-comments
					for statement in pre-else-comments
						else-expression at: index put: statement jolt-expression
						index += 1
				if else-comment
					else-expression at: index put: 	--
						(Expression with: 'comment' with: else-comment)
					index += 1
				else-expression at: index put: else-block jolt-expression
		else
			else-expression = 'nil'

		return 	--
			Expression 	--
				with: 'if' 	--
				with: condition jolt-expression 	--
				with: body jolt-expression 	--
				with: else-expression

	translate: compiler
		else-expr = else-block
		if else-block == nil
			else-expr = 'nil'
		expr = 	--
			Expression with: 'if' with: condition with: body with: else-expr
		return compiler translateExpression: expr


extend Compiler ReturnStatement
	jolt-expression
		# Coke's (return) form is broken, just fake it for now so we can flush out
		# other bugs.
		expression = Expression with: 'fixed-return' with: value jolt-expression
		if comment
			comment-expression = Expression with: 'comment' with: comment
			expression = 	--
				Expression with: 'begin' with: expression with: comment-expression
		return expression

	translate: compiler
		expr = Expression with: 'fixed-return' with: value
		return compiler translateExpression: expr


## Loops.

extend Compiler LoopStatement
	jolt-expression
		expression-size = 3
		if comment
			expression-size += 1
		expression = Expression new: expression-size
		expression at: 0 put: 'while'
		expression at: 1 put: 'true'
		expression at: 2 put: body jolt-expression
		if comment
			expression at: 3 put: (Expression with: 'comment' with: comment)
		return expression

	translate: compiler
		expr = Expression with: 'while' with: 'true' with: body
		return compiler translateExpression: expr


extend Compiler WhileStatement
	jolt-expression
		expression-size = 3
		if comment
			expression-size += 1
		expression = Expression new: expression-size
		expression at: 0 put: 'while'
		expression at: 1 put: condition jolt-expression
		index = 2
		if comment
			expression at: index put: comment jolt-expression
			index += 1
		expression at: index put: body jolt-expression
		return expression

	translate: compiler
		expr = Expression with: 'while' with: condition with: body
		return compiler translateExpression: expr


extend Compiler ForStatement
	jolt-expression
		return 	--
			Expression 	--
				with: 'trylon-for' with: local name intern 	--
				with: collection jolt-expression 	--
				with: body jolt-expression

	translate: compiler
		expr = 	--
			Expression 	--
				with: 'trylon-for' with: local name intern with: collection with: body
		return compiler translateExpression: expr


extend Compiler ContinueStatement
	jolt-expression
		return Expression with: 'fixed-continue'


extend Compiler BreakStatement
	jolt-expression
		return Expression with: 'fixed-break'


## Try/Throw.

extend Compiler TryStatement
	jolt-expression
		else-expr = nil
		if else-clause
			else-expr = else-clause jolt-expression
		else
			else-expr = 'nil'
		return Expression with: 'catch' with: body jolt-expression with: else-expr

	translate: compiler
		else-expr = nil
		if else-clause
			else-expr = else-clause
		else
			else-expr = 'nil'
		expr = Expression with: 'catch' with: body with: else-expr
		return compiler translateExpression: expr


extend Compiler CatchClause
	jolt-expression
		return body jolt-expression


extend Compiler ThrowStatement
	jolt-expression
		return Expression with: 'throw' with: value jolt-expression

	translate: compiler
		expr = Expression with: 'throw' with: value
		return compiler translateExpression: expr


## Switch.

extend Compiler SwitchStatement
	jolt-expression
		expr-size = clauses count + 3
		expr = Expression new: expr-size
		expr at: 0 put: 'switch'
		expr at: 1 put: expression jolt-expression
		index = 2
		for clause in clauses
			expr at: index put: clause jolt-expression
			index += 1
		if else-clause
			expr at: index put: else-clause jolt-expression
		else
			expr at: index put: 'nil'
		return expr

	translate: compiler
		expr-size = clauses count + 3
		expr = Expression new: expr-size
		expr at: 0 put: 'switch'
		expr at: 1 put: expression
		index = 2
		for clause in clauses
			expr at: index put: clause translate-jolt-expression
			index += 1
		if else-clause
			expr at: index put: else-clause translate-jolt-expression
		else
			expr at: index put: 'nil'
		return expr


extend Compiler SwitchClause
	jolt-expression
		if values
			values-list = Expression new: values count
			index = 0
			for value in values
				values-list at: index put: value jolt-expression
				index += 1
			return Expression with: values-list with: body jolt-expression
		else
			# It's the "else" clause.
			return body jolt-expression

	translate-jolt-expression
		if values
			values-list = Expression new: values count
			index = 0
			for value in values
				values-list at: index put: value
				index += 1
			return Expression with: values-list with: body
		else
			# It's the "else" clause.
			return body



# Copyright 2007 Steve Folta
# See the License file.

