trylon Expressions

extend Compiler TrylonExpression
	jolt-expression
		virtual


##### Sends and calls.

extend Compiler Send
	jolt-expression
		expr = Expression new: arguments count + 3
		expr at: 0 put: 'send'
		expr at: 1 put: (Expression with: 'quote' with: name intern)
		expr at: 2 put: object jolt-expression
		index = 3
		for arg in arguments
			expr at: index put: arg jolt-expression
			index += 1
		return expr

	translate: compiler
		expr = Expression new: arguments count + 3
		expr at: 0 put: 'send'
		expr at: 1 put: (Expression with: 'quote' with: name intern)
		expr at: 2 put: object
		index = 3
		for arg in arguments
			expr at: index put: arg
			index += 1
		return compiler translateExpression: expr


extend Compiler SuperCall
	jolt-expression
		expr = Expression new: arguments count + 3
		expr at: 0 put: 'super-send'
		expr at: 1 put: name intern
		expr at: 2 put: 'self'
		index = 3
		for arg in arguments
			expr at: index put: arg jolt-expression
			index += 1
		return expr

	translate: compiler
		expr = Expression new: arguments count + 3
		expr at: 0 put: 'super-send'
		expr at: 1 put: name intern
		expr at: 2 put: (compiler translateSymbol: 'self')
		index = 3
		for arg in arguments
			expr at: index put: arg
			index += 1
		return compiler translateExpression: expr


extend Compiler FunctionCall
	jolt-expression
		# We already got the function in prepare-to-emit.
		if function == nil
			throw MessageException new: "There is no \"" + name + "\" function."
		
		return function emit-call: arguments

	translate: compiler
		# Are we using a prepare-to-emit phase?  Work either way.
		if function == nil
			function = context lookup-function-autodeclaring: name
			if function == nil
				throw MessageException new: "There is no \"" + name + "\" function."
		
		return function translate-call: arguments compiler: compiler



##### Literals.

extend Compiler IntLiteral
	jolt-expression
		return Expression with: 'trylid-int-literal' with: value

	translate: compiler
		return compiler translateExpression: (Expression with: 'quote' with: value)


extend Compiler CharacterLiteral
	jolt-expression
		return Expression with: 'trylid-char-literal' with: char int

	translate: compiler
		return compiler translateExpression: (Expression with: 'quote' with: char)


extend Compiler FloatLiteral
	jolt-expression
		return Expression with: 'quote' with: value

	translate: compiler
		return compiler translateExpression: jolt-expression


extend Compiler BoolLiteral
	jolt-expression
		if value
			return 'true'
		else
			return 'false'

	translate: compiler
		return compiler translateSymbol: jolt-expression


extend Compiler LiteralNil
	jolt-expression
		return 'nil'

	translate: compiler
		return compiler translateExpression: (Expression with: 'quote' with: nil)


extend Compiler StringLiteral
	jolt-expression
		return Expression with: 'trylid-string-literal' with: value

	translate: compiler
		return compiler translateExpression: (Expression with: 'quote' with: value)


extend Compiler SymbolLiteral
	jolt-expression
		return Expression with: 'quote' with: name intern

	translate: compiler
		return compiler translateExpression: jolt-expression


##### Compound objects.

extend Compiler TupleExpression
	jolt-expression
		expr = Expression new: members count + 1
		expr at: 0 put: 'trylid-tuple'
		index = 1
		for member in members
			expr at: index put: member jolt-expression
			index += 1
		return expr

	translate: compiler
		expr = Expression new: members count + 1
		expr at: 0 put: 'trylid-tuple'
		index = 1
		for member in members
			expr at: index put: member
			index += 1
		return compiler translateExpression: expr


extend Compiler DictLiteral
	jolt-expression
		return 	--
			Expression 	--
				with: 'trylid-dict' with: (emit-node: dict root) with: dict num-items

	emit-node: node
		if node == nil
			return 'nil'
		return 	--
			Expression 	--
				with: 'trylid-dict-node' 	--
				with: node key 	--
				with: node value jolt-expression 	--
				with: (emit-node: node left) 	--
				with: (emit-node: node right)

	translate: compiler
		expr = 	--
			Expression 	--
				with: 'trylid-dict' 	--
				with: (translate-node: dict root) 	--
				with: dict num-items
		return compiler translateExpression: expr

	translate-node: node
		if node == nil
			return 'nil'
		return 	--
			Expression 	--
				with: 'trylid-dict-node' 	--
				with: node key 	--
				with: node value 	--
				with: (emit-node: node left) 	--
				with: (emit-node: node right)



##### Short-circuits.

extend Compiler ShortCircuitAnd
	jolt-expression
		return 	--
			Expression 	--
				with: 'and' 	--
				with: (expr1 jolt-expression) 	--
				with: (expr2 jolt-expression)

	translate: compiler
		expr = Expression with: 'and' with: expr1 with: expr2
		return compiler translateExpression: expr


extend Compiler ShortCircuitOr
	jolt-expression
		return 	--
			Expression 	--
				with: 'or' 	--
				with: (expr1 jolt-expression) 	--
				with: (expr2 jolt-expression)

	translate: compiler
		expr = Expression with: 'or' with: expr1 with: expr2
		return compiler translateExpression: expr


extend Compiler ShortCircuitNot
	jolt-expression
		return Expression with: 'not' with: expr jolt-expression

	translate: compiler
		expr = Expression with: 'not' with: expr
		return compiler translateExpression: expr


extend Compiler NilTest
	jolt-expression
		message = 'isNil'
		if !is-nil
			message = 'notNil'
		expr = Expression new: 3
		expr at: 0 put: 'send'
		expr at: 1 put: (Expression with: 'quote' with: message)
		expr at: 2 put: object jolt-expression
		return expr

	translate: compiler
		message = 'isNil'
		if !is-nil
			message = 'notNil'
		expr = Expression new: 3
		expr at: 0 put: 'send'
		expr at: 1 put: (Expression with: 'quote' with: message)
		expr at: 2 put: object
		return compiler translateExpression: expr



##### Other.

extend Compiler LambdaExpression
	jolt-expression
		return block jolt-expression

	translate: compiler
		return block translate: compiler



# Copyright 2007 Steve Folta
# See the License file.

