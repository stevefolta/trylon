trylon PosixProto
superclass Compiler CompiledProto


create: name parent: parent directory: directory
	super create: name parent: parent
	this add-directory: directory

	# Add the subprotos now; this is sort of a workaround for not having the
	# Posix proto handle doesNotUnderstand:.
	for file-name in directory names
		if file-name ends-with: ".so"
			proto-name = file-name substr: 0 length: file-name length - 3
			proto-function = PosixProtoFunction new: proto-name
			functions at: proto-name put: proto-function



class PosixProtoFunction
	superclass Compiler TrylonFunction
	fields name

	create: name
		this name = name
	
	emit-code
		body = 	--
			Expression 	--
				with: 'load-trylid-posix-proto' 	--
				with: (Expression with: 'quote' with: name intern)
		expr = Expression new: 4
		expr at: 0 put: 'define-send'
		expr at: 1 put: (Expression with: 'quote' with: name intern)
		expr at: 2 put: (Expression with: 'trylid-proto' with: 'Posix')
		expr at: 3 put: body
		return expr

	iff targeting-jolt
		translate-call: arguments compiler: compiler
			return 	--
				Compiler Send 	--
					new: name 	--
					object: (Compiler ExistingProto new: Posix) 	--
					arguments: arguments



# Copyright 2007 Steve Folta.  See the License file.

