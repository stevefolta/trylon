trylid CommandLine
fields prompt post-prompt

create
	prompt = "\n\e[35m> \e[33m"
	post-prompt = "\e[0m"

	# Set up history.
	coke
		(using_history)
		(stifle_history 1000)
		(read_history ".trylid-history")
	# I tried using atexit_:, but it crashes; but only if there was a
	# ".trylid-history" already; weird.
	# 	[[Posix Stdlib] atexit_: (lambda () (write_history ".trylid-history"))]

	# Unknown messages should throw, not exit.
	coke
		(define-send (quote doesNotUnderstand:) Object selector
			(begin
				(define message [self string])
				(set message [message + (trylid-string " doesn't understand '")])
				(set message [message + [selector string]])
				(set message [message + (trylid-string "'")])
				(throw [(trylid-proto Standard MessageException) new: message])
				))


readline
	_prompt = prompt _stringValue
	coke
		(let ((result (readline _prompt)))
			(if result
				(let ((return-value [StandardString new-copy_: result]))
					(if (char@ result) (add_history result))
					(free result)
					return-value)
				nil))


run
	context = Context new: this
	loop
		line = readline
		print: post-prompt
		if line == nil
			break
		line = line trimmed
		if line is-empty
			continue
		try
			parser = Compiler Parser new: line context: context
			expr = parser parse-expression
			if expr
				result = expr _eval
				print-line: result print-string
			else
				print-line: "\e[31mUnknown compile error.\e[0m"
		else
			print-line: "\e[31m" + exception message + "\e[0m"
	print-line
	coke
		(write_history ".trylid-history")


proto Context
	# Ought to work:
	# superclass Compiler Context
	fields command-line parent

	create: command-line
		this command-line = command-line
		parent = Compiler ExistingProto new: "command-line" proto: command-line
	
	lookup-function: name
		return parent lookup-function: name

	lookup-function-autodeclaring: name
		result = lookup-function: name
		if result
			return result

		if (name index-of: `:`) == name length - 1
			# Autodeclare it as a shared field in the command-line.
			field-name = name substr: 0 length: name length - 1
			field-name-symbol = field-name intern
			coke
				(add-shared-field-to field-name-symbol [self command-line] nil)
			field = Compiler CompiledField new: field-name
			return Compiler SharedFieldSetter new: field on-proto: parent

		return nil
	
	enclosing-method-context
		return nil



##### Useful functions from the command line.

load: filename
	proto-name = filename
	slash-index = filename last-index-of: `/`
	if slash-index >= 0
		proto-name = filename substr: slash-index + 1
	Compiler compile-file: (File new: filename) as: proto-name into: this

