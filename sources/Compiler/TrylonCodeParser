trylon TrylonCodeParser

fields lines context
fields else-target
fields cur-line cur-context

special-forms = nil


create: lines in: context
	if special-forms == nil
		initialize
	this lines = lines
	this context = context
	cur-context = context


initialize
	special-forms = Dictionary new
	special-forms at: "if" put: IfParser new
	special-forms at: "else" put: ElseParser new
	special-forms at: "loop" put: LoopParser new
	special-forms at: "while" put: WhileParser new
	special-forms at: "for" put: ForParser new
	special-forms at: "continue" put: ContinueParser new
	special-forms at: "break" put: BreakParser new
	special-forms at: "return" put: ReturnParser new
	special-forms at: "switch" put: SwitchParser new
	special-forms at: "try" put: TryParser new
	special-forms at: "catch" put: CatchParser new
	special-forms at: "throw" put: ThrowParser new
	special-forms at: "#" put: CommentParser new
	special-forms at: "iff" put: IffParser new


parse
	return parse-block: lines


parse-block: lines
	block = Block new: cur-context
	old-context = cur-context
	cur-context = block
	old-else-target = else-target
	for line in lines
		cur-line = line
		statement = parse-line: line
		if statement
			if !(statement ignored-for-else)
				else-target = statement
			block append: statement
	cur-context = old-context
	else-target = old-else-target
	return block


parse-line: line
	words = line words
	if words is-done
		return BlankLine new

	# Is it a special form?
	syntax = special-forms at: words current
	if syntax
		words next
		return syntax parse: words line: line parser: this
	
	# Otherwise, it's an expression.
	# It could be an assignment with a block on the RHS, so we give the block too.
	expression = 	--
		(TrylonExpressionParser new: words line: line context: cur-context) 	--
			parse-expression
	comment = get-comment: words
	return ExpressionStatement new: expression comment: comment


attach-else: statement line: line
	if else-target == nil
		throw ParseException new: "Illegal \"else\"." in: line
	else-target attach-else: statement line: line
	else-target = nil 	# Because you can't have two elses.


get-comment: words
	if words is-empty
		return nil
	if words next == "#"
		return words remainder
	throw ParseException new: "Extra words at end of line." in: cur-line


parse-expression: words
	expression = 	--
		(TrylonExpressionParser new: words line: cur-line context: cur-context) 	--
			parse-expression
	if expression == nil
		error: "Missing expression."
	return expression

parse-optional-expression: words
	return 	--
		(TrylonExpressionParser new: words line: cur-line context: cur-context) 	--
			parse-expression


push-context: context
	cur-context = context
pop-context: context
	cur-context = context parent


error: message
	throw ParseException new: message in: cur-line



# ===== Special Forms

class IfParser
	create

	parse: words line: line parser: parser
		expression = parser parse-expression: words
		comment = parser get-comment: words
		body = parser parse-block: line block
		return IfStatement new: expression body: body comment: comment


class ElseParser
	create

	parse: words line: line parser: parser
		statement = nil
		if !(words is-empty) && words peek == "if"
			words next
			statement = (IfParser new) parse: words line: line parser: parser
		else
			comment = parser get-comment: words
			statement = parser parse-block: line block
			if comment
				# "statement" will be a Block.
				statement prepend: (Comment new: comment)
		parser attach-else: statement line: line
		parser else-target = statement 	# In case it's an "if" statement.
		return nil


class LoopParser
	create

	parse: words line: line parser: parser
		comment = parser get-comment: words
		body = parser parse-block: line block
		return LoopStatement new: body comment: comment


class WhileParser
	create

	parse: words line: line parser: parser
		condition = parser parse-expression: words
		comment = parser get-comment: words
		body = parser parse-block: line block
		return WhileStatement new: condition body: body comment: comment


class ForParser
	create

	parse: words line: line parser: parser
		# Get the name of the local.
		name = words next
		if !is-name: name
			parser error: "Bad name."
		local = CompiledField new: name

		# "in".
		in-token = words next
		if in-token != "in"
			parser error: "Missing \"in\"."

		# Collection, comment.
		collection = parser parse-expression: words
		comment = parser get-comment: words

		# Body.
		context = ForContext new: local parent: parser cur-context
		parser push-context: context
		body = parser parse-block: line block
		parser pop-context: context

		return 	--
			ForStatement new: local collection: collection body: body comment: comment


class BreakParser
	create

	parse: words line: line parser: parser
		return BreakStatement new: (parser get-comment: words)


class ContinueParser
	create

	parse: words line: line parser: parser
		return ContinueStatement new: (parser get-comment: words)


class ReturnParser
	create

	parse: words line: line parser: parser
		value = parser parse-optional-expression: words
		comment = parser get-comment: words
		return ReturnStatement new: value comment: comment


class SwitchParser
	create

	parse: words line: line parser: parser
		value = parser parse-expression: words
		comment = parser get-comment: words
		statement = SwitchStatement new: value value-comment: comment
		(SwitchOptionsParser new: line block in: parser cur-context) 	--
			parse-into: statement
		return statement


class TryParser
	create

	parse: words line: line parser: parser
		comment = parser get-comment: words
		body = parser parse-block: line block
		return TryStatement new: body comment: comment


class CatchParser
	# For Trylon compatibility.  CatchParser will be a special kind of
	# ElseParser that accepts extra tokens on the line.
	create

	parse: words line: line parser: parser
		# Ignore words.  In Trylon 1, these would specify the type to catch.  But
		# Trylon 2 catches all types always.
		while (!words is-empty) && (words peek != "#")
			words next
		comment = parser get-comment: words
		body = parser parse-block: line block
		parser attach-else: body line: line
		return nil


class ThrowParser
	create

	parse: words line: line parser: parser
		value = parser parse-expression: words
		comment = parser get-comment: words
		return ThrowStatement new: value comment: comment


class CommentParser
	create

	parse: words line: line parser: parser
		return Comment new: words remainder


class IffParser
	create

	parse: words line: line parser: parser
		inverted = false
		if words peek == "!"
			inverted = true
			words next
		if words is-empty
			parser error: "\"iff\" statement is missing its word."
		name = words next
		parser get-comment: words
		test-succeeded = 	--
			((parser cur-context lookup-function: name) != nil) || 	--
			(build-settings has-symbol: name)
		if inverted
			test-succeeded = !test-succeeded
		if test-succeeded
			return parser parse-block: line block
		return nil




# Copyright 2007 Steve Folta.  See the License file.

