trylon TrylonExpressionParser

fields words line context


create: words line: line context: context
	this words = words
	this line = line
	this context = context


parse-expression
	expr = parse-keyword-expression
	if expr == nil
		return nil
	
	if !(words is-done) && words peek == ","
		tuple = TupleExpression new
		tuple add-member: expr
		while !words is-done && words peek == ","
			words next
			member = parse-keyword-expression
			if member == nil
				parse-error: "Missing expression in tuple."
			tuple add-member: member
		expr = tuple
	
	return expr


parse-keyword-expression
	expr = parse-binary-expression
	if expr == nil
		return nil
	
	if !(words is-done) && (words peek ends-with: ":")
		name = ""
		args = List new
		while !(words is-done) && (words peek ends-with: ":")
			name += words next
			arg = parse-binary-expression
			if arg
				args append: arg
			else
				parse-error: "Missing argument (\"" + name + "\")."
		expr = Send new: name object: expr arguments: args
	
	return expr


parse-binary-expression
	# At the top level are the '=' expressions.

	expr = parse-logical-or-expression
	if expr == nil
		return nil
	
	expr2 = nil

	word = words peek
	if word == nil
		# Do nothing.
	else if word == "="
		words next
		if !(expr is-a: FunctionCall) && !(expr is-a: Send)
			parse-error: "Illegal assignment."
		expr2 = parse-binary-expression
		if expr2 == nil
			expression-expected-after: word
		expr convert-to-setter-call: expr2
	
	else if word == "+=" || word == "-=" || word == "*=" || 	--
	        word == "/=" || word == "%=" || 	--
	        word == ">>=" || word == "<<=" || 	--
	        word == "&=" || word == "|=" || word == "^="
		words next
		if !(expr is-a: FunctionCall) && !(expr is-a: Send)
			parse-error: "Illegal assignment."
		expr2 = parse-expression
		if expr2 == nil
			expression-expected-after: word
		arguments = List new
		arguments append: expr2
		call = 	--
			Send new: (word substr: 0 length: word length - 1) 	--
			object: expr arguments: arguments
		setter = expr copy
		setter convert-to-setter-call: call
		expr = setter
	
	return expr


parse-logical-or-expression
	expr = parse-logical-and-expression
	if expr == nil
		return nil
	
	while !(words is-done) && (words peek == "||")
		words next
		expr2 = parse-logical-and-expression
		if expr2 == nil
			expression-expected-after: "||"
		expr = ShortCircuitOr new: expr with: expr2
	
	return expr


parse-logical-and-expression
	expr = parse-inclusive-or-expression
	if expr == nil
		return nil
	
	while !(words is-done) && (words peek == '&&')
		words next
		expr2 = parse-inclusive-or-expression
		if expr2 == nil
			expression-expected-after: "&&"
		expr = ShortCircuitAnd new: expr with: expr2
	
	return expr


parse-inclusive-or-expression
	expr = parse-exclusive-or-expression
	if expr == nil
		return nil
	
	while !(words is-done) && (words peek == "|")
		words next
		expr2 = parse-exclusive-or-expression
		if expr2 == nil
			expression-expected-after: "|"
		expr = make-binop-call: "|" with: expr and: expr2
	
	return expr


parse-exclusive-or-expression
	expr = parse-and-expression
	if expr == nil
		return nil
	
	while !(words is-done) && (words peek == "^")
		words next
		expr2 = parse-and-expression
		if expr2 == nil
			expression-expected-after: "^"
		expr = make-binop-call: "^" with: expr and: expr2
	
	return expr


parse-and-expression
	expr = parse-equality-expression
	if expr == nil
		return nil
	
	while !(words is-done) && (words peek == "&")
		words next
		expr2 = parse-equality-expression
		if expr2 == nil
			expression-expected-after: "&"
		expr = make-binop-call: "&" with: expr and: expr2
	
	return expr


parse-equality-expression
	expr = parse-relational-expression
	if expr == nil
		return nil
	
	word = words peek
	while word && (word == "==" || word == "!=")
		words next
		expr2 = parse-relational-expression
		if expr2 == nil
			expression-expected-after: word
		# Special-case "== nil" and "!= nil".
		if expr2 is-a: LiteralNil
			message = "isNil"
			if word == "!="
				message = "notNil"
			expr = Send new: message object: expr arguments: List new
		else
			expr = make-binop-call: word with: expr and: expr2

		word = words peek
	
	return expr


parse-relational-expression
	expr = parse-shift-expression
	if expr == nil
		return nil
	
	word = words peek
	while word && (word == "<" || word == ">" || word == "<=" || word == ">=")
		words next
		expr2 = parse-shift-expression
		if expr2 == nil
			expression-expected-after: word
		expr = make-binop-call: word with: expr and: expr2

		word = words peek
	
	return expr


parse-shift-expression
	expr = parse-additive-expression
	if expr == nil
		return nil
	
	word = words peek
	while word && (word == "<<" || word == ">>")
		words next
		expr2 = parse-additive-expression
		if expr2 == nil
			expression-expected-after: word
		expr = make-binop-call: word with: expr and: expr2

		word = words peek
	
	return expr


parse-additive-expression
	expr = parse-multiplicative-expression
	if expr == nil
		return nil
	
	word = words peek
	while word && (word == "+" || word == "-")
		words next
		expr2 = parse-multiplicative-expression
		if expr2 == nil
			expression-expected-after: word
		expr = make-binop-call: word with: expr and: expr2
	
		word = words peek
	
	return expr


parse-multiplicative-expression
	expr = parse-unary-expression
	if expr == nil
		return nil
	
	word = words peek
	while word && (word == "*" || word == "/" || word == "%")
		words next
		expr2 = parse-unary-expression
		if expr2 == nil
			expression-expected-after: word
		expr = make-binop-call: word with: expr and: expr2

		word = words peek
	
	return expr


parse-unary-expression
	expr = nil
	if words is-done
		return nil
	word = words peek

	if word == "!"
		words next
		expr = parse-unary-expression
		if expr == nil
			expression-expected-after: '!'
		expr = ShortCircuitNot new: expr
	
	else if word == "+" || word == "-" || word == "~"
		words next
		expr = parse-unary-expression
		if expr == nil
			expression-expected-after: word
		name = nil
		if word == "+"
			name = "unary-plus"
		else if word == "-"
			name = "unary-minus"
		else
			name = "~"
		expr = Send new: name object: expr arguments: List new
	
	else
		expr = parse-postfix-expression
	
	return expr


parse-postfix-expression
	expr = parse-primary-expression
	if expr == nil
		return nil
	
	while !(words is-done) && (is-name: words peek)
		# A unary object call.
		name = words next
		expr = Send new: name object: expr arguments: List new
	
	return expr


parse-primary-expression
	if words is-done
		return nil
	word = words peek

	if word == "super"
		return parse-super-call
	
	else if word ends-with: ":"
		# Non-object function call.
		name = ""
		arguments = List new
		while !(words is-done) && (words peek ends-with: ":")
			name += words next
			arg = parse-binary-expression
			if arg == nil
				parse-error: "Missing argument (\"" + name + "\")."
			arguments append: arg
		return FunctionCall new: name arguments: arguments context: context
	
	else if is-number: word
		words next
		return IntLiteral new: word
	
	else if word starts-with: "\""
		words next
		return StringLiteral new: (word substr: 1 length: word length - 2)
	
	else if word starts-with: "\'"
		words next
		return SymbolLiteral new: (word substr: 1 length: word length - 2)

	else if word starts-with: "\`"
		words next
		character = (word substr: 1) first-character
		return CharacterLiteral new: character
	
	else if word == "("
		words next
		expr = parse-expression
		if expr == nil
			expression-expected-after: "("
		if words is-done || words next != ")"
			parse-error: "\")\" expected."
		return expr

	else if word == "nil"
		words next
		return LiteralNil new
	
	else
		# Non-object function call.
		words next
		return FunctionCall new: word arguments: List new context: context
	
	return nil


parse-super-call
	# Consume "super".
	words next

	# Make sure this is in an object method.
	method-context = context enclosing-method-context
	if method-context == nil
		parse-error: "\"super\" calls are only valid in functions."

	name = nil
	arguments = List new

	if words is-done
		parse-error: "Invalid \"super\" call."
	word = words peek
	if is-name: word
		name = word
		words next

	else if word ends-with: ":"
		# Get the arguments.
		name = ""
		while !(words is-done) && (words peek ends-with: ":")
			name += words next
			arg = parse-binary-expression
			if arg == nil
				parse-error: "Missing argument (\"" + name + "\")."
			arguments append: arg
	
	# We allow binops here.
	else if !(is-name: word)
		# *** Actually, we're allowing too many things here, but we'd have to
		# *** explicitly check every binop.
		name = words next
		arg = parse-unary-expression
		if arg == nil
			parse-error: 	--
				"Missing unary expression argument in super call (\"" + name + "\")."
		arguments append: arg
	
	else
		# Does this ever happen?
		parse-error: "Illegal super call."
	
	# Get the proto that it's on.
	on-proto = method-context parent
	if !(on-proto is-a: CompiledProto)
		parse-error: "Internal error: no proto for super call."
	
	return SuperCall new: name arguments: arguments



# ===== Helpers


make-binop-call: name with: object and: argument
	arguments = List new
	arguments append: argument
	return Send new: name object: object arguments: arguments


parse-error: message
	throw ParseException new: message in: line

expression-expected-after: after
	parse-error: "Expression expected after \"" + after + "\"."


class-fn is-name: word
	switch word
		"+", "-", "*", "/", "%", "&", "|", "^", "<<", ">>", 	--
		"==", "!=", "<", ">", "<=", ">=", 	--
		"&&", "||", 	--
		"!", "~", 	--
		"(", ")", "[", "]", "{", "}", 	--
		"#", ","
			return false
	if (word ends-with: "=") || (word ends-with: ":")
		return false
	if word starts-with: "#"
		return false
	first-char = word first-character
	if first-char == `"` || first-char == `'` || first-char == `\``
		return false
	if is-number: word
		return false
	return true


class-fn is-number: word
	first-char = word first-character
	if (first-char >= `0` && first-char <= `9`)
		return true
	if first-char == `-`
		return is-number: (word substr: 1)
	return false



# Copyright 2007 Steve Folta.  See the License file.

