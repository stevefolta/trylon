trylon CompiledClass
superclass Class

fields name parent functions fields shared-fields superclass directories
fields uses-protos subclasses
fields source-name 	# The name given in the "trylon" line.
fields is-main is-root-object has-destroy


create: name parent: parent
	this name = name
	this parent = parent
	functions = Dictionary new
	fields = List new
	shared-fields = Dictionary new
	directories = List new
	uses-protos = List new
	subclasses = List new
	is-main = false
	is-root-object = false
	has-destroy = false

	# Will be added by Jolt code:
	if build-settings targeting-jolt
		add-function: (PrimitiveFunction new: ".proto" on-proto: this)
		add-function: (PrimitiveFunction new: ".superclass" on-proto: this)


in: directory for: name parent: parent
	new-proto = nil

	if directory contains: name
		status-reporter = compiler status-reporter
		status-reporter report: "Loading " + name + " into " + parent full-name + "..."
		status-reporter indent

		new-proto = CompiledClass new: name parent: parent
		if directory entry-is-directory: name
			new-proto add-directory: directory[name]
		else
			load-class-file: directory[name] into: new-proto

		status-reporter unindent

	return new-proto


lookup-function: name
	return lookup-function: name visited-protos: ObjectMap new


lookup-function: name visited-protos: visited-protos
	# Recursion control.
	if visited-protos contains: this
		return nil
	visited-protos at: this put: this

	# Do we know it already?
	function = functions at: name
	if function
		return function
	
	# If not, see if it's in one of our directories.
	if load-subproto: name
		return functions at: name
	
	# Check the parent.
	if parent
		function = parent lookup-function: name visited-protos: visited-protos
		if function
			return function
	
	# Next, check the used protos.
	for used-proto in uses-protos
		function = 	--
			used-proto lookup-function: name visited-protos: visited-protos
		if function
			return function
	
	return nil


lookup-instance-function: name
	function = functions at: name
	if function
		return function
	
	if superclass
		return superclass lookup-instance-function: name
	
	return nil


make-subclass-of: superclass
	if this superclass
		# Already had a superclass (perhaps the default Standard Object); 
		# replace it.
		uses-protos remove: this superclass
	
	# Install the superclass.
	this superclass = superclass
	superclass subclasses append: this


add-used-namespace: namespace
	uses-protos append: namespace


add-function: function
	function-name = function name
	if function has-code
		existing-function = functions at: function-name
		if existing-function && existing-function has-code
			throw MessageException new: 	--
				"\"" + this name + " " + function-name + "\" is defined twice."

	functions at: function-name put: function
	compiler declaring-selector: function-name

	# "create" functions automatically add a corresponding "new:" function.
	if (function is-a: CompiledFunction) && 	--
	    ((function-name == "create") || 	--
			 (function-name starts-with: "create:") || 	--
	     (function-name starts-with: "create-"))
		# Add the corresponding "new" function.
		new-function = NewFunction new: function on-proto: this
		(functions at: new-function name) = new-function
		compiler declaring-selector: new-function name
	
	# "destroy" functions mean a finalizer is needed.
	if function-name == "destroy"
		has-destroy = true


add-function: name function: function
	functions at: name put: function
	compiler declaring-selector: name


add-field: field
	fields append: field
	add-function: field name 	--
		function: (FieldGetter new: field on-proto: this)
	add-function: field name + ":" 	--
		function: (FieldSetter new: field on-proto: this)


add-shared-field: field
	shared-fields at: field name put: field
	add-function: field name 	--
		function: (SharedFieldGetter new: field on-proto: this)
	add-function: field name + ":" 	--
		function: (SharedFieldSetter new: field on-proto: this)


add-proto: name directory: directory
	# If it already exists, return it.
	existing-function = functions at: name
	if existing-function
		if !(existing-function is-a: ProtoFunction)
			throw MessageException new: 	--
				"Adding \"" + name + "\" as a proto, when it's already a non-proto."
		return existing-function proto
	
	# Add the new one.
	status-reporter = compiler status-reporter
	status-reporter report: "Loading " + name + " into " + full-name + "..."
	status-reporter indent
	new-proto = CompiledClass new: name parent: this
	if directory
		new-proto add-directory: directory
	proto-function = ProtoFunction new: new-proto
	add-function: name function: proto-function
	compiler adding-class: new-proto
	status-reporter unindent
	return new-proto


add-proto: name
	return add-proto: name directory: nil


get-subproto: name
	# Has it been loaded already?
	function = functions at: name
	if function && (function is-a: ProtoFunction)
		return function proto
	
	# Look for it.
	subproto = load-subproto: name
	if subproto
		return subproto
	
	return nil


load-subproto: name
	for directory in directories
		if directory entry-is-directory: name
			return add-proto: name directory: (directory at: name)
		else if directory contains: name
			proto = add-proto: name
			load-class-file: directory[name] into: proto
			return proto

	return nil


get-proto: name
	function = functions at: name
	if function == nil
		function = lookup-function: name
	if function && (function is-a: ProtoFunction)
		return function proto
	return nil


add-directory: directory
	directories append: directory

	if directory contains: "main"
		load-class-file: directory["main"] into: this


load-class-file: file into: class
	lines = (Trylon LinesLexer new: file contents) lex
	ClassParser parse-class-contents: lines into: class


setup-main: main-directory library-directory: library-directory
	is-main = true

	# Self.
	functions at: name put: (ProtoFunction new: this)

	# Directories.
	# The library must come first, as it loads/"uses" Standard.
	# The main directory comes last, so everything is in place for its "main".
	add-directory: library-directory
	for directory in build-settings library-dirs
		add-directory: (FileDirectory new: directory)
	add-directory: main-directory

	standard-proto = get-subproto: "Standard"

	# Targeting Jolt.
	iff support-jolt
		if build-settings targeting-jolt
			standard-proto get-subproto: "JoltImplementation"

			# Set up Posix.
			posix-directory = library-directory at: "IdPosix"
			posix-proto = 	--
				JoltCompiler PosixProto 	--
					new: "Posix" parent: this directory: posix-directory
			proto-function = ProtoFunction new: posix-proto
			functions at: "Posix" put: proto-function
			compiler adding-class: posix-proto

			# Set up Standard Pepsi.
			standard-directory = library-directory at: "Standard"
			pepsi-proto = PepsiProto new: "Pepsi" parent: standard-proto
			proto-function = ProtoFunction new: pepsi-proto
			standard-proto functions at: "Pepsi" put: proto-function
			load-class-file: standard-directory["Pepsi"] into: pepsi-proto
			compiler adding-class: pepsi-proto
	
	# Targeting C.
	if compiler build-settings targeting-c
		standard-proto get-subproto: "CImplementation"

	# Add "nil", "true", and "false" to Standard.
	if !build-settings["nil-object"]
		standard-proto functions at: "nil" put: NilFunction new
	standard-proto functions at: "true" put: (BoolLiteralFunction new: true)
	standard-proto functions at: "false" put: (BoolLiteralFunction new: false)


ensure-superclasses: object-proto
	if superclass == nil && object-proto != this
		make-subclass-of: object-proto
	for function in functions values
		if function is-a: ProtoFunction
			proto = function proto
			if proto != this
				proto ensure-superclasses: object-proto


needs-finalizer
	if has-destroy
		return true
	if superclass
		return superclass needs-finalizer
	return false


resolve
	if superclass == nil
		ensure-superclasses: (compiler get-standard-class: "Object")
	
	for function in functions values
		function resolve


newly-defined-functions
	return functions pairs




# Copyright 2007 Steve Folta.  See the License file.

