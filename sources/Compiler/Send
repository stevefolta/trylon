trylon Send
superclass TrylonExpression

fields name object arguments

# Very special for resolve handling of proto functions.
fields proto-result-function


create: name object: object arguments: arguments
	this name = name
	this object = object
	this arguments = arguments

message: name to: object with: arguments
	return new: name object: object arguments: arguments


resolve
	compiler calling-selector: name
	object resolve
	for arg in arguments
		arg resolve
	
	# Handle proto functions, to ensure the proto is loaded.
	function = nil
	if object is-a: FunctionCall
		function = object function
	else if object is-a: Send
		function = object proto-result-function
	if function && (function is-a: ProtoFunction)
		proto-result-function = function proto lookup-function: name


compile: builder
	return builder compile-send: this


convert-to-setter-call: value
	if name ends-with: ":"
		name += "put:"
	else
		name += ":"
	arguments append: value


copy
	copied-args = List new
	for arg in arguments
		copied-args append: arg
	return Send new: name object: object arguments: copied-args




# Copyright 2007-2009 Steve Folta.  See the License file.

