trylon Send
superclass TrylidExpression

fields name object arguments


create: name object: object arguments: arguments
	this name = name
	this object = object
	this arguments = arguments

message: name to: object with: arguments
	return new: name object: object arguments: arguments


prepare-to-emit
	object prepare-to-emit

	for arg in arguments
		arg prepare-to-emit


jolt-expression
	expr = Expression new: arguments count + 3
	expr at: 0 put: 'send'
	expr at: 1 put: (Expression with: 'quote' with: name intern)
	expr at: 2 put: object jolt-expression
	index = 3
	for arg in arguments
		expr at: index put: arg jolt-expression
		index += 1
	return expr


translate: compiler
	expr = Expression new: arguments count + 3
	expr at: 0 put: 'send'
	expr at: 1 put: (Expression with: 'quote' with: name intern)
	expr at: 2 put: object
	index = 3
	for arg in arguments
		expr at: index put: arg
		index += 1
	return compiler translateExpression: expr


convert-to-setter-call: value
	if name ends-with: ":"
		name += "put:"
	else
		name += ":"
	arguments append: value


copy
	copied-args = List new
	for arg in arguments
		copied-args append: arg
	return Send new: name object: object arguments: copied-args




# Copyright 2007 Steve Folta.  See the License file.

