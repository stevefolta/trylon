trylon Compiler

# This is "Compiler Compiler"... if this were pure Trylon 2, we'd just put
# everything in "Compiler", but we have to also compile under Trylon 1, which
# always treats directories as packages, never as classes.
# (Note: That's no longer true.  Since removing "InternedString", the compiler
# no longer compiles under Trylon 1.  So the way is clear for the contents of
# "Compiler Compiler" to someday be hoisted into "Compiler".)

fields successful build-settings
fields proto-queue main-proto symbols ints
fields status-reporter


create
	this successful = true
	this build-settings = BuildSettings new
	proto-queue = List new
	symbols = Dictionary new
	ints = Dictionary new


return-value
	if !successful
		return 1
	return 0



# Top-level compilation.

compile-file: file as: name into: parent-proto
	status-reporter = VT100StatusReporter new
	proto = parent-proto add-proto: name
	lines = (Trylon LinesLexer new: file contents) lex
	parser = TrylonProtoParser new: lines into: proto context: parent-proto
	parser parse
	return proto

compile-dir: dir as: name into: parent-proto
	status-reporter = VT100StatusReporter new
	proto = parent-proto add-proto: name directory: dir 	# Will compile.
	return proto


compile-program: compile-symbols
	start-ms = System milliseconds

	# Read the settings.
	for setting in compile-symbols
		switch setting
			"verbose"
				build-settings is-verbose = true
			"target-c", "targeting-c"
				build-settings target = 'C'
			"target-jolt", "targeting-jolt"
				build-settings target = 'Jolt'
	build-settings load

	# Create the status reporter.
	if status-reporter == nil
		if build-settings is-verbose
			status-reporter = StdoutStatusReporter new
		else
			status-reporter = VT100StatusReporter new

	# Load.
	main-directory = FileDirectory new: "."
	if main-directory entry-is-directory: "sources"
		main-directory = main-directory at: "sources"
	library-path = find-library-path
	if library-path == nil
		throw MessageException new: 	--
			"Couldn't find the Trylon library.  You may need to set $TRYLON_LIBRARY."
	library-directory = FileDirectory new: library-path
	main-name = "Main"
	if compiler build-settings targeting-jolt
		main-name = "Trylon"
	status-reporter report: "Loading " + main-name + "..."
	status-reporter indent
	main-proto = CompiledProto new: main-name parent: nil
	main-proto 	--
		setup-main: main-directory library-directory: library-directory
	proto-queue append: main-proto
	status-reporter unindent

	# Get ready to emit (mainly this makes sure all used classes are loaded).
	status-reporter report: "Preparing to emit..."
	status-reporter indent
	for proto in proto-queue
		proto resolve
	status-reporter unindent

	# Set up Standard Object.
	object-class = root-proto: main-proto
	object-class is-root-object = true

	# Emit
	iff support-jolt
		if build-settings targeting-jolt
			JoltCompiler emit-jolt: this
	if build-settings targeting-c
		CCompiler emit-c: this

	# Report.
	iff time-compilation
		elapsed-time = System milliseconds - start-ms
		status-reporter report: "Compiled in " + elapsed-time string + "ms."
	iff !time-compilation
		status-reporter report: "Done."
	status-reporter show-warnings




# Lower-level compilation.

all-protos
	return proto-queue

declaring-selector: name
	(symbol-info-for: name) declared = true

calling-selector: name
	(symbol-info-for: name) called = true

adding-class: class
	proto-queue append: class

using-symbol: name
	(symbol-info-for: name) used-as-symbol = true

using-int: value
	if build-settings shared-ints
		ints at: value put: value

symbol-info-for: name
	name = name string
	info = symbols at: name
	if info == nil
		info = SymbolInfo new: name
		symbols at: name put: info
	return info


root-proto: main-proto
	# Find "Standard Object".
	standard-package = main-proto get-subproto: "Standard"
	if standard-package == nil
		throw MessageException new: "Standard package is missing!"
	object-function = standard-package lookup-function: "Object"
	if object-function == nil
		throw MessageException new: "Standard Object is missing!"
	if !(object-function is-a: ProtoFunction)
		throw MessageException new: "Standard Object is not a prototype!"
	return object-function proto


standard-object-proto
	return root-proto: main-proto


get-standard-class: name
	return (main-proto get-subproto: "Standard") get-proto: name


find-library-path
	# Use $TRYLON_LIBRARY if it's set.
	library-path = System environment-variable-named: "TRYLON_LIBRARY"
	if library-path && !(library-path is-empty)
		return library-path
	# Check $HOME/trylon.
	home-path = System environment-variable-named: "HOME"
	if home-path && !(home-path is-empty)
		home-dir = FileDirectory new: home-path
		if home-dir entry-is-directory: "trylon/library"
			return home-path + "/trylon/library"
	# Check ./library.
	if (FileDirectory new: ".") entry-is-directory: "library"
		return "./library"
	# Look in some common places.
	for prefix-path in ("/usr/lib", "/usr/local/lib", "/usr/share", "/opt/lib")
		prefix-dir = FileDirectory new: prefix-path
		if prefix-dir entry-is-directory: "trylon"
			return prefix-path + "/trylon"
	return nil



# Copyright 2007 Steve Folta.  See the License file.

