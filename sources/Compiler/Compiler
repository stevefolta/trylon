trylon Compiler

# This is "Compiler Compiler"... if this were pure Trylid, we'd just put
# everything in "Compiler", but we have to also compile under Trylon, which
# always treats directories as packages, never as classes.

fields successful build-settings
fields proto-queue main-proto
fields status-reporter


create
	this successful = true
	this build-settings = BuildSettings new
	proto-queue = List new


return-value
	if !successful
		return 1
	return 0



# Top-level compilation.

compile-file: file as: name into: parent-proto
	status-reporter = VT100StatusReporter new
	proto = parent-proto add-proto: name
	parser = Parser new: file contents context: parent-proto
	parser parse-proto-file: proto
	return proto

compile-dir: dir as: name into: parent-proto
	status-reporter = VT100StatusReporter new
	proto = parent-proto add-proto: name directory: dir 	# Will compile.
	return proto


compile-program: compile-symbols
	# Read the settings.
	for setting in compile-symbols
		switch setting
			"verbose"
				build-settings is-verbose = true
			"target-c", "targeting-c"
				build-settings target = 'C'
			"target-jolt", "targeting-jolt"
				build-settings target = 'Jolt'
	build-settings load

	# Create the status reporter.
	if status-reporter == nil
		if build-settings is-verbose
			status-reporter = StdoutStatusReporter new
		else
			status-reporter = VT100StatusReporter new

	# Create the sources/objects directories
	directory = FileDirectory new: "."
	if build-settings targeting-jolt
		if !(directory entry-is-directory: build-settings jolt-sources-dir)
			directory create-subdirectory: build-settings jolt-sources-dir
	if build-settings targeting-c
		if !(directory entry-is-directory: build-settings c-sources-dir)
			directory create-subdirectory: build-settings c-sources-dir
		if !(directory entry-is-directory: build-settings objects-dir)
			directory create-subdirectory: build-settings objects-dir

	# Load.
	main-directory = FileDirectory new: "."
	if main-directory entry-is-directory: "sources"
		main-directory = main-directory at: "sources"
	library-path = find-library-path
	if library-path == nil
		throw MessageException new: 	--
			"Couldn't find the Trylid library.  You may need to set $TRYLID_LIBRARY."
	library-directory = FileDirectory new: library-path
	main-name = "Main"
	if the-compiler build-settings targeting-jolt
		main-name = "Trylid"
	status-reporter report: "Loading " + main-name + "..."
	status-reporter indent
	main-proto = CompiledProto new: main-name parent: nil
	main-proto 	--
		setup-main: main-directory library-directory: library-directory
	proto-queue append: main-proto
	status-reporter unindent

	# Get ready to emit (mainly this makes sure all used classes are loaded).
	status-reporter report: "Preparing to emit..."
	status-reporter indent
	for proto in proto-queue
		proto prepare-to-emit
	status-reporter unindent

	# Set up Standard Object.
	object-class = root-proto: main-proto
	object-class is-root-object = true

	# Emit
	if build-settings targeting-jolt
		emit-jolt
	if build-settings targeting-c
		emit-c

	status-reporter report: "Done."


emit-jolt
	# Emit the classes and packages.
	status-reporter report: "Emitting code..."
	status-reporter indent
	for proto in proto-queue
		is-changed = proto emit-code
	status-reporter unindent

	# Emit load.k.
	status-reporter report: "Emitting load.k..."
	status-reporter indent
	path = the-compiler build-settings jolt-sources-dir + "/load.k"
	file = File new: path
	stream = ExistingFileStream new: file
	for proto in proto-queue
		stream write: "(load-trylid-proto " + proto full-name + ")"
		stream write-line
	stream close
	status-reporter unindent


emit-c
	# Number the classes.
	object-class = root-proto: main-proto
	object-class number-classes: CCompiler ClassNumberer new
	
	# Copy Trylon_.h.
	recompile-all = false
	library-path = find-library-path
	contents = (File new: library-path + "/Trylon_.h") contents
	stream = ExistingFileStream new: build-settings c-sources-dir + "/Trylon_.h"
	stream write: contents
	if stream is-changed
		recompile-all = true
	stream close

	# Copy and compile Trylon_.c.
	contents = (File new: library-path + "/Trylon_.c") contents
	c-file-name = build-settings c-sources-dir + "/Trylon_.c"
	stream = ExistingFileStream new: c-file-name
	stream write: contents
	compile-trylon-c = (stream is-changed || recompile-all)
	stream close
	objects = List new
	objects append: 	--
		(CCompiler compile-c-file: "Trylon_" force-compile: compile-trylon-c)

	# Emit the classes and packages.
	status-reporter report: "Emitting code..."
	status-reporter indent
	for proto in proto-queue
		status-reporter report: "Emitting C for " + proto name + "..."
		builder = CCompiler ClassBuilder new: proto
		builder emit
		objects append: builder object-file-name
	status-reporter unindent


root-proto: main-proto
	# Find "Standard Object".
	standard-package = main-proto get-subproto: "Standard"
	if standard-package == nil
		throw MessageException new: "Standard package is missing!"
	object-function = standard-package lookup-function: "Object"
	if object-function == nil
		throw MessageException new: "Standard Object is missing!"
	if !(object-function is-a: ProtoFunction)
		throw MessageException new: "Standard Object is not a prototype!"
	return object-function proto


get-standard-class: name
	return (main-proto get-subproto: "Standard") get-proto: name


find-library-path
	# Use $TRYLID_LIBRARY if it's set.
	library-path = System environment-variable-named: "TRYLID_LIBRARY"
	if library-path && !(library-path is-empty)
		return library-path
	# Check $HOME/trylid.
	home-path = System environment-variable-named: "HOME"
	if home-path && !(home-path is-empty)
		home-dir = FileDirectory new: home-path
		if home-dir entry-is-directory: "trylid/library"
			return home-path + "/trylid/library"
	# Check ./library.
	if (FileDirectory new: ".") entry-is-directory: "library"
		return "./library"
	# Look in some common places.
	for prefix-path in ("/usr/lib", "/usr/local/lib", "/usr/share", "/opt/lib")
		prefix-dir = FileDirectory new: prefix-path
		if prefix-dir entry-is-directory: "trylid"
			return prefix-path + "/trylid"
	return nil


# Selectors from Jolt, which we need to make available when in Trylon.

iff !in-jolt
	translateExpression: expression
		#
	translateSymbol: symbol
		#



# Copyright 2007 Steve Folta.  See the License file.

