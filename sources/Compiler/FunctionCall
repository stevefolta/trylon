trylon FunctionCall
superclass TrylonExpression

fields name arguments context
fields function 	# Only valid after resolve.


create: name arguments: arguments context: context
	this name = name
	this arguments = arguments
	this context = context

create: function arguments: arguments
	# Special for use by "in-process" functions like ExistingClass
	# and PrimitiveFunction.
	this function = function
	this name = function name
	this arguments = arguments
	# "context" is not needed; we skip the "resolve" phase.


resolve
	function = context lookup-function-autodeclaring: name
	if function == nil
		throw MessageException new: "There is no \"" + name + "\" function."

	for arg in arguments
		arg resolve


compile: builder
	return builder compile-function-call: this


convert-to-setter-call: value
	if name ends-with: ":"
		name += "put:"
	else
		name += ":"
	arguments append: value


copy
	copied-args = List new
	for arg in arguments
		copied-args append: arg
	return FunctionCall new: name arguments: copied-args context: context



# Copyright 2007-2009 Steve Folta.  See the License file.

