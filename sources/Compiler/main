trylon Compiler

# See "Compiler Compiler" for the guts of this, and an explanation of why it is
# separate from this... (it's Trylon 1's fault, not Trylon 2's).


compile: compile-symbols
	compiler = Compiler new
	compiler compile-program: compile-symbols
	return compiler return-value

compile
	compile: List new


find-library-path
	# Use $TRYLON_LIBRARY if it's set.
	library-path = System environment-variable-named: "TRYLON_LIBRARY"
	if library-path && !(library-path is-empty)
		return library-path
	# Check $HOME/trylon.
	home-path = System environment-variable-named: "HOME"
	if home-path && !(home-path is-empty)
		home-dir = FileDirectory new: home-path
		if home-dir entry-is-directory: "trylon/library"
			return home-path + "/trylon/library"
	# Check ./library.
	if (FileDirectory new: ".") entry-is-directory: "library"
		return "./library"
	# Look in some common places.
	for prefix-path in ("/usr/lib", "/usr/local/lib", "/usr/share", "/opt/lib")
		prefix-dir = FileDirectory new: prefix-path
		if prefix-dir entry-is-directory: "trylon"
			return prefix-path + "/trylon"
	return nil


iff targeting-jolt
	compile-file: file as: name into: parent-proto
		if !(parent-proto is-a: ExistingProto)
			parent-proto = ExistingProto new: parent-proto
		compiler = Compiler new
		program = compiler compile-file: file as: name into: parent-proto
		program _eval
	
	compile-dir: dir as: name into: parent-proto
		if !(parent-proto is-a: ExistingProto)
			parent-proto = ExistingProto new: parent-proto
		compiler = Compiler new
		program = compiler compile-dir: dir as: name into: parent-proto
		program _eval
		compiler = nil
	
	parse-file: file as: name into: parent-proto
		if !(parent-proto is-a: ExistingProto)
			parent-proto = ExistingProto new: parent-proto
		if !(file is-a: File)
			file = File new: file
		compiler = Compiler new
		program = compiler compile-file: file as: name into: parent-proto
		return program



# Copyright 2007 Steve Folta.  See the License file.

