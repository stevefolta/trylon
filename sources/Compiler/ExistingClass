trylon ExistingClass
superclass Class

fields name proto new-functions is-main directories


create: name proto: proto
	this name = name
	this proto = proto
	new-functions = Dictionary new
	directories = List new
	iff targeting-jolt
		is-main = (proto == Trylon)
	iff !targeting-jolt
		is-main = (proto == Main)
	if is-main
		setup-main

create: proto
	create: proto .proto-name proto: proto


setup-main
	# Add current directory (or "./sources").
	main-directory = FileDirectory new: "."
	if main-directory entry-is-directory: "sources"
		main-directory = main-directory at: "sources"

	# Add the system library.
	library-path = find-library-path
	if library-path
		try
			library-directory = FileDirectory new: library-path
			directories append: library-directory

	# Add the library-dirs.
	for directory in build-settings library-dirs
		add-directory: (FileDirectory new: directory)


lookup-function: name
	name-selector = name intern

	# Are we adding it?
	function = new-functions at: name
	if function
		return function
	
	# Check the context, starting here.
	cur-proto = proto
	loop
		# Is it directly visible?
		function = function-for: name-selector in: cur-proto
		if function
			return function

		# Is it visible due to being in a "used" context?
		if cur-proto responds-to: '.used-contexts'
			for context in cur-proto .used-contexts
				function = function-for: name-selector in: context
				if function
					return function

		# Go up a level.
		if !(cur-proto responds-to: '.parent-context')
			break
		cur-proto = cur-proto .parent-context
		if cur-proto == nil
			break
	
	return nil


function-for: selector in: proto
	# Is it a ProtoFunction?
	function-name = selector string
	if (function-name index-of: `:`) < 0
		found-subproto-fn = load-subproto: function-name
		if found-subproto-fn
			return found-subproto-fn

	if !(proto responds-to: selector)
		return nil
	
	existing-proto = this
	if proto != this
		existing-proto = ExistingClass new: proto .proto-name proto: proto
	return PrimitiveFunction new: function-name on-proto: existing-proto


find-subproto: name
	# 'support-subprotos' must be on!
	if proto .subprotos
		for subproto in proto .subprotos
			if subproto .proto-name == name
				return subproto
	
	return nil


load-subproto: name
	subproto = nil

	# Do we already have it?
	found-subproto = find-subproto: name
	if found-subproto
		subproto = ExistingClass new: name proto: found-subproto
		for directory in directories
			if directory entry-is-directory: name
				subproto add-directory: directory[name]
	
	# If not, look for it in our directories.
	else
		for directory in directories
			subproto = CompiledClass in: directory for: name parent: this

	if subproto == nil
		return nil
	return ProtoFunction new: subproto


lookup-function: name visited-protos: visited-protos
	return lookup-function: name


lookup-instance-function: name
	found-subproto-fn = load-subproto: name
	if found-subproto-fn
		return found-subproto-fn

	if proto responds-to: name intern
		return PrimitiveFunction new: name on-proto: proto
	
	function = new-functions at: name
	if function
		return function

	return nil


parent
	if proto responds-to: '.parent-context'
		parent-context = proto .parent-context
		if parent-context == nil
			return nil
		existing-proto = ExistingClass new: parent-context
		return existing-proto
	return nil


add-function: function
	function-name = function name

	new-functions at: function-name put: function

	# "create" functions automatically add a corresponding "new:" function.
	if (function is-a: CompiledFunction) && 	--
	    ((function-name == "create") || 	--
			 (function-name starts-with: "create:") || 	--
	     (function-name starts-with: "create-"))
		# Add the corresponding "new" function.
		new-function = NewFunction new: function on-proto: this
		(new-functions at: new-function name) = new-function


add-function: name function: function
	new-functions at: name put: function


add-field: field
	# Fields can't be added to pre-existing protos.  But we may be re-loading the
	# proto to update its methods, so check if we're merely trying to add a field
	# that's already there.
	# This is not a perfect check; we merely check to see if there's a getter and
	# a setter, not if there's truly a field.
	if lookup-instance-function: field name
		if lookup-instance-function: field name + ":"
			return

	throw MessageException new: "You can't add fields to pre-existing objects."


add-shared-field: field
	new-functions at: field name put: (SharedFieldGetter new: field on-proto: this)
	new-functions 	--
		at: field name + ":" put: (SharedFieldSetter new: field on-proto: this)


add-proto: name directory: directory
	# If it already exists, return it.
	existing-function = lookup-instance-function: name
	if existing-function
		if !(existing-function is-a: ProtoFunction)
			throw MessageException new: 	--
				"Adding \"" + name + "\" as a proto, when it's already a non-proto."
		return existing-function proto
	
	# Add the new one.
	status-reporter = compiler status-reporter
	status-reporter report: "Loading " + name + " into " + this name + "..."
	status-reporter indent
	new-proto = CompiledClass new: name parent: this
	if directory
		new-proto add-directory: directory
	proto-function = ProtoFunction new: new-proto
	new-functions at: name put: proto-function
	compiler adding-class: new-proto
	status-reporter unindent
	return new-proto


add-proto: name
	return add-proto: name directory: nil


add-directory: directory
	directories append: directory


source-name: name
	# We don't care.


get-subproto: name
	# Has it been loaded already?
	function = lookup-instance-function: name
	if function && (function is-a: ProtoFunction)
		return function proto
	
	return nil


get-proto: name
	function = new-functions at: name
	if function == nil
		function = lookup-function: name
	if function && (function is-a: ProtoFunction)
		return function proto
	return nil


add-used-namespace: namespace
	if !namespace is-a: ExistingClass
		# Not yet supported, we'd need to defer the attempt until after the new
		# class/namespace has been installed.
		error: 	--
			('Adding new classes as "used" classes of existing classes (', 	--
			namespace name, " to ", name, ') is not supported.')

	class = proto .class
	new-used-proto = namespace proto
	if class used-contexts == nil
		class used-contexts = Tuple with: new-used-proto
	else
		# Is it already there?
		# Use "same-as:" to check.
		for proto in class used-contexts
			if new-used-proto same-as: proto
				return

		# Build a new 'used-contexts', adding the new one.
		new-used-contexts = Tuple new: class used-contexts num-items + 1
		index = 0
		for proto in class used-contexts
			new-used-contexts[index] = proto
			index += 1
		new-used-contexts[index] = new-used-proto
		class used-contexts = new-used-contexts


newly-defined-functions
	return new-functions pairs


# Copyright 2007 Steve Folta.  See the License file.

