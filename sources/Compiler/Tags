trylon Tags

fields tags


create
	tags = Dictionary new


add-function-tag: name line: line
	tag = Tag new-file: compiler cur-file line: line kind: 'f'
	add-tag: tag as: name

add-class-tag: name line: line
	tag = Tag new-file: compiler cur-file line: line kind: 'c'
	add-tag: tag as: name

add-class-tag: name file: file
	tag = Tag new-file: file line: nil kind: 'c'
	add-tag: tag as: name


emit-to: path
	out = (File new: path) output-stream
	out send: "!_TAG_FILE_ENCODING\tutf-8\t"
	out send: "!_TAG_FILE_FORMAT\t2"
	out send: "!_TAG_FILE_SORTED\t1\t"

	for item in tags pairs
		for tag in item value
			out send-chunk: item key, "\t"
			out send-chunk: tag file path, "\t"
			if tag line
				out send-chunk: "/^"
				indentation-level = tag line indentation-level
				if indentation-level
					tabs = "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
					out send-chunk: (tabs substr: 0 length: indentation-level)
				out send-chunk: tag line text
				out send-chunk: "$/"
			else
				# If there's no line, it's a class tag for the entire file.
				out send-chunk: "0"
			out send: ";\"\t", tag kind

	out close


# Implementation.

add-tag: tag as: name
	existing-tag = tags[name]
	if existing-tag
		if existing-tag is-a: Collection
			existing-tag append: tag
		else
			tags[name] = List with: existing-tag and: tag
	else
		tags[name] = tag


class Tag
	fields file line kind

	create-file: file line: line kind: kind
		this file = file
		this line = line
		this kind = kind


