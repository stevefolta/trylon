trylon TrylonWordsLexer


create: string
	p = string start
	stopper = string stopper

create: start to: stopper
	p = start
	this stopper = stopper

next
	if cached-word
		result = cached-word
		cached-word = nil
		return result
	else
		return parse-next-word

current
	if cached-word == nil
		cached-word = parse-next-word
	return cached-word

peek
	return current

is-empty
	return (current == nil)

remainder
	return String from: p to: stopper

require-eol
	if is-empty
		return nil
	if current == "#"
		return remainder
	throw ParseException new: "Extra stuff at end of line." token: current


class-fn parse-char-escape-from: start to: stopper
	lexer = TrylonWordsLexer new: start to: stopper
	c = start deref-char
	if c == 'u' || c == 'U'
		num-digits = 4
		if c == `U`
			num-digits = 8
		value = lexer parse-hex: num-digits
		return (value, lexer p)
	else
		builder = SmallStringBuilder new
		lexer parse-escaped-char-into: builder
		return (builder string first-character, lexer p)


# ===== As a Trylon Iterator

current-item
	return current

is-done
	return (current == nil)

go-forward
	next

iterator
	return this


# ===== Private

field cached-word
fields p stopper

parse-next-word
	# Skip initial whitespace.
	c = nil
	loop
		if p >= stopper
			return nil
		c = p deref-char
		if !c is-whitespace
			break
		p += 1
	
	word-start = p

	# Is it a paren/bracket/brace/comma/minus?
	if c == `!`
		p += 1
		if p < stopper && p deref-char == `=`
			p += 1
		return String from: word-start to: p
	else if c == `(` || c == `)` || c == `[` || c == `]` || 	--
	        c == `{` || c == `}` || c == `,` || c == `!` || c == `-`
		p += 1
		return String from: word-start to: p
	
	# A string/symbol?
	else if c == `"` || c == `'`
		delimiter = c
		builder = nil
		p += 1
		loop
			if p >= stopper
				throw MessageException new: "Unterminated quote."
			c = p deref-char
			if c == delimiter
				p += 1
				if builder
					builder add-from: word-start to: p
					return builder string
				else
					return String from: word-start to: p
			else if c == `\\`
				if builder == nil
					builder = SmallStringBuilder from: word-start to: p
				else
					builder add-from: word-start to: p
				p += 1
				parse-escaped-char-into: builder
				word-start = p
			else
				p += 1

	# Gather the word.
	loop
		p += 1
		if p >= stopper
			return String from: word-start to: stopper
		c = p deref-char
		if c is-whitespace || 	--
		   c == `(` || c == `)` || c == `[` || c == `]` || 	--
			 c == `{` || c == `}`	|| 	--
			 c == `,` || c == `!`
			break
	return String from: word-start to: p


parse-escaped-char-into: builder
	# The `\` has already been consumed.
	escaped-char = nil
	switch p deref-char
		`a`
			escaped-char = `\a`
			p += 1
		`b`
			escaped-char = `\b`
			p += 1
		`e`
			escaped-char = `\e`
			p += 1
		`f`
			escaped-char = `\f`
			p += 1
		`n`
			escaped-char = `\n`
			p += 1
		`r`
			escaped-char = `\r`
			p += 1
		`t`
			escaped-char = `\t`
			p += 1
		`v`
			escaped-char = `\v`
			p += 1
		`0`, `1`, `2`
			value = p deref-char - `0`
			p += 1
			if p < stopper && p deref-char is-digit
				digit = p deref-char
				value <<= 3
				value += digit - `0`
				p += 1
				if p < stopper && p deref-char is-digit
					value <<= 3
					value += digit - `0`
					p += 1
			escaped-char = value char
		`x`, `X`
			p += 1
			if p >= stopper
				throw MessageException: "Unterminated quote."
			escaped-char = (parse-hex: 2) char
		`u`, `U`
			p += 1
			if p >= stopper
				throw MessageException: "Unterminated quote."
			num-digits = 4
			if p deref-char == `U`
				num-digits = 8
			value = parse-hex: num-digits
			utf8-encode: value into: builder
		else
			escaped-char = p deref-char
			p += 1
	if escaped-char
		builder add-char: escaped-char


parse-hex: max-digits
	value = 0
	num-digits = 0
	while num-digits < max-digits
		if p >= stopper
			break
		c = p deref-char
		digit-value = 0
		if c is-digit
			digit-value = c - `0`
		else if c >= `a` && c <= `f`
			digit-value = c - `a` + 0x0A
		else if c >= `A` && c <= `F`
			digit-value = c - `A` + 0x0A
		else
			break
		p += 1
		value <<= 4
		value += digit-value
		num-digits += 1
	return value


utf8-encode: char into: builder
	if char < 0x7F
		builder add-char: char
		return
	
	prefix = 0x80
	list = List new
	loop
		if (char & 0xFFFFFFC0) == 0
			break
		list push-front: (char & 0x0000003F)
		char = (char >> 6) & 0x03FFFFFF
		prefix = (prefix >> 1) | 0x80
	builder add-char: prefix | char
	for char in list
		builder add-char: (char | 0x80)




# Copyright 2007 Steve Folta.  See the License file.

