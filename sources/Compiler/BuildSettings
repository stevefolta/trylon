trylon NewBuildSettings

fields dictionary


create
	dictionary = Dictionary new
	dictionary at: "c-flags" put: List new
	dictionary at: "link-flags" put: List new
	dictionary at: "library-dirs" put: List new
	dictionary at: "c-compiler" put: "gcc"
	dictionary at: "linker" put: "gcc"
	dictionary at: "c-sources-dir" put: ".jolt-sources"
	dictionary at: "objects-dir" put: ".objects"
	dictionary at: "jolt-sources-dir" put: ".jolt-sources"
	target: 'C'

	sysname = System sysname
	if !sysname is-empty
		dictionary at: sysname put: sysname
	(dictionary at: "in-trylid") = "true"
	(dictionary at: "trylon-2") = "true"
	if Implementation .target-language == "Coke"
		(dictionary at: "in-jolt") = "true"


has-symbol: name
	return (dictionary at: name) != nil

program-name
	# Note!: This one uses a different name.
	return dictionary at: "program"
c-flags
	return dictionary at: "c-flags"
link-flags
	return dictionary at: "link-flags"
c-compiler
	return dictionary at: "c-compiler"
linker
	return dictionary at: "linker"
library-dirs
	return dictionary at: "library-dirs"
jolt-sources-dir
	return dictionary at: "jolt-sources-dir"
c-sources-dir
	return dictionary at: "c-sources-dir"
objects-dir
	return dictionary at: "objects-dir"
is-verbose
	return dictionary at: "is-verbose"
is-verbose: new-value
	dictionary at: "is-verbose" put: new-value
targeting-c
	return dictionary at: "targeting-c"
targeting-jolt
	return dictionary at: "targeting-jolt"
debugger
	return dictionary at: "debugger"
include-selector-symbols
	return dictionary at: "include-selector-symbols"
support-perform
	return dictionary at: "support-perform"
shared-ints
	return dictionary at: "shared-ints"


target: target
	switch target
		'C'
			dictionary at: "targeting-c" put: "true"
			dictionary at: "targeting-jolt" put: nil
		'Jolt'
			dictionary at: "targeting-jolt" put: "true"
			dictionary at: "targeting-c" put: nil


load
	# Load global build-settings first.
	library-path = compiler find-library-path
	if library-path
		load-from: library-path + "/build-settings"
	# Then user's semi-global build-settings.
	home-path = System environment-variable-named: "HOME"
	if home-path && !(home-path is-empty)
		load-from: home-path + "/.trylon-build-settings"
	# The project-specific build-settings.
	load-from: "build-settings.local"
	load-from: "build-settings"


load-from: file-name
	file = File new: file-name
	if !file exists
		return
	
	try
		load-lines: (LinesLexer read: file contents)
	catch Exception
		throw 	--
			MessageException new: 	--
				"Error in \"" + file-name + "\": " + exception message


load-lines: lines
	for line in lines
		load-line: line


load-line: line
	line = line words
	first-word = line next

	# Comments and blank lines.
	if first-word == nil || first-word starts-with: "#"
		# Nothing to do.

	# "if" is the only special form.
	else if first-word == "if" || first-word == "iff"
		# Get the symbol and the sense.
		reverse-sense = false
		symbol = line next
		if symbol == nil || symbol starts-with: "#"
			error: "\"if\" line needs a condition" in: line
		if symbol starts-with: "!"
			reverse-sense = true
			if symbol == "!"
				# "if ! foo"
				symbol = line next
			else
				# "if !foo"
				symbol = symbol substr: 1
		line require-eol

		# Test it.
		value = dictionary at: symbol
		if value == nil
			value = ""
		test-succeeded = !value is-empty
		if reverse-sense
			test-succeeded = !test-succeeded

		# Do, or do not.
		if test-succeeded
			load-lines: line 

	# Anything else is a sort of assignment expression.
	else
		# Name and flavor.
		name = first-word
		appending = false
		if name ends-with: ":"
			name = name substr: 0 length: name length - 2
		else
			operator = line next
			if operator == "+="
				appending = true
			else if operator != "="
				error: "'=' or '+=' expected" in: line

		# Get the value, as a string.
		value = line next
		if value == nil || value starts-with: "#"
			error: "value expected" in: line
		value = resolve-value: value

		# Appending to a list.
		if appending
			# Append the first value.
			if value == nil
				return
			old-value = dictionary at: name
			if old-value == nil
				# Just use the new value.
			else if old-value is-a: List
				old-value append: value
				value = old-value
			else
				value = List with: old-value and: value
			dictionary at: name put: value

		# Setting a value.
		else
			dictionary at: name put: value

		# Append any more values we find on the line.
		loop
			value = line next
			if value == nil || value starts-with: "#"
				break
			value = resolve-value: value
			old-value = dictionary at: name
			if old-value && old-value is-a: List
				old-value append: value
				value = old-value
			else
				value = List with: old-value and: value
			dictionary at: name put: value

		# Special-case 'targeting-c' and 'targeting-jolt', which are mutually
		# exclusive.
		if name == "targeting-c" && dictionary at: name
			target = 'C'
		else if name == "targeting-jolt" && dictionary at: name
			target = 'Jolt'


resolve-value: value
	if value == nil || value == "false" || value == "nil"
		return nil
	else if value starts-with: "\"" || value starts-with: "'"
		return value substr: 1 length: value length - 2
	return value


error: message in: line
	throw MessageException new: message


