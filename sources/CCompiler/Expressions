trylon Expressions

extend Send
	emit-code: builder
		object-result = object emit-code: builder
		arg-results = List new
		for arg in arguments
			arg-results append: (arg emit-code: builder)
		builder using-object-function: name
		temporary = builder get-temporary
		line = temporary name + " = "
		line += "Call_(" + (mangle-name: name) + ", " + object-result access
		for arg-result in arg-results
			line += ", " + arg-result access
		line += ");"
		builder add-line: line
		return temporary


extend IntLiteral
	fields index 	# The MethodBuilder will set this.

	emit-code: builder
		builder int-literals add: this
		return LiteralResult new: this

	emit-declaration: stream
		stream write-all: ("DefineInt_(", index string, ", ", value string, ")\n")
	
	access
		return "Int_(" + index string + ")"
	

extend FloatLiteral
	field index

	emit-code: builder
		builder float-literals add: this
		return LiteralResult new: this
	
	emit-declaration: stream
		stream write-all: ("DefineFloat_(", index string, ", ", value string, ")\n")
	
	access
		return "Float_(" + index string + ")"
	

extend StringLiteral
	field	index 	# The MethodBuilder will set this.

	emit-code: builder
		builder string-literals add: this
		return LiteralResult new: this
	
	emit-declaration: stream
		stream write-all: ("DefineString_(", index string, ", ", value string, ")\n")
	
	access
		return "String_(" + index string + ")"


extend SymbolLiteral
	emit-code: builder
		mangled-name = mangle-name: name
		builder add-extern-declaration: "UsingSym_(" + mangled-name + ")"
		return NameResult new: "Sym_(" + mangled-name + ")" is-constant: true


extend LiteralNil
	emit-code: builder
		return NameResult new: "nil" is-constant: true


extend BoolLiteral
	emit-code: builder
		result = nil
		if value
			result = 'true_'
		else
			result = 'nil'
		return NameResult new: result is-constant: true


extend CharLiteral
	# Just another form of IntLiteral.
	fields index 	# The MethodBuilder will set this.

	emit-code: builder
		builder int-literals add: this
		return LiteralResult new: this
	
	emit-declaration: stream
		stream write-all: ("DefineInt_(", index string, ", ", value string, ")\n")
	
	access
		return "Int_(" + index string + ")"
	

extend DictLiteral
	#... *** NEEDS WORK
	field	index

	emit-code: builder
		builder using-proto: (the-compiler get-standard-proto: "Dictionary")
		builder dict-literals add: this
		return LiteralResult new: this
	
	emit-node: node builder: builder
		if node left
			emit-node: node left builder: builder
		if node right
			emit-node: node right builder: builder
		#... *** "node value"?
		node value key-result = (StringLiteral new: node key) emit-code: builder
		node value value-result = node value value emit-code: builder
	
	emit-declaration: stream
		# ...
		emit-node: dict-root builder: builder
	
	access
		return "Dict_(" + index string + ")"
	


