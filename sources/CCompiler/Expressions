trylon Expressions


##### Fundamentals ####

extend Compiler TrylonExpression
	emit-code: builder
		virtual

	is-literal
		# Default: no.
		return false
	

extend Compiler Send
	emit-code: builder
		# Special-case calls on prototypes.
		# "Compiler Send prepare-to-emit" has found the ProtoFunction for us.
		if proto-result-function
			return proto-result-function emit-c-call: arguments builder: builder

		# Normal send.
		object-result = object emit-code: builder
		return 	--
			CCompiler 	--
				emit-send: name to-string: object-result access 	--
				with: arguments builder: builder


extend Compiler FunctionCall
	emit-code: builder
		# We already got the function in prepare-to-emit.
		if function == nil
			throw MessageException new: "There is no \"" + name + "\" function."
		
		return function emit-c-call: arguments builder: builder


extend Compiler SuperCall
	emit-code: builder
		superclass = builder function on-proto superclass
		if superclass == nil
			throw MessageException new: 	--
				"Attempt to do a super call on a class with no superclass."
		fn-name = (mangle-name: name) + "__" + superclass c-name

		# Declare it.
		declaration = StringBuilder new
		declaration += "obj_ "
		declaration += fn-name
		declaration += "(obj_"
		for arg in arguments
			declaration += ", obj_"
		declaration += ");"
		builder add-extern-declaration: declaration string

		# Call it.
		arg-results = List new
		for arg in arguments
			arg-results append: (arg emit-code: builder)
		result = builder get-temporary
		line = StringBuilder new
		line += result access
		line += " = "
		line += fn-name
		line += "(this_"
		for arg in arg-results
			line += ", "
			line += arg access
		line += ");"
		builder add-line: line string
		return result



##### Literals #####

extend Compiler IntLiteral
	fields index 	# The MethodBuilder will set this.

	is-literal
		return true

	emit-code: builder
		builder int-literals add: this
		return CCompiler LiteralResult new: this

	emit-declaration: stream
		stream write-all: ("\tDefineInt_(", index string, ", ", value string, ")\n")
	
	access
		return "Int_(" + index string + ")"
	

extend Compiler FloatLiteral
	field index

	is-literal
		return true

	emit-code: builder
		builder float-literals add: this
		return CCompiler LiteralResult new: this
	
	emit-declaration: stream
		stream write-all: 	--
			("\tDefineFloat_(", index string, ", ", value string, ")\n")
	
	access
		return "Float_(" + index string + ")"
	

extend Compiler StringLiteral
	field	index 	# The MethodBuilder will set this.

	is-literal
		return true

	emit-code: builder
		builder string-literals add: this
		return CCompiler LiteralResult new: this
	
	emit-declaration: stream
		escaped-string = CCompiler escape-string-for-c: value string
		stream write-all: 	--
			("\tDefineString_(", index string, ", \"", escaped-string, "\")\n")
	
	access
		return "Str_(" + index string + ")"


extend Compiler SymbolLiteral
	is-literal
		return true

	emit-code: builder
		mangled-name = mangle-name: name
		compiler using-symbol: name
		builder add-extern-declaration: "UsingSym_(" + mangled-name + ")"
		return 	--
			CCompiler NameResult new: "Sym_(" + mangled-name + ")" is-constant: true


extend Compiler LiteralNil
	is-literal
		return true

	emit-code: builder
		return CCompiler NameResult new: "nil" is-constant: true


extend Compiler BoolLiteral
	is-literal
		return true

	emit-code: builder
		result = nil
		if value
			result = 'true_'
		else
			result = 'nil'
		return CCompiler NameResult new: result is-constant: true


extend Compiler CharacterLiteral
	# Just another form of IntLiteral.
	fields index 	# The MethodBuilder will set this.

	is-literal
		return true

	emit-code: builder
		builder int-literals add: this
		return CCompiler LiteralResult new: this
	
	emit-declaration: stream
		char-string = nil
		iff !trylon-2
			# Old Trylon has Chars separate from Ints.
			char-string = char int string
		iff trylon-2
			char-string = char string
		stream write-all: ("\tDefineInt_(", index string, ", ", char-string, ")\n")
	
	access
		return "Int_(" + index string + ")"
	

extend Compiler DictLiteral
	field	index results
	field next-node-index

	is-literal
		return true

	emit-code: builder
		builder using-proto: (compiler get-standard-class: "Dictionary")

		# Access all values first, so sub-dicts get declared first.
		next-node-index = 0
		results = build-results: dict root builder: builder

		builder dict-literals add: this
		return CCompiler LiteralResult new: this
	
	class ResultsNode
		fields left right key value level dict node-index

		create: node-index in: dict
			this node-index = node-index
			this dict = dict

		emit-declaration-on: stream
			left-access = 'nil'
			if left
				left emit-declaration-on: stream
				left-access = left access
			right-access = 'nil'
			if right
				right emit-declaration-on: stream
				right-access = right access
			stream write-all: 	--
				("DefineDictNode_(", 	--
				 dict index string, ", ", node-index string, ", ", 	--
				 key access, ", ", value access, ", ", 	--
				 left-access, ", ", right-access, ", ", level string, ")\n")

		access
			return "DictNode_(" + dict index string + ", " + node-index string + ")"
	
	build-results: node builder: builder
		node-results = ResultsNode new: next-node-index in: this
		next-node-index += 1
		if node left
			node-results left = build-results: node left builder: builder
		if node right
			node-results right = build-results: node right builder: builder
		# Keys and values are constants which will not be allowed to emit code, so
		# we can call emit-code: on them without fear that they'll actually emit
		# code.  The side-effect is that they set up the builder to declare them.
		node-results key = (StringLiteral new: node key) emit-code: builder
		node-results value = node value emit-code: builder
		node-results level = node level
		return node-results
	
	emit-declaration: stream
		results emit-declaration-on: stream
		stream write-all: 	--
			("DefineDict_(", index string, ", ", results access, ", ", 	--
			 dict num-items string, ")\n")
	
	access
		return "Dict_(" + index string + ")"
	

##### Short-circuits #####

extend Compiler ShortCircuitAnd
	emit-code: builder
		result = expr1 emit-code: builder
		if !(result is-a: CCompiler Temporary)
			# If it's already a temporary, we just reuse it for our final result;
			# otherwise, we need a new temporary.
			temporary = builder get-temporary
			builder add-line: temporary name + " = " + result access + ";"
			result = temporary

		builder add-line: "if (" + result access + ") {"
		builder indent
		result2 = expr2 emit-code: builder
		builder add-line: result access + " = " + result2 access + ";"
		builder add-line: "}"
		builder unindent
		return result


extend Compiler ShortCircuitOr
	emit-code: builder
		result = expr1 emit-code: builder
		if !(result is-a: CCompiler Temporary)
			# If it's already a temporary, we just reuse it for our final reault; 
			# otherwise we need a new temporary.
			temporary = builder get-temporary
			builder add-line: temporary name + " = " + result access + ";"
			result = temporary
		
		builder add-line: "if ((" + result access + ") == nil) {"
		builder indent
		result2 = expr2 emit-code: builder
		builder add-line: result access + " = " + result2 access + ";"
		builder add-line: "}"
		builder unindent

		return result


extend Compiler ShortCircuitNot
	emit-code: builder
		expr-result = expr emit-code: builder
		temp = builder get-temporary
		builder add-line: temp name + " = Not_(" + expr-result access + ");"
		return temp


extend Compiler NilTest
	emit-code: builder
		test = "Not_"
		if !is-nil
			test = "Bool_"
		object-result = object emit-code: builder
		temp = builder get-temporary
		builder add-line: 	--
			temp name + " = " + test + "(" + object-result access + ");"
		return temp



##### Tuples #####

extend Compiler TupleExpression
	fields index results size-result

	is-literal
		for member in members
			if !member is-literal
				return false
		return true

	emit-code: builder
		if is-literal
			builder using-proto: (compiler get-standard-class: "Tuple")

			# Access all values first, so sub-tuples get declared first.
			# Note that the emit-code: calls won't actually emit any code, they'll
			# just set the member literals up in the builder.
			size-result = (IntLiteral new: members count string) emit-code: builder
			results = List new
			for member in members
				results append: (member emit-code: builder)

			builder tuple-literals add: this
			return CCompiler LiteralResult new: this

		else
			# Not all literals, so build it dynamically.
			if builder supports-only-literals
				throw MessageException new: "Using a non-literal tuple outside a method."

			builder add-extern-declaration: 	--
				"extern obj_ new_co___Tuple__Standard(obj_, obj_);"

			# Make the tuple object.
			tuple = builder get-temporary
			size-result = (IntLiteral new: members count string) emit-code: builder
			builder add-line: 	--
				tuple access + 	--
				" = new_co___Tuple__Standard(Proto_(Tuple__Standard), " + 	--
				size-result access + 	--
				");"
			
			# Set its fields.
			index = 1 	# Starts after the size.
			for member in members
				member-result = member emit-code: builder
				builder add-line: 	--
					tuple access + "->fields[" + index string + "] = " + 	--
					member-result access + ";"
				index += 1
			
			return tuple
			
	emit-declaration: stream
		if results == nil
			throw 	--
				MessageException new: "Internal error: No results from literal tuple."
		stream write-all: ( "static obj_ tu", index string, "_[] = { " )
		stream write-all: ( "(obj_) StdClassRef_(Tuple), ", size-result access )
		for member-result in results
			stream write-all: ( ", ", member-result access )
		stream write: " };\n"

	access
		return "((obj_) tu" + index string + "_)"
	
	forward-declaration
		return "static obj_ tu" + index string + "_[];"



