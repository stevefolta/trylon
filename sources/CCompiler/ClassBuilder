trylon ClassBuilder

fields proto
fields int-literals float-literals string-literals dict-literals tuple-literals
fields extern-declarations

create: proto
	this proto = proto
	int-literals = IndexedResources new
	string-literals = IndexedResources new
	float-literals = IndexedResources new
	dict-literals = IndexedResources new
	tuple-literals = IndexedResources new
	extern-declarations = List new


emit: force-compile
	build-settings = compiler build-settings

	# Emit the C code.
	status-reporter report: "Emitting C for " + proto full-name + "..."
	c-file-name = 	--
		build-settings c-sources-dir + "/" + proto c-name + ".c"
	stream = ExistingFileStream new: c-file-name
	emit-on: stream
	need-recompile = stream is-changed
	stream close

	# Compile the C code.
	if need-recompile || force-compile || !((File new: object-file-name) exists)
		status-reporter report: "Compiling " + proto c-name + ".c..."
		args = List new
		args append: "-c"
		args append: c-file-name
		args append: "-o"
		args append: object-file-name
		for flag in build-settings c-flags
			args append: flag
		report-run-program: build-settings c-compiler arguments: args
		status = System run-program: build-settings c-compiler arguments: args
		if status != 0
			throw MessageException new: "C compilation failed."


emit-on: stream
	stream write-line: "#include \"Trylon_.h\""
	stream write-line

	# Debugging info.
	added-fields-access = "nil"
	if build-settings debugger
		tuple = Compiler TupleExpression new
		for field in proto fields
			tuple add-member: (Compiler SymbolLiteral new: field name)
		tuple emit-code: this
		stream write-line: tuple forward-declaration
		added-fields-access = tuple access
	
	# Used protos.
	used-contexts-access = "nil"
	if proto uses-protos && !proto uses-protos is-empty
		tuple = Compiler TupleExpression new
		for used-proto in proto uses-protos
			stream write-all: ("UsingClass_(", used-proto c-name, ")\n")
			tuple add-member: (ProtoExpression new: used-proto)
		tuple emit-code: this
		stream write-line: tuple forward-declaration
		used-contexts-access = tuple access

	# Subprotos.
	subprotos-access = "nil"
	if build-settings["support-subprotos"]
		tuple = nil
		for function in proto functions values
			if !(function is-a: Compiler ProtoFunction)
				continue
			if tuple == nil
				tuple = Compiler TupleExpression new
			subproto = function proto
			stream write-all: ("UsingClass_(", subproto c-name, ") ")
			tuple add-member: (ProtoExpression new: subproto)
		if tuple
			stream write-line
			tuple emit-code: this
			stream write-line: tuple forward-declaration
			subprotos-access = tuple access

	# Class info.
	compiler using-symbol: proto name
	mangled-name = mangle-name: proto name
	stream write-all: ("UsingSym_(", mangled-name, ")")
	parent-context-ref = "nil"
	if proto parent && (proto parent is-a: Compiler CompiledProto)
		stream write-all: ("UsingClass_(", proto parent c-name, ")\n")
		parent-context-ref = "Proto_(" + proto parent c-name + ")"
	superclass-ref = "nil"
	if proto superclass
		stream write-all: ("UsingClass_(", proto superclass c-name, ")\n")
		superclass-ref = "Proto_(" + proto superclass c-name + ")"
	stream write-all: ("UsingClass_(", proto c-name, ")\n")
	stream write: "struct ClassInfo "
	stream write: proto c-name
	stream write: "__classInfo_ = \n\t{ "
	stream write: proto class-num string
	stream write: ", "
	stream write: proto total-num-fields string
	stream write: ", "
	stream write-all: ("Proto_(", proto c-name, ")")
	stream write: ", "
	stream write: parent-context-ref
	stream write: ", "
	stream write: superclass-ref
	stream write: ", "
	stream write: used-contexts-access
	stream write: ", Sym_("
	stream write: mangled-name
	stream write: "), "
	stream write: added-fields-access
	stream write: ", "
	stream write: subprotos-access
	stream write: " };\n"

	# Prototype.
	stream write: "struct object "
	stream write: proto c-name
	stream write: " = \n\t{ &"
	stream write: proto c-name
	stream write: "__classInfo_, {"
	num-fields = proto total-num-fields
	i = 0
	while i < num-fields
		if i > 0
			stream write: ", "
		stream write: "nil"
		i += 1
	stream write: "} };\n\n"

	# Shared fields initial values.
	for field in proto shared-fields values
		field initial-value-result = field initial-value emit-code: this
	if !extern-declarations is-empty
		for declaration in extern-declarations
			stream write: "\t"
			stream write-line: declaration
	int-literals emit-declarations-on: stream
	string-literals emit-declarations-on: stream
	float-literals emit-declarations-on: stream
	tuple-literals emit-declarations-on: stream
	dict-literals emit-declarations-on: stream

	# Fields.
	proto emit-field-indices: stream
	for field in proto shared-fields values
		stream write: "DeclareSharedField_("
		stream write: (mangle-name: field name)
		stream write: ", "
		stream write: proto c-name
		stream write: ", "
		stream write: field initial-value-result access
		stream write: ")\n"
	stream write-line

	if proto c-preamble
		stream write: proto c-preamble

	for function in proto functions values
		function emit-c-function-on: stream


object-file-name
	# Will be called by the ProgramBuilder when it needs the name at link time.
	if .object-file-name == nil
		.object-file-name = 	--
			compiler build-settings objects-dir + "/" + proto c-name + ".o"
	return .object-file-name
field .object-file-name


report-run-program: program arguments: args
	if compiler build-settings is-verbose
		status-reporter indent

		command = StringBuilder new
		command += program
		command += " "
		for arg in args
			command += arg
			command += " "
		status-reporter report: command string

		status-reporter unindent



##### Support for literals in shared variables.

supports-only-literals
	return true

using-proto: proto
	# ...

add-extern-declaration: declaration
	extern-declarations append: declaration


