trylon ClassBuilder

fields proto
fields int-literals float-literals string-literals dict-literals tuple-literals

create: proto
	this proto = proto
	int-literals = IndexedResources new
	string-literals = IndexedResources new
	float-literals = IndexedResources new
	dict-literals = IndexedResources new
	tuple-literals = IndexedResources new


emit
	build-settings = the-compiler build-settings

	# Emit the C code.
	c-file-name = 	--
		build-settings c-sources-dir + "/" + proto full-name + ".c"
	stream = ExistingFileStream new: c-file-name
	emit-on: stream
	need-recompile = stream is-changed
	stream close

	# Compile the C code.
	if need-recompile || !((File new: object-file-name) exists)
		status-reporter report: "Compiling " + proto full-name + ".c..."
		args = List new
		args append: "-c"
		args append: c-file-name
		args append: "-o"
		args append: object-file-name
		for flag in build-settings c-flags
			args append: flag
		report-run-program: build-settings c-compiler arguments: args
		status = System run-program: build-settings c-compiler arguments: args
		if status != 0
			throw MessageException new: "C compilation failed."


emit-on: stream
	stream write-line: "#include \"Trylon_.h\""
	stream write-line

	# Class info.
	parent-context-ref = "nil"
	if proto parent && (proto parent is-a: Compiler CompiledProto)
		stream write-all: ("UsingClass_(", proto parent c-name, ")\n")
		parent-context-ref = "Proto_(" + proto parent c-name + ")"
	superclass-ref = "nil"
	if proto superclass
		stream write-all: ("UsingClass_(", proto superclass c-name, ")\n")
		superclass-ref = "Proto_(" + proto superclass c-name + ")"
	stream write: "struct ClassInfo "
	stream write: proto c-name
	stream write: "__classInfo_ = \n\t{ "
	stream write: proto class-num string
	stream write: ", "
	stream write: parent-context-ref
	stream write: ", "
	stream write: superclass-ref
	stream write: ", \""
	stream write: proto name
	stream write: "\" };\n"

	# Prototype.
	stream write: "struct object "
	stream write: proto c-name
	stream write: " = \n\t{ &"
	stream write: proto c-name
	stream write: "__classInfo_, {"
	num-fields = proto total-num-fields
	i = 0
	while i < num-fields
		if i > 0
			stream write: ", "
		stream write: "nil"
		i += 1
	stream write: "} };\n"

	# Fields.
	proto emit-field-indices: stream
	for field in proto shared-fields values
		stream write: "DeclareSharedField_("
		stream write: (mangle-name: field name)
		stream write: ", "
		stream write: proto c-name
		stream write: ")\n"

	int-literals emit-declarations-on: stream
	string-literals emit-declarations-on: stream
	float-literals emit-declarations-on: stream
	tuple-literals emit-declarations-on: stream
	dict-literals emit-declarations-on: stream

	for function in proto functions values
		function emit-c-function-on: stream


object-file-name
	# Will be called by the ProgramBuilder when it needs the name at link time.
	if .object-file-name == nil
		.object-file-name = 	--
			the-compiler build-settings objects-dir + "/" + proto full-name + ".o"
	return .object-file-name

field .object-file-name


report-run-program: program arguments: args
	if the-compiler build-settings is-verbose
		status-reporter indent

		command = StringBuilder new
		command += program
		command += " "
		for arg in args
			command += arg
			command += " "
		status-reporter report: command string

		status-reporter unindent



##### Support for literals in shared variables.

using-proto: proto
	# ...


