trylon Statements

extend Compiler Statement
	emit-code: builder
		virtual
	
	add-comment: line
		if comment
			line += " \t/* " + comment + " */"
		return line

	add-comment: line comment: comment
		if comment
			line += " \t/* " + comment + " */"
		return line


extend Compiler ExpressionStatement
	emit-code: builder
		expression emit-code: builder
		builder reset-temporaries
		if comment
			builder add-line: (add-comment: "")


extend Compiler EmptyStatement
	emit-code: builder
		# Do nothing.


extend Compiler BlankLine
	emit-code: builder
		builder add-line: ""


extend Compiler Comment
	emit-code: builder
		builder add-line: "/* " + text + " */"


extend Compiler BlockStatement
	emit-code: builder
		builder indent
		builder add-line: "{"

		# Declare locals.
		locals = block locals
		if locals && !locals is-empty
			line = StringBuilder new
			line += "obj_ "
			done-one = false
			for local in locals
				if done-one
					line += ", "
				else
					done-one = true
				line += mangle-name: local name
			line += ";"
			builder add-line: line string

		# Body.
		for statement in block statements
			statement emit-code: builder

		builder add-line: "}"
		builder unindent


extend Compiler Block
	emit-code: builder
		for statement in statements
			statement emit-code: builder


extend Compiler ReturnStatement
	emit-code: builder
		result = value emit-code: builder
		builder add-line: (add-comment: "return " + result access + ";")


extend Compiler IfStatement
	emit-code: builder
		cond-result = condition emit-code: builder
		builder add-line: (add-comment: "if (" + cond-result access + ")")
		builder reset-temporaries
		body emit-code: builder
		if pre-else-comments
			for statement in pre-else-comments
				statement emit-code: builder
		if else-block
			builder add-line: (add-comment: "else" comment: else-comment)
			else-block emit-code: builder


extend Compiler LoopStatement
	fields index

	emit-code: builder
		builder start-loop: this
		builder add-line: (add-comment: "while (1) {")
		builder add-line: "\tContinuePoint_(" + index string + ")"
		body emit-code: builder
		builder add-line: "}"
		builder end-loop


extend Compiler WhileStatement
	fields index

	emit-code: builder
		builder start-loop: this
		builder add-line: (add-comment: "while (1) {")
		builder indent
		builder add-line: "ContinuePoint_(" + index string + ")"
		cond-result = condition emit-code: builder
		builder add-line: "if (" + cond-result access + ")"
		builder add-line: "\tBreak_(" + index string + ")"
		builder reset-temporaries
		builder unindent
		body emit-code: builder
		builder add-line: "\t}"
		builder end-loop


extend Compiler ForStatement
	emit-code: builder
		builder calling-method: "iterator"
		builder calling-method: "is-done"
		builder calling-method: "current-item"
		builder calling-method: "go-forward"

		# Start the loop.
		collection-result = collection emit-code: builder
		builder reset-temporaries
		local-name = mangle-name: local name
		builder start-loop: this
		builder add-line: 	--
			"ForStart_(" + builder cur-loop-index string + ", " + 	--
				collection-result access + ", " + local-name + ")"

		# Body.
		body emit-code: builder

		# Finish the loop.
		builder add-line: "ForEnd_"
		builder end-loop


extend Compiler BreakStatement
	emit-code: builder
		builder add-line: "Break_(" + builder cur-loop-index string + ")"

extend Compiler ContinueStatement
	emit-code: builder
		builder add-line: "Continue_(" + builder cur-loop-index string + ")"


extend Compiler TryStatement
	emit-code: builder
		builder add-line: (add-comment: "Try_")
		body emit-code: builder
		if else-clause
			builder add-line: "TryElse_"
			else-clause emit-code: builder
		builder add-line: "EndTry_"

extend Compiler ThrowStatement
	emit-code: builder
		result = value emit-code: builder
		builder add-line: (add-comment: "Throw_(" + result access + ");")


extend Compiler SwitchStatement
	emit-code: builder
		value-result = expression emit-code: builder
		for clause in clauses
			clause emit-values: builder
		builder add-line: (add-comment: "Switch_(" + value-result access + ")")
		builder reset-temporaries
		at-first = true
		for clause in clauses
			clause emit-code: builder is-first: at-first
			at-first = false
		if else-clause
			builder add-line: "else"
			else-clause body emit-code: builder
		if post-clauses-comments
			for comment in post-clauses-comments
				comment emit-code: builder
		builder add-line: "EndSwitch_"

extend Compiler SwitchClause
	field value-results

	emit-values: builder
		value-results = List new
		for value in values
			value-results append: (value emit-code: builder)
	
	emit-code: builder is-first: is-first
		if pre-clause-comments
			for comment in pre-clause-comments
				comment emit-code: builder
		line = StringBuilder new
		if !is-first
			line += "else "
		line += "if ("
		done-one = false
		for result in value-results
			if done-one
				line += " || "
			else
				done-one = true
			line += "SwitchMatches_("
			line += result access
			line += ")"
		line += ")"
		builder add-line: line
		if body
			body emit-code: builder
		else
			builder add-line: "{}"



# extend Compiler CStatement



