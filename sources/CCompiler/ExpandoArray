trylon ExpandoArray

fields blocks num-blocks num-items block-size


create: block-size
	this block-size = block-size
	num-items = 0
	num-blocks = 1
	ptr-size = Implementation ptr-size
	blocks = BytePtr new: ptr-size * num-blocks
	(blocks ptr-at: 0) = BytePtr new: ptr-size * block-size


create
	create: 128


at: index
at: index put: object
at: index set-to: object
	at: index put: object


iff !targeting-c
	at: index
		which-block = index / block-size
		if which-block >= num-blocks
			return nil
		return 	--
			(blocks ptr-at: which-block) object-at: index % block-size

	at: index put: object
		which-block = index / block-size
		if which-block >= num-blocks
			expand: which-block + 1
		
		((blocks ptr-at: which-block) object-at: index % block-size) = object

		if index >= num-items
			num-items = index + 1
	


iff targeting-c
	c-fn at: index-arg
		int index = IntValue_(index_arg);
		int block_size = IntValue_(Field_(block_size));
		int which_block = index / block_size;
		if (which_block >= IntValue_(Field_(num_blocks)))
			return nil;
		return
			((obj_**) BytePtrValue_(Field_(blocks)))[which_block][index % block_size];

	c-fn at: index-arg put: object
		UsingMethod_(expand_co_)
		int index = IntValue_(index_arg);
		int block_size = IntValue_(Field_(block_size));
		int which_block = index / block_size;
		if (which_block >= IntValue_(Field_(num_blocks)))
			Call_(expand_co_, this_, BuildInt_(which_block + 1));

		((obj_**) BytePtrValue_(Field_(blocks)))[which_block][index % block_size] =
			object;

		if (index >= IntValue_(Field_(num_items)))
			Field_(num_items) = BuildInt_(index + 1);



iterator
	return Iterator new: this


expand: new-num-blocks
	# Copy the existing "blocks".
	ptr-size = Implementation ptr-size
	new-blocks = BytePtr new: ptr-size * new-num-blocks
	new-blocks copy-from: blocks length: ptr-size * num-blocks

	# Add the new blocks.
	which-block = num-blocks
	while which-block < new-num-blocks
		(new-blocks ptr-at: which-block) = BytePtr new: ptr-size * block-size
		which-block += 1
	
	# Install the new "blocks".
	blocks = new-blocks
	num-blocks = new-num-blocks


class Iterator
	fields array index

	create: array
		this array = array
		index = 0
	
	is-done
		return index >= array num-items
	
	current-item
		return array at: index
	
	go-forward
		index += 1




# Copyright 2005-2007 Steve Folta
# See the License file.

