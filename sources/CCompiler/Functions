trylon Functions

extend Compiler TrylidFunction
	emit-c-call: arguments builder: builder
		virtual
	
	emit-c-function-on: stream
		# By default, do nothing.
		# (Not all functions result in object code.)


##### Object structure

extend Compiler FieldGetter
	emit-c-call: arguments builder: builder
		return CCompiler LiteralResult new: this
	
	emit-c-function-on: stream
		mangled-name = mangle-name: field name
		stream write-all: 	--
			("obj_ ", mangled-name, "__", on-proto c-name, "(obj_ this_)\n")
		stream write: "{\n"
		stream write: "\treturn " + access + ";\n"
		stream write: "}\n"
		stream write-line
		stream write-line
	
	access
		return "Field_(" + mangle-name: field name + ")"


extend Compiler FieldSetter
	emit-c-call: arguments builder: builder
		value = arguments first emit-code: builder
		builder add-line: 	--
			"Field_(" + (mangle-name: field name) + " = " + value access + ");"
		return value
	
	emit-c-function-on: stream
		mangled-name = mangle-name: field name
		stream write-all: 	--
			("obj_ ", mangled-name, "__", on-proto c-name, 	--
			 "(obj_ this_, obj_ value)\n")
		stream write: "{\n"
		stream write-all: ("Field_(", mangle-name, ") = value;\n")
		stream write: "\treturn value;\n"
		stream write: "}\n"
		stream write-line
		stream write-line


extend Compiler SharedFieldGetter
	emit-c-call: arguments builder: builder
		builder using-shared-field: field on-proto: on-proto
		return CCompiler LiteralResult new: this
	
	emit-c-function-on: stream
		stream write-all: 	--
			("obj_ ", (mangle-name: name), "__", on-proto c-name, "(obj_ this_)\n")
		stream write: "{\n"
		stream write-all: ("\treturn ", access, ";\n")
		stream write: "}\n"
		stream write-line
		stream write-line
	
	access
		return 	--
			"SharedField_(" + 	--
			(mangle-name: field name) + ", " + on-proto c-name + ")"


extend Compiler SharedFieldSetter
	emit-c-call: arguments builder: builder
		builder using-shared-field: field on-proto: on-proto
		value = arguments first emit-code: builder
		builder add-line: 	--
			"SetSharedField_(" + 	--
			(mangle-name: field name) + ", " + on-proto c-name + ", " + 	--
			value access + ");"
		return value
	
	emit-c-function-on: stream
		stream write-all: 	--
			("obj_ ", (mangle-name: name), "__", on-proto c-name, 	--
			 "(obj_ this_, obj_ value)\n")
		stream write: "{\n"
		stream write-all: 	--
			("\tSetSharedField_(", 	--
				(mangle-name: field name), ", ", 	--
				on-proto c-name, ", value);\n")
		stream write: "\treturn value;\n"
		stream write: "}\n"
		stream write-line
		stream write-line


extend Compiler CompiledFunction
	emit-c-call: arguments builder: builder
		# This is a send to the prototype object.
		# (Can we skip the dispatch and call the function directly?)
		builder calling-method: name
		arg-results = List new
		for arg in arguments
			arg-results append: (arg emit-code: builder)
		result = builder get-temporary
		line = StringBuilder new
		line add: result access
		line add: " = Call_("
		line add: (mangle-name: name)
		line add: ", Proto_("
		line add: on-proto c-name
		line add: ")"
		for arg in arg-results
			line add: ", "
			line add: arg access
		line add: ");"
		builder add-line: line string
		return result
	
	emit-c-function-on: stream
		stream write-line: c-signature
		if body
			builder = CCompiler MethodBuilder new
			body emit-code: builder
			builder emit: stream
		else
			stream write: "{\n\treturn nil;\n}\n"
		stream write-line
		stream write-line
	
	c-name
		return (mangle-name: name) + "__" + on-proto c-name

	c-signature
		signature = StringBuilder new
		signature add: "obj_ "
		signature add: c-name
		signature add: "(obj_ this_"
		for arg in arguments
			signature add: ", obj_ "
			signature add: (mangle-name: arg name)
		signature add: ")"
		return signature string


extend Compiler ProtoFunction
	emit-c-call: arguments builder: builder
		return CCompiler LiteralResult new: this
	
	access
		return "Proto_(" + proto c-name + ")"



##### Inside a method

extend Compiler ThisFunction
	emit-c-call: arguments builder: builder
		return CCompiler NameResult new: "this_"


extend Compiler ArgumentFunction
	emit-c-call: arguments builder: builder
		return CCompiler LiteralResult new: this
	
	access
		return mangle-name: name


extend Compiler SetArgumentFunction
	emit-c-call: arguments builder: builder
		mangled-name = mangle-name: name
		value = arguments first-item emit-code: builder
		builder add-line: mangled-name + " = " + value access + ";"
		return value


extend Compiler LocalGetter
	emit-c-call: arguments builder: builder
		return CCompiler LiteralResult new: this
	
	access
		return mangle-name: local name


extend Compiler LocalSetter
	emit-c-call: arguments builder: builder
		mangled-name = mangle-name: local name
		value = arguments first-item emit-code: builder
		builder add-line: mangled-name + " = " + value access + ";"
		return value


extend Compiler FunctionOnThis
	emit-c-call: arguments builder: builder
		builder calling-method: name
		arg-results = List new
		for arg in arguments
			arg-results append: (arg emit-code: builder)
		result = builder get-temporary
		line = StringBuilder new
		line add: result access
		line add: " = Call_("
		line add: (mangle-name: name)
		line add: ", this_, "
		for arg in arg-results
			line add: ", "
			line add: arg access
		line add: ");"
		builder add-line: line string
		return result
		


