trylon Functions

extend Compiler TrylidFunction
	emit-c-call: arguments builder: builder
		virtual
	
	emit-c-function-on: stream
		# By default, do nothing.
		# (Not all functions result in object code.)

	# Helper.

	c-signature: c-name arguments: arguments
		signature = StringBuilder new
		signature += "obj_ "
		signature += c-name
		signature += "(obj_ this_"
		for arg in arguments
			signature += ", obj_ "
			signature += (mangle-name: arg name)
		signature += ")"
		return signature string
	


##### Object structure

extend Compiler FieldGetter
	emit-c-call: arguments builder: builder
		return CCompiler LiteralResult new: this
	
	emit-c-function-on: stream
		stream write-line: c-signature
		stream write: "{\n"
		stream write: "\treturn " + access + ";\n"
		stream write: "}\n"
		stream write-line
		stream write-line
	
	access
		return "Field_(" + (mangle-name: field name) + ")"
	
	c-signature
		return "obj_ " + c-name + "(obj_ this_)"
	
	c-name
		return (mangle-name: field name) + "__" + on-proto c-name


extend Compiler FieldSetter
	emit-c-call: arguments builder: builder
		value = arguments first-item emit-code: builder
		builder add-line: 	--
			"Field_(" + (mangle-name: field name) + " = " + value access + ");"
		return value
	
	emit-c-function-on: stream
		stream write-line: c-signature
		stream write: "{\n"
		stream write-all: ("\tField_(", (mangle-name: field name), ") = value;\n")
		stream write: "\treturn value;\n"
		stream write: "}\n"
		stream write-line
		stream write-line
	
	c-signature
		return "obj_ " + c-name + "(obj_ this_, obj_ value)"
	
	c-name
		return (mangle-name: name) + "__" + on-proto c-name


extend Compiler SharedFieldGetter
	emit-c-call: arguments builder: builder
		builder using-shared-field: field on-proto: on-proto
		return CCompiler LiteralResult new: this
	
	emit-c-function-on: stream
		stream write-line: c-signature
		stream write: "{\n"
		stream write-all: ("\treturn ", access, ";\n")
		stream write: "}\n"
		stream write-line
		stream write-line
	
	access
		return 	--
			"SharedField_(" + 	--
			(mangle-name: field name) + ", " + on-proto c-name + ")"

	c-signature
		return "obj_ " + c-name + "(obj_ this_)"
	
	c-name
		return (mangle-name: field name) + "__" + on-proto c-name


extend Compiler SharedFieldSetter
	emit-c-call: arguments builder: builder
		builder using-shared-field: field on-proto: on-proto
		value = arguments first-item emit-code: builder
		builder add-line: 	--
			"SetSharedField_(" + 	--
			(mangle-name: field name) + ", " + on-proto c-name + ", " + 	--
			value access + ");"
		return value
	
	emit-c-function-on: stream
		stream write-line: c-signature
		stream write: "{\n"
		stream write-all: 	--
			("\tSetSharedField_(", 	--
				(mangle-name: field name), ", ", 	--
				on-proto c-name, ", value);\n")
		stream write: "\treturn value;\n"
		stream write: "}\n"
		stream write-line
		stream write-line

	c-signature
		return "obj_ " + c-name + "(obj_ this_, obj_ value)"
	
	c-name
		return (mangle-name: name) + "__" + on-proto c-name


extend Compiler CompiledFunction
	emit-c-call: arguments builder: builder
		# This is a send to the prototype object.
		# (Can we skip the dispatch and call the function directly?)
		builder calling-method: name
		builder using-class: on-proto
		arg-results = List new
		for arg in arguments
			arg-results append: (arg emit-code: builder)
		result = builder get-temporary
		line = StringBuilder new
		line add: result access
		line add: " = Call_("
		line add: (mangle-name: name)
		line add: ", Proto_("
		line add: on-proto c-name
		line add: ")"
		for arg in arg-results
			line add: ", "
			line add: arg access
		line add: ");"
		builder add-line: line string
		return result
	
	emit-c-function-on: stream
		stream write-line: c-signature
		if body
			if is-primitive
				stream write-line: "{"
				stream write: body
				stream write-line: "}"
			else
				builder = CCompiler MethodBuilder new: this
				body emit-code: builder
				builder emit: stream
		else
			stream write: "{\n\treturn nil;\n}\n"
		stream write-line
		stream write-line
	
	c-name
		return (mangle-name: name) + "__" + on-proto c-name

	c-signature
		return c-signature: c-name arguments: arguments


extend Compiler ProtoFunction
	emit-c-call: arguments builder: builder
		builder using-class: proto
		return CCompiler LiteralResult new: this
	
	access
		return "Proto_(" + proto c-name + ")"
	
	emit-c-function-on: stream
		stream write-line: c-signature
		stream write-line: "{"
		stream write-line: "\tUsingClass_(" + proto c-name + ")"
		stream write-line: "\treturn " + access + ";"
		stream write-line: "}"
		stream write-line
		stream write-line
	
	c-signature
		return "obj_ " + c-name + "(obj_ this_)"

	c-name
		# In some cases (eg. "Main", "Compiler Compiler"), there could be a name
		# conflict with the proto, so we add "__accessor_".
		name = mangle-name: proto name
		parent = proto parent
		if parent
			name += "__" + parent c-name
		name += "__accessor_"
		return name


extend Compiler NewFunction
	emit-c-call: arguments builder: builder
		builder using-class: on-proto
		arg-results = List new
		for arg in arguments
			arg-results append: (arg emit-code: builder)
		temporary = builder get-temporary
		line = StringBuilder new
		line += temporary access
		line += " = "
		line += (mangle-name: name)
		line += "__"
		line += on-proto c-name
		line += "(Proto_("
		line += on-proto c-name
		line += ")"
		for arg in arg-results
			line += ", "
			line += arg access
		line += ");"
		builder add-line: line string
		return temporary

	emit-c-function-on: stream
		arg-names = List new
		for arg in creator arguments
			arg-names append: (mangle-name: arg name)
		# Signature.
		proto-name = on-proto c-name
		stream write: "obj_ "
		stream write: (mangle-name: name)
		stream write: "__"
		stream write: proto-name
		stream write: "(obj_ this_"
		for arg-name in arg-names
			stream write: ", obj_ "
			stream write: arg-name
		stream write: ")\n"
		# Body
		stream write: "{\n"
		stream write: "\tUsingClass_(" + proto-name + ")\n"
		stream write: "\tobj_ obj = AllocObj_(" + proto-name + ");\n"
		stream write: "\t" + (mangle-name: creator name) + "__" + proto-name + "(obj"
		for arg-name in arg-names
			stream write: ", "
			stream write: arg-name
		stream write: ");\n"
		stream write: "\treturn obj;\n"
		stream write: "}\n\n\n"
	
	c-signature
		return c-signature: c-name arguments: creator arguments
	
	c-name
		return (mangle-name: name) + "__" + on-proto c-name



extend Compiler NilFunction
	emit-c-call: arguments builder: builder
		return CCompiler NameResult new: "nil"
	
	c-signature
		return "Standard__nil"

extend Compiler BoolLiteralFunction
	emit-c-call: arguments builder: builder
		if value
			return CCompiler NameResult new: "true_"
		else
			return CCompiler NameResult new: "nil"
	
	c-signature
		if value
			return "Standard__true"
		else
			return "Standard__false"


extend Compiler PrimitiveFunction
	c-name
		return on-proto c-name + "__" + (mangle-name: name)
	
	c-signature
		return "obj_ " + c-name + "(obj_ this_)"



##### Inside a method

extend Compiler ThisFunction
	emit-c-call: arguments builder: builder
		return CCompiler NameResult new: "this_"


extend Compiler ArgumentFunction
	emit-c-call: arguments builder: builder
		return CCompiler LiteralResult new: this
	
	access
		return mangle-name: name


extend Compiler SetArgumentFunction
	emit-c-call: arguments builder: builder
		mangled-name = mangle-name: name
		value = arguments first-item emit-code: builder
		builder add-line: mangled-name + " = " + value access + ";"
		return value


extend Compiler LocalGetter
	emit-c-call: arguments builder: builder
		return CCompiler LiteralResult new: this
	
	access
		return mangle-name: local name


extend Compiler LocalSetter
	emit-c-call: arguments builder: builder
		mangled-name = mangle-name: local name
		value = arguments first-item emit-code: builder
		builder add-line: mangled-name + " = " + value access + ";"
		return value


extend Compiler FunctionOnThis
	emit-c-call: arguments builder: builder
		builder calling-method: name
		arg-results = List new
		for arg in arguments
			arg-results append: (arg emit-code: builder)
		result = builder get-temporary
		line = StringBuilder new
		line += result access
		line += " = Call_("
		line += (mangle-name: name)
		line += ", this_"
		for arg in arg-results
			line += ", "
			line += arg access
		line += ");"
		builder add-line: line string
		return result


extend Compiler CaughtExceptionFunction
	emit-c-call: arguments builder: builder
		return CCompiler NameResult new: "exception"
		


