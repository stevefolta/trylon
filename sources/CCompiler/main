trylon CCompiler


emit-c: compiler
	build-settings = compiler build-settings
	library-path = compiler find-library-path
	recompile-all = false

	# Figure out the program name.
	# Normally it's set in build-settings, but if not, use the "trylon" line from
	# "main".
	program-name = build-settings program-name
	if program-name == nil || program-name is-empty
		program-name = compiler main-proto source-name
		if program-name == nil || program-name is-empty
			# Have to default to something...
			program-name = "program-binary"

	# Create sources/objects directories.
	directory = FileDirectory new: "."
	if !(directory entry-is-directory: build-settings c-sources-dir)
		directory create-subdirectory: build-settings c-sources-dir
	if !(directory entry-is-directory: build-settings objects-dir)
		directory create-subdirectory: build-settings objects-dir

	# Number the classes.
	object-class = compiler standard-object-proto
	object-class number-classes: ClassNumberer new

	# Emit the settings.
	settings-changed = emit-settings: build-settings
	if settings-changed
		recompile-all = true
	
	# Copy Trylon_.h.
	contents = (File new: library-path + "/Trylon_.h") contents
	stream = ExistingFileStream new: build-settings c-sources-dir + "/Trylon_.h"
	stream write: contents
	if stream is-changed
		recompile-all = true
	stream close

	# Copy and compile Trylon_.c.
	contents = (File new: library-path + "/Trylon_.c") contents
	c-file-name = build-settings c-sources-dir + "/Trylon_.c"
	stream = ExistingFileStream new: c-file-name
	stream write: contents
	compile-trylon-c = (stream is-changed || recompile-all)
	stream close
	objects = List new
	objects append: (compile-c-file: "Trylon_" force-compile: compile-trylon-c)

	# Emit the classes and packages.
	status-reporter report: "Emitting code..."
	status-reporter indent
	for proto in compiler all-protos
		builder = ClassBuilder new: proto
		builder emit: recompile-all
		objects append: builder object-file-name
	status-reporter unindent

	# Emit the dispatch table.
	recompile = emit-dispatch-table: compiler main-proto
	if recompile-all
		recompile = true
	objects append: (compile-c-file: "methods_" force-compile: recompile)

	# Emit the symbols.
	status-reporter report: "Emitting symbols..."
	recompile = (emit-symbols || recompile-all)
	objects append: (compile-c-file: "symbols_" force-compile: recompile)

	# Link.
	status-reporter report: "Linking..."
	args = List new
	args append: "-o"
	args append: program-name
	for object-file in objects
		args append: object-file
	for flag in build-settings link-flags
		args append: flag
	report-run-program: build-settings linker arguments: args
	System run-program: build-settings linker arguments: args

	# Check for undeclared selectors.
	for symbol-info in compiler symbols values
		if symbol-info called && !(symbol-info declared)
			status-reporter warn: 	--
				"'" + symbol-info name + "' is called but never defined."


emit-settings: build-settings
	stream = 	--
		ExistingFileStream new: 	--
			(File new: build-settings c-sources-dir + "/settings_.h")

	if build-settings support-perform
		stream write-line: "#define SUPPORT_PERFORM_"
	if build-settings debugger
		stream write-line: "#define DEBUGGER_"
	
	stream write-line
	is-changed = stream is-changed
	stream close
	return is-changed


mangle-name: name
	# Certain names are reserved in C and/or C++ but not in Trylon.
	if name == "class"
		return "class_"
	else if name == "char"
		return "char_"
	else if name == "int"
		return "int_"
	else if name == "short"
		return "short_"
	else if name == "long"
		return "long_"
	else if name == "float"
		return "float_"
	else if name == "double"
		return "double_"
	else if name == "inline"
		return "inline_"
	else if name == "static"
		return "static_"
	else if name == "namespace"
		return "namespace_"
	
	# Mangle the name.
	result = ""
	run-start = name start
	p = run-start
	stopper = name stopper
	while p < stopper
		c = p deref-char
		if !((c >= `A` && c <= `Z`) || (c >= `a` && c <= `z`) || 	--
				(c >= `0` && c <= `9`))
			# Finish off the current run.
			result += String new: run-start to: p
			p += 1
			run-start = p

			# Mangle the character.
			mangled-char = nil
			if c == `-`
				mangled-char = "_"
			else if c == `:`
				mangled-char = "_co_"
			else if c == ` `
				mangled-char = "__"
			else if c == `<`
				mangled-char = "_lt_"
			else if c == `>`
				mangled-char = "_gt_"
			else if c == `=`
				mangled-char = "_eq_"
			else if c == `+`
				mangled-char = "_pl_"
			else if c == `*`
				mangled-char = "_st_"
			else if c == `/`
				mangled-char = "_dv_"
			else if c == `%`
				mangled-char = "_pc_"
			else if c == `[`
				mangled-char = "_in_"
			else if c == `]`
				mangled-char = "_dx_"
			else if c == `!`
				mangled-char = "_nt_"
			else if c == `~`
				mangled-char = "_tw_"
			else if c == `&`
				mangled-char = "_an_"
			else if c == `|`
				mangled-char = "_or_"
			else if c == `^`
				mangled-char = "_xr_"
			else if c == `#`
				mangled-char = "_lb_"
			else if c == `_`
				mangled-char = "_ul_"
			else if c == `.`
				mangled-char = "_dt_"
			else
				mangled-char = "_" + (c & 0xFF) int string + "_"

			result += mangled-char

		else
			p += 1

	result += String new: run-start to: p
	return result


string-literal-length: string
	# Count the characters.
	p = string start
	stopper = string stopper
	length = 0
	while p < stopper
		c = p deref-char
		p += 1

		if c == `\\`
			c = p deref-char
			if c >= `0` && c <= `3`
				# Octal: 3 characters after the `\`.
				p += 3
			else if c == `x`
				# Hex: `x` and 2 more characters after the `\`.
				p += 3
			else
				# Only the single character after the `\` is quoted.
				p += 1

		length += 1
	
	return length


escape-string-for-c: string
	result = StringBuilder new
	run-start = string start
	p = run-start
	stopper = string stopper
	while p < stopper
		c = p deref-char
		if c < ` ` || c > `~` || c == `"` || c == `\\`
			# Finish off the current run.
			result += String new: run-start to: p
			p += 1
			run-start = p

			# Add the escaped character.
			result += "\\"
			escape-string = nil
			switch c
				`\n`
					escape-string = "n"
				`\t`
					escape-string = "t"
				`\r`
					escape-string = "r"
				`\b`
					escape-string = "b"
				`"`, `\\`
					escape-string = c char-string
				else
					escape-string = "x"
					digit = c >> 4
					if digit > 9
						escape-string += (digit - 0x0A + `A`) char-string
					else
						escape-string += (digit + `0`) char-string
					digit = c & 0x0F
					if digit > 9
						escape-string += (digit - 0x0A + `A`) char-string
					else
						escape-string += (digit + `0`) char-string
			result += escape-string

		else
			# Unescaped character -- just add it to the run.
			p += 1

	# Finish off the last run and return.
	result += String new: run-start to: p
	return result string


extend Compiler
	mangle-name: name
		return CCompiler mangle-name: name


# Program building.

emit-dispatch-table: main-package
	status-reporter report: "Building dispatch table..."
	status-reporter indent
	
	object-class = compiler root-proto: main-package

	# Gather up the rows.
	status-reporter report: "Gathering rows."
	rows = DispatchRowSet new
	for symbol in compiler symbols values
		if !(symbol declared)
			continue

		# Create the row and fill it in.
		row = DispatchRow new: symbol
		object-class setup-dispatch-row: row inherited-function: nil

		# Add the row.
		rows add: row
	
	# Fit the rows.
	# "rows" has the rows sorted by number of entries.
	status-reporter report: "Fitting rows."
	dispatch-table = ExpandoArray new
	used-offsets = ExpandoBitmap new
	for row in rows
		row fit-into: dispatch-table used-offsets: used-offsets
	
	status-reporter unindent
	
	# Now, emit the "methods_.c" file.
	status-reporter report: "Emitting dispatch table..."

	# Create the file.
	stream = 	--
		ExistingFileStream new: 	--
			(File new: build-settings c-sources-dir + "/methods_.c")
	stream write-line: "#include \"Trylon_.h\""
	stream write-line

	# Define all selectors.
	if !(build-settings support-perform)
		for row in rows
			stream write: "DefineSelector_("
			stream write: (mangle-name: row name)
			stream write: ", "
			stream write: row selector string
			stream write: ")"
			stream write-line
		stream write-line
	
	# Declare all functions.
	object-class emit-all-function-declarations: stream
	stream write-line

	# Emit the dispatch table.
	num-filled = 0
	stream write-line: "struct RDTableEntry_ dispatchTable_[] = {"
	for entry in dispatch-table
		if entry == nil
			stream write-line: "\t{ nil, -1 },"
			continue

		stream write-all: 	--
			("\t{ ", entry function c-name, ", ", entry selector string, " },\n")
		num-filled += 1
	stream write-line: "};"
	stream write-line

	fill-rate = num-filled float / dispatch-table num-items float
	stream write-all: 	--
		("/* Fill rate: ", fill-rate string, ", num items: ", 	--
		 dispatch-table num-items string, " */\n")
	
	# Finish up "methods_.c".
	is-changed = stream is-changed
	stream close
	return is-changed


emit-symbols
	stream = 	--
		ExistingFileStream new: 	--
			(File new: build-settings c-sources-dir + "/symbols_.c")
	stream write-line: "#include \"Trylon_.h\""
	stream write-line

	# Symbols.
	include-selectors = 	--
		build-settings include-selector-symbols || build-settings support-perform
	for symbol in compiler symbols values
		if !include-selectors && !(symbol used-as-symbol)
			continue
		name = symbol name
		stream write-all: 	--
			("DefineSymbolData_(", (mangle-name: name), ", \"", name, "\")\n")
	stream write-line
	first-symbol-name = nil
	last-symbol-name = nil
	for symbol in compiler symbols values
		if !include-selectors && !(symbol used-as-symbol)
			continue
		name = symbol name
		if first-symbol-name == nil
			first-symbol-name = name
		last-symbol-name = name
		stream write-all: 	--
			("DefineSymbolObject_(", (mangle-name: name), ", ", 	--
			 symbol index string, ")\n")
	stream write-line

	# First and last symbol (for lookup).
	if first-symbol-name
		stream write-all: 	--
			("struct Standard__Symbol__internal* firstSymbol_ = \n", 	--
			 "\t(struct Standard__Symbol__internal*) Sym_(", 	--
			 (mangle-name: first-symbol-name), 	--
			 ");\n")
		stream write-all: 	--
			("struct Standard__Symbol__internal* lastSymbol_ = \n", 	--
			 "\t(struct Standard__Symbol__internal*) Sym_(", 	--
			 (mangle-name: last-symbol-name), 	--
			 ");\n")
	else
		# No symbols at all.
		stream write-line: "struct Standard__Symbol__internal* firstSymbol_ = nil;\n"
		stream write-line: "struct Standard__Symbol__internal* lastSymbol_ = nil;\n"
	stream write-line

	is-changed = stream is-changed
	stream close
	return is-changed



# C file compilation.

compile-c-file: name force-compile: force-compile
	build-settings = compiler build-settings
	object-file-name = build-settings objects-dir + "/" + name + ".o"
	if force-compile || !((File new: object-file-name) exists)
		status-reporter report: "Compiling " + name + ".c..."
		args = List new
		args append: "-c"
		args append: build-settings c-sources-dir + "/" + name + ".c"
		args append: "-o"
		args append: object-file-name
		for flag in build-settings c-flags
			args append: flag
		report-run-program: build-settings c-compiler arguments: args
		status = System run-program: build-settings c-compiler arguments: args
		if status != 0
			throw MessageException new: "C compilation failed."

	return object-file-name


report-run-program: program arguments: args
	if compiler build-settings is-verbose
		status-reporter indent

		command = StringBuilder new
		command += program
		command += " "
		for arg in args
			command += arg
			command += " "
		status-reporter report: command string

		status-reporter unindent


# Helpers.

report: message
	status-reporter report: message


emit-send: name to-string: receiver with: arguments builder: builder
	builder calling-method: name
	arg-results = List new
	for arg in arguments
		arg-results append: (arg emit-code: builder)
	result = builder get-temporary
	line = StringBuilder new
	line add: result access
	line add: " = Call_("
	line add: (mangle-name: name)
	line add: ", "
	line add: receiver
	for arg in arg-results
		line add: ", "
		line add: arg access
	line add: ");"
	builder add-line: line string
	return result


# References.

references
	Expressions
	Functions
	Statements
	Objects




# Copyright 2005-2007 Steve Folta
# See the License file.

