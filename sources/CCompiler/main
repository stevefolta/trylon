trylon CCompiler


mangle-name: name
	# Certain names are reserved in C and/or C++ but not in Trylon.
	if name == "class"
		return "class_"
	else if name == "char"
		return "char_"
	else if name == "int"
		return "int_"
	else if name == "short"
		return "short_"
	else if name == "long"
		return "long_"
	else if name == "float"
		return "float_"
	else if name == "double"
		return "double_"
	else if name == "inline"
		return "inline_"
	else if name == "static"
		return "static_"
	else if name == "namespace"
		return "namespace_"
	
	# Mangle the name.
	result = ""
	run-start = name start
	p = run-start
	stopper = name stopper
	while p < stopper
		c = p deref-char
		if !((c >= `A` && c <= `Z`) || (c >= `a` && c <= `z`) || 	--
				(c >= `0` && c <= `9`))
			# Finish off the current run.
			result += String new: run-start to: p
			p += 1
			run-start = p

			# Mangle the character.
			mangled-char = nil
			if c == `-`
				mangled-char = "_"
			else if c == `:`
				mangled-char = "_co_"
			else if c == ` `
				mangled-char = "__"
			else if c == `<`
				mangled-char = "_lt_"
			else if c == `>`
				mangled-char = "_gt_"
			else if c == `=`
				mangled-char = "_eq_"
			else if c == `+`
				mangled-char = "_pl_"
			else if c == `*`
				mangled-char = "_st_"
			else if c == `/`
				mangled-char = "_dv_"
			else if c == `%`
				mangled-char = "_pc_"
			else if c == `[`
				mangled-char = "_in_"
			else if c == `]`
				mangled-char = "_dx_"
			else if c == `!`
				mangled-char = "_nt_"
			else if c == `~`
				mangled-char = "_tw_"
			else if c == `&`
				mangled-char = "_an_"
			else if c == `|`
				mangled-char = "_or_"
			else if c == `^`
				mangled-char = "_xr_"
			else if c == `#`
				mangled-char = "_lb_"
			else if c == `_`
				mangled-char = "_ul_"
			else if c == `.`
				mangled-char = "_dt_"
			else
				mangled-char = "_" + (c & 0xFF) int string + "_"

			result += mangled-char

		else
			p += 1

	result += String new: run-start to: p
	return result


string-literal-length: string
	# Count the characters.
	p = string start
	stopper = string stopper
	length = 0
	while p < stopper
		c = p deref-char
		p += 1

		if c == `\\`
			c = p deref-char
			if c >= `0` && c <= `3`
				# Octal: 3 characters after the `\`.
				p += 3
			else if c == `x`
				# Hex: `x` and 2 more characters after the `\`.
				p += 3
			else
				# Only the single character after the `\` is quoted.
				p += 1

		length += 1
	
	return length

extend Compiler
	mangle-name: name
		return CCompiler mangle-name: name


# Program building.

emit-dispatch-table: main-package
	status-reporter report: "Building dispatch table..."
	status-reporter indent
	
	object-class = the-compiler root-proto: main-package

	# Gather up the rows.
	status-reporter report: "Gathering rows."
	rows = DispatchRowSet new
	for fn-name in the-compiler selector-names keys
		# Create the row and fill it in.
		row = DispatchRow new: fn-name
		object-class setup-dispatch-row: row inherited-function: nil

		# Add the row.
		rows add: row
	
	# Fit the rows.
	# "rows" has the rows sorted by number of entries.
	status-reporter report: "Fitting rows."
	dispatch-table = ExpandoArray new
	used-offsets = ExpandoBitmap new
	for row in rows
		iff not-anymore
			status-reporter report: "Fitting " + row name + "..."
		row fit-into: dispatch-table used-offsets: used-offsets
	
	status-reporter unindent
	
	# Now, emit the "methods_.c" file.
	status-reporter report: "Emitting dispatch table..."

	# Create the file.
	stream = 	--
		ExistingFileStream new: 	--
			(File new: build-settings c-sources-dir + "/methods_.c")
	stream write-line: "#include \"Trylon_.h\""
	stream write-line

	# Define all selectors.
	for row in rows
		stream write: "DefineSelector_("
		stream write: (mangle-name: row name)
		stream write: ", "
		stream write: row selector string
		stream write: ")"
		stream write-line
	stream write-line
	
	# Declare all functions.
	object-class emit-all-instance-function-declarations: stream
	stream write-line

	# Emit the dispatch table.
	num-filled = 0
	stream write-line: "struct RDTableEntry_ dispatchTable_[] = {"
	for entry in dispatch-table
		if entry == nil
			stream write-line: "\t{ nil, nil },"
			continue

		stream write-all: 	--
			("\t{ ", entry function c-name, ", ", entry selector string, " },\n")
		num-filled += 1
	stream write-line: "};"
	stream write-line

	fill-rate = num-filled float / dispatch-table num-items float
	stream write-all: 	--
		("/* Fill rate: ", fill-rate string, "/", 	--
		 dispatch-table num-items string, ") */\n")
	
	# Finish up "methods_.c".
	is-changed = stream is-changed
	stream close



# C Compilation.

compile-c-file: name force-compile: force-compile
	build-settings = the-compiler build-settings
	object-file-name = build-settings objects-dir + "/" + name + ".o"
	if force-compile || !((File new: object-file-name) exists)
		status-reporter report: "Compiling " + name + ".c..."
		args = List new
		args append: "-c"
		args append: build-settings c-sources-dir + "/" + name + ".c"
		args append: "-o"
		args append: object-file-name
		for flag in build-settings c-flags
			args append: flag
		report-run-program: build-settings c-compiler arguments: args
		status = System run-program: build-settings c-compiler arguments: args
		if status != 0
			throw MessageException new: "C compilation failed."

	return object-file-name


report-run-program: program arguments: args
	if the-compiler build-settings is-verbose
		status-reporter indent

		command = StringBuilder new
		command += program
		command += " "
		for arg in args
			command += arg
			command += " "
		status-reporter report: command string

		status-reporter unindent


report: message
	status-reporter report: message


references
	Expressions
	Functions
	Statements
	Objects




# Copyright 2005-2007 Steve Folta
# See the License file.

