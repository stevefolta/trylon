trylon MethodBuilder

fields code temporaries loops
fields int-literals string-literals float-literals dict-literals tuple-literals
fields extern-declarations used-classes used-selectors used-shared-fields
fields next-temporary-num indent-level loop-stack

create
	code = StringBuilder new
	temporaries = IndexedResources new
	loops = IndexedResources new
	int-literals = IndexedResources new
	string-literals = IndexedResources new
	float-literals = IndexedResources new
	dict-literals = IndexedResources new
	tuple-literals = IndexedResources new
	extern-declarations = List new
	used-classes = ObjectMap new
	used-selectors = Dictionary new
	used-shared-fields = ObjectMap new
	next-temporary-num = 0
	indent-level = 0
	loop-stack = List new


supports-only-literals
	return false


get-temporary
	temp-num = next-temporary-num
	next-temporary-num += 1
	temporary = Temporary new: temp-num
	if temp-num > temporaries next-index - 1
		temporaries add: temporary
	return temporary
	# Really want:
	# temp-num = next-temporary-num
	# next-temporary-num += 1
	# if temp-num < temporaries next-index
	# 	return temporaries at: temp-num
	# temporary = Temporary new: temp-num
	# temporaries add: temporary
	# return temporary

reset-temporaries
	next-temporary-num = 0


add-extern-declaration: declaration
	extern-declarations append: declaration


using-class: the-class
	used-classes at: the-class put: the-class

using-proto: proto
	using-class: proto

calling-method: name
	used-selectors at: name put: name

using-shared-field: field on-proto: on-proto
	# This is a little tricky.  We count on the fact that we'll be given 
	# the same "field" object anytime that the field in "on-proto" is 
	# referenced.  So we can use an ObjectMap to keep track of them.
	used-shared-fields at: field put: on-proto

add-line: line
	# Add the indent.
	adjusted-indent-level = indent-level
	if adjusted-indent-level > 20
		adjusted-indent-level = 20
	code += 	--
		"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t" 	--
			substr: 0 length: adjusted-indent-level
	
	code += line
	code += "\n"


add-blank-line
	code += "\n"

indent
	indent-level += 1

unindent
	indent-level -= 1


start-loop: loop
	loops add: loop
	push-loop: loop

end-loop
	pop-loop

push-loop: loop
	loop-stack prepend: loop index

pop-loop
	loop-stack pop-front

cur-loop-index
	return loop-stack head


emit: stream
	stream write-line: "{"

	# Declarations.
	temporaries emit-declarations-on: stream
	# loops emit-declarations-on: stream 	# Not needed.
	int-literals emit-declarations-on: stream
	string-literals emit-declarations-on: stream
	float-literals emit-declarations-on: stream
	tuple-literals emit-declarations-on: stream
	dict-literals emit-declarations-on: stream

	# Declare selectors.
	if !used-selectors is-empty
		stream write: "\t"
		done-one = false
		for name in used-selectors keys
			if done-one
				stream write: " "
			else
				done-one = true
			stream write-all: ("UsingMethod_(", (mangle-name: name), ")")
		stream write-line
	
	# Shared field declarations.
	if !used-shared-fields is-empty
		for field in used-shared-fields keys
			on-proto = used-shared-fields at: field
			stream write-all: 	--
				("UsingSharedField_(", (mangle-name: field name), ", ", 	--
				 on-proto c-name, ") ")
		stream write-line

	# External declarations.
	if !extern-declarations is-empty
		for declaration in extern-declarations
			stream write: "\t"
			stream write-line: declaration
	
	# ...

	stream write-line

	# Emit the body of the code.
	stream write: code string

	stream write-line: "\treturn nil;"
	stream write-line: "}"


#####


