trylon main

the-compiler = nil

main: args
	debug: "In main:"
	TrylidCodeParser 	# TEMPORARY: This is just here to test that it compiles.
	debug: "About to Compiler compile:"
	return Compiler compile: args

status-reporter
	return the-compiler status-reporter

debug: message
	iff debugging
		print-line: message


iff !in-jolt
	class Expression
		field tuple

		create: num-items
			tuple = Tuple new: num-items

		class-fn with: value
			expr = Expression new: 1
			expr at: 0 put: value
			return expr

		class-fn with: value-1 with: value-2
			expr = Expression new: 2
			expr at: 0 put: value-1
			expr at: 1 put: value-2
			return expr

		class-fn with: value-1 with: value-2 with: value-3
			expr = Expression new: 3
			expr at: 0 put: value-1
			expr at: 1 put: value-2
			expr at: 2 put: value-3
			return expr

		class-fn with: value-1 with: value-2 with: value-3 with: value-4
			expr = Expression new: 4
			expr at: 0 put: value-1
			expr at: 1 put: value-2
			expr at: 2 put: value-3
			expr at: 3 put: value-4
			return expr

		class-fn 	--
		  	with: value-1 with: value-2 with: value-3 with: value-4 with: value-5
			expr = Expression new: 5
			expr at: 0 put: value-1
			expr at: 1 put: value-2
			expr at: 2 put: value-3
			expr at: 3 put: value-4
			expr at: 4 put: value-5
			return expr

		at: index put: value
			tuple at: index put: value

		at: index
			return tuple at: index

		iterator
			return tuple iterator

		num-items
			return tuple num-items

		emit: stream
			reporter = nil
			iff debug-emission
				reporter = the-compiler status-reporter
				reporter report: "("
				reporter indent

			if num-items == 2 && (this at: 0) == 'quote'
				stream write: "'"
				emit-value: (this at: 1) on: stream
				iff debug-emission
					reporter unindent
				return

			else if num-items >= 3 && (this at: 0) == 'send' && 	--
			        ((this at: 1) is-a: Expression) && 	--
							((this at: 1) at: 0) == 'quote'
				stream write: "["
				emit-value: (this at: 2) on: stream
				stream write: " "
				emit-value: ((this at: 1) at: 1) on: stream
				index = 3
				while index < num-items
					stream write: " "
					emit-value: (this at: index) on: stream
					index += 1
				stream write: "]"
				return

			stream write: "("
			done-one = false
			for value in tuple
				if done-one
					stream write: " "
				else
					done-one = true
				emit-value: value on: stream
			stream write: ")"

			iff debug-emission
				reporter unindent
				reporter report: ")"

		emit-value: value on: stream
			if (value is-a: String) && !(value is-a: Symbol)
				stream write: "\""
				stream write: value
				stream write: "\""
			else if value is-a: Expression
				value emit: stream
			else
				stream write: value string


iff !in-jolt
	class InternedString
		field string

		create: string
			this string = string

		fn == string
			return this string == string


extend String
	intern
		iff !in-jolt
			return InternedString new: this
		iff in-jolt
			return this asSymbol


