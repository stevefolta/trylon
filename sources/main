trylon main

compiler = nil

main: arguments
	return-value = 0
	try
		# Parse the arguments.
		file-names = List new
		compile-symbols = List new
		do-lex-test = false
		do-words-lexer-test = false
		do-lines-lexer-test = false
		interpret = false
		pass-remaining-args = false
		for arg in arguments tail
			if arg starts-with: "--" && !pass-remaining-args
				compile-symbols append: (arg substr: 2)
				if arg == "--lex-test"
					do-lex-test = true
				else if arg == "--test-words-lexer"
					do-words-lexer-test = true
				else if arg == "--test-lines-lexer"
					do-lines-lexer-test = true
				else if arg == "--run-class" || arg == "-r"
					interpret = false
					pass-remaining-args = true
				else if arg == "--verbose" || 	--
				        arg == "--target-c"
					# Allowed.
				else
					throw MessageException new: ("Unknown option: " + arg)
			else if arg == "-i" && !pass-remaining-args
				interpret = true
			else
				if !interpret
					pass-remaining-args = true
				file-names append: arg

		if do-lex-test
			for arg in arguments tail tail
				lex-test: arg
		else if do-words-lexer-test
			for arg in arguments tail tail
				test-words-lexer: arg
		else if do-lines-lexer-test
			for arg in arguments tail tail
				test-lines-lexer: arg

		else if !file-names is-empty
			if !interpret
				iff !support-new-methods
					error: "Running classes is not supported by this build of Trylon."
				iff support-new-methods
					script-path = file-names first-item
					X86Compiler load: script-path into: Main as: "Script"
					Main Script main: file-names 	# 'file-names' is really the arguments.
			else
				for file-name in file-names
					Interpreter interpret: (File contents-of: file-name)

		else
			return-value = Compiler compile: compile-symbols
	
	catch Exception
		print-line: exception message
		return 1
	
	return return-value


status-reporter
	return compiler status-reporter

build-settings
	return compiler build-settings


debug: message
	iff debugging
		print-line: message

log: message
	status-reporter report: message
log-indent
	status-reporter indent
log-unindent
	status-reporter unindent



# Test.

lex-test: filename
	try
		lexer = Compiler Lexer new: (File new: filename) contents
		loop
			token = lexer next-token
			print: token type
			if token text && !token text is-empty
				print: ": "
				print: token text
			print-line
			if token type == 'eof'
				break
	catch Exception
		print-line: "Error: " + exception message


test-words-lexer: filename
	try
		for line in (File new: filename) contents lines
			lexer = Trylon WordsLexer new: line
			while !lexer is-done
				print-line: lexer next
	catch Exception
		print-line: "Error: " + exception message


test-lines-lexer: filename
	try
		lexer = Trylon LinesLexer new: (File new: filename) contents
		lines = lexer lex
		dump-lines: lines level: 0
	catch Exception
		print-line: "Error: " + exception message


dump-lines: lines level: level
	for line in lines
		print: level string
		print: "> "
		print-line: line text
		if line block
			dump-lines: line block level: level + 1


references
	# Make sure these get loaded up; the old Trylon 1 compiler didn't like if if
	# the extensions came too late.
	CCompiler
	Interpreter
	iff support-new-methods
		X86Compiler
		iff test-x86-compiler
			X86Compiler test
		# Nice things to have for scripts, that aren't already used by the compiler
		# itself:
		Standard Test


iff support-new-methods
	class References
		Script
			# Defining the 'Script' message, so the compiler won't complain about
			# calling it.


# Copyright 2007-2009 Steve Folta.  See the License file.

